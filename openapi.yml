openapi: 3.0.0
info:
  description: Bandwidth API specification
  version: '3.0.0-alpha.1'
  title: Bandwidth API
  contact:
    email: openapi@bandwidth.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: Account
    description: The Account API allows you to retrieve your current balance, transaction list, account type and all elements related to your platform account.
  - name: Applications
    description: Applications allow you to receive incoming call and messaging events.
  - name: AvailableNumbers
    description: The Available Numbers resource lets you search for numbers that are available for use with your application.
  - name: Bridges
    description: The Bridges resource allows you to bridge two calls together allowing for two way audio between them.
  - name: Calls
    description: The Calls resource lets you make phone calls and view information about previous inbound and outbound calls.
  - name: Conferences
    description: The Conference resource allows you create conferences, add members to it, play audio, speak text, mute/unmute members, hold/unhold members and other things related to conferencing. 
  - name: Domains
    description: A domain is a way to logically group endpoints.
  - name: Errors
    description: The Errors resource lets you see information about errors that happened in your API calls and during applications callbacks.
  - name: Media
    description: The Media resource lets you upload your media files to Bandwidth API servers so they can be used in applications without requiring a separate hosting provider.
  - name: PhoneNumbers
    description: The Phone Numbers resource lets you get phone numbers for use with your programs and manage numbers you already have.
  - name: Recordings
    description: Retrieve information about call recordings.

paths:
  /v1/users/{userId}/account:
    get:
      tags:
        - Account
      summary: Get information about user account.
      operationId: get
      description: Get information about user account.
      responses:
        '200':
          description: information about user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  /v1/users/{userId}/account/transactions:
    get:
      tags:
        - Account
      summary: Get the transactions from the user's account.
      operationId: getTransactions
      description: Get the transactions from the user's account.
      parameters:
        - name: maxItems
          in: query
          description: Limit the number of transactions that will be returned
          schema:
            type: integer
            format: int32
        - name: toDate
          in: query
          description: Return only transactions that are newer than the parameter
          schema:
            type: string
            format: date-time
        - name: fromDate
          in: query
          description: Return only transactions that are older than the parameter
          schema:
            type: string
            format: date-time
        - name: type
          in: query
          description: Return only transactions that are this type.
          schema:
            $ref: '#/components/schemas/AccountTransactionType'
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of transactions.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of transactions. 
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 1000
        - name: number
          in: query
          description: Return only transactions that are from the specified number.
          schema:
            type: string
      responses:
        '200':
          description: information about user's account transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountTransaction'
  /v1/users/{userId}/applications:
    get:
      tags:
        - Applications
      summary: Get a list of your applications.
      operationId: list
      description: Get a list of your applications.
      parameters:
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of applications.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of applications.
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 1000
      responses:
        '200':
          description: list of user's applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
    post:
      tags:
        - Applications
      summary: Creates an application that can handle calls and messages for one of your phone number.
      operationId: create
      description: Creates an application that can handle calls and messages for one of your phone number. Many phone numbers can share an application. For more information on how to integrate voice and messaging in your application, visit the [FAQ](http://dev.bandwidth.com/faq/#general)
      requestBody:
        $ref: '#/components/requestBodies/CreateApplicationData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/applications/{id}:
    get:
      tags:
        - Applications
      summary: Gets information about one of your applications.
      operationId: get
      description: Gets information about one of your applications. No query parameters are supported.
      responses:
        '200':
          description: Application's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
    post:
      tags:
        - Applications
      summary: Makes changes to an application.
      operationId: update
      description: Makes changes to an application. 
      requestBody:
        $ref: '#/components/requestBodies/CreateApplicationData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
    delete:
      tags:
        - Applications
      summary: Permanently deletes an application.
      operationId: delete
      description: Permanently deletes an application. 
      responses:
        '200':
          $ref: '#/components/responses/Empty'  
  /v1/users/{userId}/media:
    get:
      tags:
        - Media
      summary: Gets a list of your media files. 
      operationId: list
      description: Gets a list of your media files. No query parameters are supported.
      responses:
        '200':
          description: list of media files data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Media'
  /v1/users/{userId}/media/{mediaName}:
    get:
      tags:
          - Media
      summary: Downloads a media file you previously uploaded. 
      operationId: download
      description: Downloads a media file you previously uploaded.
      responses:
        '200':
          description: Content of file
          content:
            default:
              schema:
                type: string
                format: binary
    put:
      tags:
          - Media
      summary: Uploads a file the normal HTTP way. 
      operationId: upload
      description: Uploads a file the normal HTTP way. You may add headers to the request in order to provide some control to your media-file.
      parameters:
        - name: contentType
          in: header
          description: The media type of the entity-body.
          schema:
            type: string
        - name: cacheControl
          in: header
          description: The media type of the entity-body.
          schema:
            type: string
      responses:
        '200':
          description: Success
    delete:
      tags:
          - Media
      summary: Deletes a media file from Bandwidth API server. 
      operationId: delete
      description: Deletes a media file from Bandwidth API server.
      responses:
        '200':
          description: Success
  /v1/availableNumbers/local:
    get:
      tags:
        - AvailableNumbers
      summary: Search for available local numbers
      operationId: searchLocalNumbers
      description: Searches for available local numbers by location or pattern criteria. For more information about Bandwidth’s local phone numbers, see the [FAQ](http://dev.bandwidth.com/faq/#voice)
      parameters:
        - name: city
          in: query
          description: A city name.
          schema:
            type: string
        - name: state
          in: query
          description: A two-letter US state abbreviation ("CA" for California).
          schema:
            type: string
        - name: zip
          in: query
          description: A 5-digit US ZIP code.
          schema:
            type: number
        - name: areaCode
          in: query
          description: A 3-digit telephone area code.
          schema:
            type: string            
        - name: inLocalCallingArea
          in: query
          description: Boolean value to indicate that the search for available numbers must consider overlayed areas. Only applied for localNumber searching.
          schema:
            type: boolean            
        - name: quantity
          in: query
          description: The maximum number of numbers to return
          schema:
            type: number
            format: int32
            default: 10,
            maximum: 5000
        - name: pattern
          in: query
          description: 'A number pattern that may include letters, digits, and the following wildcard characters: ? - matches any single digit, * - matches zero or more digits'
          schema:
            type: string
      responses:
        '200':
          description: list of found numbers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchNumberData'
    post:
      tags:
        - AvailableNumbers
      summary: Searches and order available local numbers.
      operationId: searchAndOrderLocalNumbers
      description: Searches and order available local numbers by location criteria. For more information about Bandwidth’s local phone numbers, see the [FAQ](http://dev.bandwidth.com/faq/#voice)
      parameters:
        - name: city
          in: query
          description: A city name.
          schema:
            type: string
        - name: state
          in: query
          description: A two-letter US state abbreviation ("CA" for California).
          schema:
            type: string
        - name: zip
          in: query
          description: A 5-digit US ZIP code.
          schema:
            type: number
        - name: areaCode
          in: query
          description: A 3-digit telephone area code.
          schema:
            type: string
        - name: inLocalCallingArea
          in: query
          description: Boolean value to indicate that the search for available numbers must consider overlayed areas. Only applied for localNumber searching.
          schema:
            type: boolean
        - name: localNumber
          in: query
          description: It is defined as the first digits of a telephone number inside an area code for filtering the results. It must have at least 3 digits and the areaCode field must be filled
          schema:
            type: string
        - name: quantity
          in: query
          description: The maximum number of numbers to return
          schema:
            type: number
            format: int32
            default: 10,
            maximum: 5000
        - name: pattern
          in: query
          description: 'A number pattern that may include letters, digits, and the following wildcard characters: ? - matches any single digit, * - matches zero or more digits'
          schema:
            type: string
      responses:
        '201':
          description: list of ordered numbers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchAndOrderNumberData'
  /v1/availableNumbers/tollFree:
    get:
      tags:
        - AvailableNumbers
      summary: Search for available toll free numbers
      operationId: searchTollFreeNumbers
      description: For more information about Bandwidth’s toll free phone numbers, see the [FAQ](http://dev.bandwidth.com/faq/#voice)
      parameters:
        - name: quantity
          in: query
          description: The maximum number of numbers to return
          schema:
            type: number
            format: int32
            default: 10,
            maximum: 5000
        - name: pattern
          in: query
          description: 'A number pattern that may include letters, digits, and the following wildcard characters: ? - matches any single digit, * - matches zero or more digits'
          schema:
            type: string
      responses:
        '200':
          description: list of found numbers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchNumberData'
    post:
      tags:
        - AvailableNumbers
      summary: Searches and order available toll free numbers.
      operationId: searchAndOrderTollFreeNumbers
      description: Searches and order available Toll Free numbers. For more information about Bandwidth’s local phone numbers, see the [FAQ](http://dev.bandwidth.com/faq/#voice)
      parameters:
        - name: quantity
          in: query
          description: The maximum number of numbers to return
          schema:
            type: number
            format: int32
            default: 10,
            maximum: 5000
      responses:
        '201':
          description: list of ordered numbers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchAndOrderNumberData'
  /v1/users/{userId}/bridges:
    get:
      tags:
        - Bridges
      summary: Get a list of your bridges.
      operationId: list
      description: Get a list of your bridges.
      parameters:
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of bridges.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of bridges.
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 1000
      responses:
        '200':
          description: list of user's bridges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bridge'
    post:
      tags:
        - Bridges
      summary: Create a new bridge.
      operationId: create
      description: Create a new bridge.
      requestBody:
        $ref: '#/components/requestBodies/CreateBridgeData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/bridges/{id}:
    get:
      tags:
        - Bridges
      summary: Gets information about a specific bridge.
      operationId: get
      description: Gets information about a specific bridge.
      responses:
        '200':
          description: Bridge's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bridge'
    post:
      tags:
        - Bridges
      summary: Change calls in a bridge and bridge/unbridge the audio.
      operationId: update
      description: Change calls in a bridge and bridge/unbridge the audio.
      requestBody:
        $ref: '#/components/requestBodies/UpdateBridgeData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/bridges/{id}/audio:
    post:
      tags:
        - Bridges
      summary: Play an audio file or speak a sentence in a bridge.
      operationId: playAudio
      description: Play an audio file or speak a sentence in a bridge.
      requestBody:
        $ref: '#/components/requestBodies/PlayAudioData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/bridges/{id}/calls:
    get:
      tags:
        - Bridges
      summary: Get the list of calls that are on the bridge.
      operationId: list
      description: Get the list of calls that are on the bridge.
      responses:
        '200':
          description: list of bridge's calls
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Call'
  /v1/users/{userId}/calls:
    get:
      tags:
        - Calls
      summary: Get a list of your calls.
      operationId: list
      description: Gets a list of active and historic calls you made or received.
      parameters:
        - name: bridgeId
          in: query
          description: The id of the bridge for querying a list of calls history 
          schema:
            type: string
        - name: conferenceId
          in: query
          description: The id of the conference for querying a list of calls history 
          schema:
            type: string
        - name: from
          in: query
          description: The number to filter calls that came from (must be either an E.164 formatted number, like +19195551212, or a valid SIP URI, like sip:someone@somewhere.com). 
          schema:
            type: string
        - name: to
          in: query
          description: The number to filter calls that was called to (must be either an E.164 formatted number, like +19195551212, or a valid SIP URI, like sip:someone@somewhere.com). 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: How to sort the calls. 
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of calls.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of calls.
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 1000
      responses:
        '200':
          description: list of user's calls
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Call'
    post:
      tags:
        - Calls
      summary: Create a new call.
      operationId: create
      description: Create a new call.
      requestBody:
        $ref: '#/components/requestBodies/CreateCallData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/calls/{id}:
    get:
      tags:
        - Calls
      summary: Gets information about an active or completed call.
      operationId: get
      description: Gets information about an active or completed call.
      responses:
        '200':
          description: Call's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
    post:
      tags:
        - Calls
      summary: Update properties of an active phone call.
      operationId: update
      description: Update properties of an active phone call.
      requestBody:
        $ref: '#/components/requestBodies/UpdateCallData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        '201':
          $ref: '#/components/responses/Created'  
  /v1/users/{userId}/calls/{id}/audio:
    post:
      tags:
        - Calls
      summary: Play an audio file or speak a sentence in a call.
      operationId: playAudio
      description: Play an audio file or speak a sentence in a call.
      requestBody:
        $ref: '#/components/requestBodies/PlayAudioData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/calls/{id}/dtmf:
    post:
      tags:
        - Calls
      summary: Send DTMF (phone keypad digit presses).
      operationId: sendDtmf
      description: Send DTMF (phone keypad digit presses).
      requestBody:
        $ref: '#/components/requestBodies/DtmfData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/calls/{id}/events:
    get:
      tags:
        - Calls
      summary: Gets the events that occurred during the call. 
      operationId: getEvents
      description: Gets the events that occurred during the call. 
      responses:
        '200':
          description: list of call's events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CallEvent'
  /v1/users/{userId}/calls/{id}/events/{eventId}:
    get:
      tags:
        - Calls
      summary: Gets information about one call event.  
      operationId: getEvent
      description: Gets information about one call event.  
      responses:
        '200':
          $ref: '#/components/schemas/CallEvent'
  /v1/users/{userId}/calls/{id}/recordings:
    get:
      tags:
        - Calls
      summary: Retrieve all recordings related to the call. 
      operationId: getRecordings
      description: Retrieve all recordings related to the call. 
      responses:
        '200':
          description: list of call's recordings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recording'
  /v1/users/{userId}/calls/{id}/transcriptions:
    get:
      tags:
        - Calls
      summary: Retrieve all transcriptions related to the call. 
      operationId: getTranscriptions
      description: Retrieve all transcriptions related to the call. 
      responses:
        '200':
          description: list of call's transcriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transcription'
  /v1/users/{userId}/calls/{id}/gather:
    post:
      tags:
        - Calls
      summary: Collects a series of DTMF digits from a phone call with an optional prompt.
      operationId: createGather
      description: Collects a series of DTMF digits from a phone call with an optional prompt. This request returns immediately. When gather finishes, an event with the results will be posted to the callback URL. 
      requestBody:
        $ref: '#/components/requestBodies/CreateGatherData'
      responses:
        '201':
          $ref: '#/components/responses/Created' 
  /v1/users/{userId}/calls/{id}/gather/{gatherId}:
    get:
      tags:
        - Calls
      summary: Get the gather DTMF parameters and results.
      operationId: getGather
      description: Get the gather DTMF parameters and results.
      responses:
        '200':
          $ref: '#/components/schemas/Gather' 
    post:
      tags:
        - Calls
      summary: Update the gather.
      operationId: updateGather
      description: Update the gather. 
      requestBody:
        $ref: '#/components/requestBodies/UpdateGatherData'
      responses:
        '200':
          $ref: '#/components/responses/Empty' 
  /v1/users/{userId}/conferences:
    post:
      tags:
        - Conferences
      summary: Create a new conference
      operationId: create
      description: Creates a conference with no members.
      requestBody:
        $ref: '#/components/requestBodies/CreateConferenceData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/conferences/{id}:
    get:
      tags:
        - Conferences
      summary: Gets information about a conference.
      operationId: get
      description: Retrieve current properties for a conference.
      responses:
        '200':
          description: Conference's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conference'
    post:
      tags:
        - Conferences
      summary: Update properties of an active conference.
      operationId: update
      description: Change the conference properties and/or status.
      requestBody:
        $ref: '#/components/requestBodies/UpdateConferenceData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/conferences/{id}/audio:
    post:
      tags:
        - Conferences
      summary: Play an audio file or speak a sentence in a conference.
      operationId: playAudio
      description: Play an audio file or speak a sentence in a conference.
      requestBody:
        $ref: '#/components/requestBodies/PlayAudioData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/conferences/{id}/members:
    get:
      tags:
        - Conferences
      summary: Get information about a conference members.
      operationId: getMembers
      description: List all members from a conference. If a member had already hung up or removed from conference it will be displayed as completed.
      responses:
        '200':
          description: Conference members data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConferenceMember'
    post:
      tags:
        - Conferences
      summary: Add members to a conference.
      operationId: addMember
      description: Add members to a conference.
      requestBody:
        $ref: '#/components/requestBodies/CreateConferenceMemberData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/conferences/{id}/members/{memberId}:
    get:
      tags:
        - Conferences
      summary: Retrieve a conference member properties.
      operationId: getMember
      description: Retrieve a conference member properties.
      responses:
        '200':
          $ref: '#/components/schemas/ConferenceMember'
    post:
      tags:
        - Conferences
      summary: Update a member status/properties.
      operationId: updateMember
      description: Update a member status/properties.
      requestBody:
        $ref: '#/components/requestBodies/UpdateConferenceMemberData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/conferences/{id}/members/{memberId}/audio:
    post:
      tags:
        - Conferences
      summary: Speak text or play audio to only a single conference member
      operationId: playAudio
      description: Speak text or play audio to ONLY a single conference member
      requestBody:
        $ref: '#/components/requestBodies/PlayAudioData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/domains:
    get:
      tags:
        - Domains
      summary: This returns a list of the domains that have been created
      operationId: list
      description: This returns a list of the domains that have been created
      parameters:
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of domains.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of domains.
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 100
      responses:
        '200':
          description: List of domains
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
    post:
      tags:
        - Domains
      summary: This will create a domain.
      operationId: create
      description: This will create a domain.
      requestBody:
        $ref: '#/components/requestBodies/CreateDomainData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/domains/{id}:
    delete:
      tags:
        - Domains
      summary: This will delete a domain
      operationId: delete
      description: This will delete a domain
      responses:
        '200':
          $ref: '#/components/responses/Empty'

  /v1/users/{userId}/domains/{id}/endpoints:
    get:
      tags:
        - Domains
      summary: This returns a list of all endpoints associated with a domain.
      operationId: getEndpoints
      description: This returns a list of all endpoints associated with a domain.
      parameters:
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of endpoints.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of endpoints.
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 1000
      responses:
        '200':
          description: List of endpoints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Endpoint'
    post:
      tags:
        - Domains
      summary: This creates an endpoint.
      operationId: createEndpoint
      description: This creates an endpoint.
      requestBody:
        $ref: '#/components/requestBodies/CreateEndpointData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/domains/{id}/endpoints/{endpointId}:
    get:
      tags:
        - Domains
      summary: This returns a single endpoint.
      operationId: getEndpoint
      description: This returns a single endpoint.
      responses:
        '200':
          $ref: '#/components/schemas/Endpoint'
    post:
      tags:
        - Domains
      summary: This will update an endpoint.
      operationId: updateEndpoint
      description: This will update an endpoint.
      requestBody:
        $ref: '#/components/requestBodies/UpdateEndpointData'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
    delete:
      tags:
        - Domains
      summary: Remove endpoint from domain.
      operationId: deleteEndpoint
      description: Remove endpoint from domain.
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/errors:
    get:
      tags:
        - Errors
      summary: Gets the most recent user errors for the user
      operationId: list
      description: Gets the most recent user errors for the user
      parameters:
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of errors.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of errors.
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 1000
      responses:
        '200':
          description: list of user's errors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /v1/users/{userId}/errors/{id}:
    get:
      tags:
        - Errors
      summary: Gets information about one error.
      operationId: get
      description: Gets information about one error.
      responses:
        '200':
          $ref: '#/components/schemas/Error'
  /v1/phoneNumbers/numberInfo/{number}:
    get:
      tags:
        - PhoneNumbers
      summary: Gets CNAM number info.
      operationId: getNumberInfo
      description: This resource provides a CNAM number info. CNAM is an acronym which stands for Caller ID Name. CNAM can be used to display the calling party's name alongside the phone number, to help users easily identify a caller. CNAM API allows the user to get the CNAM information of a particular number.
      responses:
        '200':
          $ref: '#/components/schemas/NumberInfo'
  /v1/users/{userId}/phoneNumbers:
    get:
      tags:
        - PhoneNumbers
      summary: Gets a list of your numbers. 
      operationId: list
      description: Gets a list of your numbers. 
      parameters:
        - name: applicationId
          in: query
          description: Used to filter the retrieved list of numbers by an associated application ID.
          schema:
            type: string
        - name: state
          in: query
          description: Used to filter the retrieved list of numbers allocated for the authenticated user by a US state.
          schema:
            type: string
        - name: name
          in: query
          description: Used to filter the retrieved list of numbers allocated for the authenticated user by it’s name.
          schema:
            type: string
        - name: city
          in: query
          description: Used to filter the retrieved list of numbers allocated for the authenticated user by it’s city.
          schema:
            type: string
        - name: numberState
          in: query
          description: Used to filter the retrieved list of numbers allocated for the authenticated user by the number state.
          schema:
            type: string
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of numbers.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of numbers.
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 100
      responses:
        '200':
          description: List of numbers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhoneNumber'
    post:
      tags:
        - PhoneNumbers
      summary: Allocates a number so you can use it to make and receive calls and send and receive messages.
      operationId: create
      description: Allocates a number so you can use it to make and receive calls and send and receive messages.
      requestBody:
        $ref: '#/components/requestBodies/CreatePhoneNumberData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/phoneNumbers/{id}:
    get:
      tags:
        - PhoneNumbers
      summary: Gets information about one of your numbers using the number's ID or E.164 number string, like "+19195551212"
      operationId: get
      description: Gets information about one of your numbers using the number's ID or E.164 number string, like "+19195551212"
      responses:
        '200':
          description: Number information
          $ref: '#/components/schemas/PhoneNumber'
    post:
      tags:
        - PhoneNumbers
      summary: Makes changes to a number user has.
      operationId: update
      description: Makes changes to a number user has.
      requestBody:
        $ref: '#/components/requestBodies/UpdatePhoneNumberData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
    delete:
      tags:
        - PhoneNumbers
      summary: Removes a number from your account so you can no longer make or receive calls, or send or receive messages with it. 
      operationId: remove
      description: Removes a number from your account so you can no longer make or receive calls, or send or receive messages with it. 
      responses:
        '200':
          $ref: '#/components/responses/Empty'
  /v1/users/{userId}/recordings:
    get:
      tags:
        - Recordings
      summary: List all users' call recordings.
      operationId: list
      description: List all users' call recordings.
      parameters:
        - name: page
          in: query
          description: Used for pagination to indicate the page requested for querying a list of recordings.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Used for pagination to indicate the size of each page requested for querying a list of recordings.
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 100
      responses:
        '200':
          description: List of recordings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recording'
  /v1/users/{userId}/recordings/{id}:
    get:
      tags:
        - Recordings
      summary: Retrieve a specific call recording information
      operationId: get
      description: Retrieve a specific call recording information.
      responses:
        '200':
          description: Recording information
          content:
            $ref: '#/components/schemas/Recording'
  /v1/users/{userId}/recordings/{id}/transcriptions:
    get:
      tags:
        - Recordings
      summary: Get all the transcriptions that were made for the given recoding
      operationId: getTranscriptions
      description: Get all the transcriptions that were made for the given recoding
      responses:
        '200':
          description: Transcriptions information
          content:
            $ref: '#/components/schemas/Transcription'
    post:
      tags:
        - Recordings
      summary: Request the transcription process to be started for the given recording id.
      operationId: createTranscription
      description: Request the transcription process to be started for the given recording id.
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /v1/users/{userId}/recordings/{id}/transcriptions/{transcriptionId}:
    get:
      tags:
        - Recordings
      summary: Get information about the transcription, regardless its state.
      operationId: getTranscription
      description: Get information about the transcription, regardless its state.
      responses:
        '200':
          description: Transcription's information
          content:
            $ref: '#/components/schemas/Transcription'
components:
  schemas:
    Account:
      type: object
      properties:
        balance:
          type: string
          description: Your account balance in dollars, as a string; the currency symbol is not included.
          example: '538.37250'
        accountType:
          type: string
          description: The type of account configured for your user.
          enum: 
            - pre-pay
            - post-pay
          example: pre-pay
    AccountTransaction:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the transaction.
        time:
          type: string
          format: date-time
          description: The time the transaction was processed.
        amount:
          type: string
          example: '0.1'
          description: The transaction amount in dollars, as a string; the currency symbol is not included.
        type:
          $ref: '#/components/schemas/AccountTransactionType'
        units:
          type: string
          description: The number of product units the transaction charged or credited.
        productType:
          type: string
          description: The product the transaction was related to (not all transactions are related to a product).
          enum:
            - local-number-per-month
            - toll-free-number-per-month
            - sms-in
            - sms-out
            - mms-in
            - mms-out
            - call-in
            - call-out
            - sip-call-in
            - sip-call-out
            - transcription
            - cnam-search
        number:
          type: string
          description: The phone number the transaction was related to (not all transactions are related to a phone number).
    AccountTransactionType:
      type: string
      enum:
        - charge
        - payment
        - credit
        - auto-recharge
      description: The type of transaction
    Application:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the application
        name:
          type: string
          description: A name you choose for this application.
        incomingCallUrl:
          type: string
          description: A URL where call events will be sent for an inbound call. This is the endpoint where the Application Platform will send all call events. Either incomingCallUrl or incomingMessageUrl is required.
        incomingCallUrlCallbackTimeout:
          type: integer
          description: Determine how long should the platform wait for incomingCallUrl's response before timing out in milliseconds.
        incomingCallFallbackUrl:
          type: string
          description: The URL used to send the callback event if the request to incomingCallUrl fails.
        incomingMessageUrl:
          type: string
          description: The unique identifier for the application
        incomingMessageUrlCallbackTimeout:
          type: integer
          description: The unique identifier for the application
        incomingMessageFallbackUrl:
          type: string
          description: The unique identifier for the application
        callbackHttpMethod:  
          type: string
          description: 'Determine if the callback event should be sent via HTTP GET or HTTP POST. Values are "get" or "post", default: "post".'
          enum:
            - post
            - get
          default: post
        autoAnswer:
          type: boolean
          description: Determines whether or not an incoming call should be automatically answered.
    Media:
      type: object
      properties:
        mediaName:
          type: string
          description: The mediaName is the unique name of the media
        contentLength:
          type: integer
          description: Size of the media in Bytes
        content:
          type: string
          description: URL to use to GET the specific media file.
    SearchNumberData:
      type: object
      properties:
        number:
          type: string
          description: The telephone number in E.164 format.
        nationalNumber:
          type: string
          description: The telephone number in a friendly national format.
        patternMatch:
          type: string
          description: The telephone number in a friendly national format with some numbers replaced by letters if a pattern was used to search the number.
        city:
          type: string
          description: The city of the phone number.
        lata:
          type: string
          description: Local access and transport area (LATA), represents an area within which a regional operating company is permitted to offer exchange telecommunications and exchange access services.
        rateCenter:
          type: string
          description: The rate center is a term used to identify a telephone local exchange service area.
        state:
          type: string
          description: The state of the phone number.
        price:
          type: string
          description: The monthly price for the phone number.
    SearchAndOrderNumberData:
      type: object
      properties:
        number:
          type: string
          description: The telephone number in E.164 format.
        nationalNumber:
          type: string
          description: The telephone number in a friendly national format.
        price:
          type: string
          description: The monthly price for the phone number.
        location:
          type: string
          description: Url to number
    Bridge:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the bridge.
        state:
          type: string
          description: Bridge state. 
          enum: 
            - created
            - active
            - hold
            - completed
            - error
        callIds:
          type: array
          description: List of call Ids that will be in the bridge.
          items:
            type: string
        calls:
          type: array
          description: The URL used to retrieve the calls in a specific bridge.
          items:
            type: string
        bridgeAudio:
          type: string
          description: Enable/Disable two way audio path.
        completedTime:
          type: string
          format: date-time
          description: The time when the bridge was completed.
        createdTime:
          type: string
          format: date-time
          description: The time that bridge was created.
        activatedTime:
          type: string
          format: date-time
          description: The time that the bridge got into active state.
    Call:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the call.
        direction:
          type: string
          description: Call direction
          enum:
            - in
            - out
        from:
          type: string
          description: The phone number or SIP address that made the call. Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).
        to:
          type: string
          description: The phone number or SIP address that received the call. Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).
        callTimeout:
          type: number
          description: Determine how long should the platform wait for call answer before timing out in seconds.
        state:
          type: string
          description: The call state
          enum:
            - rejected
            - active
            - completed
            - transferring
        startTime:
          type: string
          format: date-time
          description: Date when the call was created
        activeTime:
          type: string
          format: date-time
          description: Date when the call was answered
        endTime:
          type: string
          format: date-time    
          description: Date when the call ended
        callbackTimeout:
          type: number
          description: Determine how long should the platform wait for callbackUrl’s response before timing out in milliseconds. 
        callbackUrl:
          type: string
          description: The server URL where the call events related to the call will be sent.
        callbackHttpMethod:  
          type: string
          enum:
            - GET
            - POST
          description: Determine if the callback event should be sent via HTTP GET or HTTP POST
        fallbackUrl:
          type: string
          description: he full server URL used to send the callback event if the request to callbackUrl fails.
        chargeableDuration:
          type: number
          description: The number of seconds the call will be billed for.
        recordingEnabled:
          type: boolean
          description: Indicates if the call was recorded. 
        recordingFileFormat:
          type: string
          description: The file format of the recorded call.
          enum:
            - wav
            - mp3
          default: wav
        transcriptionEnabled:
          type: boolean
          description: Whether all the recordings for this call was automatically transcribed.
        bridgeId:
          type: string
          description: The id of the bridge where the call will be added.
        conferenceId:
          type: string
          description: Id of the conference where the call will be added. This property is required if you want to add this call to a conference.
        tag:
          type: string
          description: Any string, it will be included in the callback events of the call.
        sipHeaders:
          type: object
          additionalProperties:
            type: string   
          description: Map of Sip headers prefixed by "X-". Up to 5 headers can be sent per call. Max length for header and value is 256 characters.
    CallEvent:
      type: object
      properties:
        id:
          type: string
          description: The call event id.
        name:
          type: string
          description: The name of the event.
        time:
          type: string
          format: date-time
          description: The time the event occurred.
        data:
          type: object
          description: Data about event
    Recording:
      type: object
      properties:
        id:
          type: string
          description: The recording id.
        startTime:
          type: string
          format: date-time
          description: Date/time when the recording started.
        endTime:
          type: string
          format: date-time
          description: Date/time when the recording ended.
        call:
          type: string
          description: The complete URL to the call resource this recording is associated with.
        media:
          type: string
          description: The complete URL to the media resource this recording is associated with.
        state:
          type: string
          description: The state of the recording
          enum:
            - recording
            - complete
            - saving
            - error
    Transcription:
      type: object
      properties:
        id:
          type: string
          description: The transcription id.
        state:
          type: string
          description: The state of the transcription
          enum:
            - transcribing
            - completed
            - error
        text:
          type: string
          description: The transcribed text.
        time:
          type: string
          format: date-time
          description: The date/time the transcription resource was created
        chargeableDuration:
          type: number
          format: int32
          description: The seconds between activeTime and endTime for the recording
        textSize:
          type: number
          format: int32
          description: The size of the transcribed text.
        textUrl:
          type: string
          description: An url to the full text
    Gather:
      type: object
      properties:
        id:
          type: string
          description: The gather id.      
        state:
          type: string
          description: The state of the gather.
        digits:
          type: string
          description: The digits collected from user.
        reason:
          type: string
          description: Reason
          enum:
            - max-digits
            - terminating-digit
            - inter-digit-timeout
            - hung-up
        call:
          type: string
          description: The call id associated with the event.
        gatherId:
          type: string
          description: The gather event unique id.
        createdTime:
          type: string
          format: date-time
          description: Date/time of event
        completedTime:
          type: string
          format: date-time
          description: Date/time of event

    Conference:
      type: object
      properties:
        id:
          type: string
          description: The conference id.
        state:
          type: string
          description: Conference state
          enum:
            - created
            - active
            - completed
        from:
          type: string
          description: The phone number that will host the conference. 
        createdTime:
          type: string
          format: date-time
          description: The time that the Conference was created (UTC).
        completedTime:
          type: string
          format: date-time
          description: The time that the Conference was completed (UTC).
        activeMembers:
          type: number
          format: int32
          description: The number of active conference members.
        hold:
          type: boolean
          description: If true, all member can’t hear or speak in the conference. If false, all members can hear and speak in the conference (unless set at the member level).
        mute:
          type: boolean
          description: If true, all member can’t speak in the conference. If false, all members can speak in the conference (unless set at the member level).
        callbackTimeout:
          type: number
          description: Determine how long should the platform wait for callbackUrl’s response before timing out in milliseconds. 
        callbackUrl:
          type: string
          description: The server URL where the call events related to the call will be sent.
        callbackHttpMethod:  
          type: string
          enum:
            - GET
            - POST
          description: Determine if the callback event should be sent via HTTP GET or HTTP POST
        fallbackUrl:
          type: string
          description: he full server URL used to send the callback event if the request to callbackUrl fails.
        profile:
          type: string
          enum:
            - interpret_digits
            - passthru_digits
          default: interpret_digits
          description: The conference profile that determines how DTMF is used
        tag:
          type: string
          description: A string that will be included in the callback events of the conference.
    ConferenceMember:
      type: object
      properties:
        id:
          type: string
          description: The conference member id.
        joinTone:
          type: boolean
          description: If true, will play a tone when the member joins the conference. If false, no tone is played when the member joins the conference.
        leavingTone:
          type: boolean
          description: If true, will play a tone when the member leaves the conference. If false, no tone is played when the member leaves the conference.  
        mute:
          type: boolean
          description: If true, member can’t speak in the conference. If false, this members can speak in the conference (unless set at the conference level).
        hold:
          type: boolean
          description: If true, member can’t hear or speak in the conference. If false, member can hear and speak in the conference (unless set at the conference level).  
        addedTime:
          type: string
          format: date-time
          description: Date and time when the member was added to the conference
        removedTime:
          type: string
          format: date-time
          description: Date and time when the member was removed to the conference
        call:
          type: string
          description: The URL of the call resource for this member.
    Domain:
      type: object
      properties:
        id:
          type: string
          description: The domain id.
        name:
          type: string
          description: The name is a unique URI to be used in DNS lookups
        description:
          type: string
          description: String to describe the domain
        endpoints:
          type: string
          description: URL to use to GET list of endpoints on this domain.
    Endpoint:
      type: object
      properties:
        id:
          type: string
          description: The enpoint id.
        name:
          type: string
          description: The endpoint’s name, which SIP clients use as the address of record
        description:
          type: string
          description: String to describe endpoint
        domainId:
          type: string
          description: The id of the domain in which the endpoint will be created. This is the id of the domain resource created in an earlier step.
        applicationId:
          type: string
          description: The id of the application associated with this endpoint. Application_id is used to determine the callback URL to be used when a client associated with the endpoint attempts to make a call.
        enabled:
          type: boolean
          default: true
          description: When set to true, SIP clients can register as this device to receive and make calls. When set to false, registration, inbound, and outbound calling will not succeed. 
        credentials:
          type: object
          description: Contains SIP authentication credentials
          properties:
            realm:
              type: string
              description: Realm
            username:  
              type: string
              description: User name
        sipUri:
          type: string
          description: A SIP URI this device can be contacted at (via INVITE). This property is generated automatically and cannot be changed.      
    Error:
      type: object
      properties:
        id:
          type: string
          description: The error id.
        time:
          type: string
          format: date-time
          description: The time the error occurred 
        category:
          type: string
          enum:
            - authentication
            - authorization
            - not-found
            - bad-request
            - conflict
            - unavailable
            - credit
            - limit
            - payment
        code:
          type: string
          description: A specific error code string that identifies the type of error.
        message:
          type: string
          description: A message that describes the error condition in detail.
        details:
          type: object
          additionalProperties:
            type: string
    PhoneNumber:
      type: object
      properties:
        id:
          type: string
          description: The phone number id.
        name:
          type: string
          description: A name you choose for this number.
        number:
          type: string
          description: The telephone number in E.164 format.
        nationalNumber:
          type: string
          description: The telephone number in a friendly national format, e.g. (555) 5555-5555
        city:
          type: string
          description: The city of the phone number.
        state:
          type: string
          description: The state of the phone number.
        applicationId:
          type: string
          description: The unique id of an Application you want to associate with this number.
        application:
          type: string
          description: The URI of the application associated with the number for inbound phone calls and text messages.
        fallbackNumber:
          type: string
          description: Number to transfer an incoming call when the callback/fallback events can’t be delivered.
        price:
          type: string
          description: The monthly price for this number.
        createdTime:
          type: string
          format: date-time
          description: Date when the number was created. 
        numberState:
          type: string
          enum:
            - enabled
            - released
  requestBodies:
    CreateApplicationData:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: A name you choose for this application.
              incomingCallUrl:
                type: string
                description: A URL where call events will be sent for an inbound call. This is the endpoint where the Application Platform will send all call events. Either incomingCallUrl or incomingMessageUrl is required.
              incomingCallUrlCallbackTimeout:
                type: integer
                description: Determine how long should the platform wait for incomingCallUrl's response before timing out in milliseconds.
                default: 10000
              incomingCallFallbackUrl:
                type: string
                description: The URL used to send the callback event if the request to incomingCallUrl fails.
              incomingMessageUrl:
                type: string
                description: The unique identifier for the application
              incomingMessageUrlCallbackTimeout:
                type: integer
                description: The unique identifier for the application
                default: 10000
              incomingMessageFallbackUrl:
                type: string
                description: The unique identifier for the application
              callbackHttpMethod:  
                type: string
                description: 'Determine if the callback event should be sent via HTTP GET or HTTP POST. Values are "get" or "post", default: "post".'
                enum:
                  - post
                  - get
                default: post
              autoAnswer:
                type: boolean
                default: true
                description: Determines whether or not an incoming call should be automatically answered.
    CreateBridgeData:
      content:
        application/json:
          schema:
            type: object
            properties:
              callIds:
                type: array
                description: List of call Ids that will be in the bridge.
                items:
                  type: string
              bridgeAudio:
                type: string
                default: 'true'
                description: Enable/Disable two way audio path.
    CreateCallData:
      content:
        application/json:
          schema:
            type: object
            required:
              - from
              - to
            properties:
              from:
                type: string
                description: The phone number or SIP address that made the call. Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).
              to:
                type: string
                description: The phone number or SIP address that received the call. Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).
              callTimeout:
                type: number
                description: Determine how long should the platform wait for call answer before timing out in seconds.
              callbackTimeout:
                type: number
                description: Determine how long should the platform wait for callbackUrl’s response before timing out in milliseconds. 
              callbackUrl:
                type: string
                description: The server URL where the call events related to the call will be sent.
              callbackHttpMethod:  
                type: string
                enum:
                  - GET
                  - POST
                description: Determine if the callback event should be sent via HTTP GET or HTTP POST
              fallbackUrl:
                type: string
                description: he full server URL used to send the callback event if the request to callbackUrl fails.
              bridgeId:
                type: string
                description: The id of the bridge where the call will be added.
              conferenceId:
                type: string
                description: Id of the conference where the call will be added. This property is required if you want to add this call to a conference.
              recordingEnabled:
                type: boolean
                description: Indicates if the call was recorded. 
              recordingFileFormat:
                type: string
                description: The file format of the recorded call.
                enum:
                  - wav
                  - mp3
                default: wav
              recordingMaxDuration:
                type: number
                description: Indicates the maximum duration of call recording in seconds.
                default: 60  
              transcriptionEnabled:
                type: boolean
                description: Whether all the recordings for this call was automatically transcribed.
              tag:
                type: string
                description: Any string, it will be included in the callback events of the call.
              sipHeaders:
                type: object
                additionalProperties:
                  type: string   
                description: Map of Sip headers prefixed by "X-". Up to 5 headers can be sent per call. Max length for header and value is 256 characters.
    UpdateCallData:
      content:
        application/json:
          schema:
            type: object
            properties:
              state:
                type: string
                description: The call state
                enum:
                  - rejected
                  - active
                  - completed
                  - transferring
              callTimeout:
                type: number
                description: Determine how long should the platform wait for call answer before timing out in seconds.
              callbackTimeout:
                type: number
                description: Determine how long should the platform wait for callbackUrl’s response before timing out in milliseconds. 
              callbackUrl:
                type: string
                description: The server URL where the call events related to the call will be sent.
              callbackHttpMethod:  
                type: string
                enum:
                  - GET
                  - POST
                description: Determine if the callback event should be sent via HTTP GET or HTTP POST
              fallbackUrl:
                type: string
                description: he full server URL used to send the callback event if the request to callbackUrl fails.
              recordingEnabled:
                type: boolean
                description: Indicates if the call was recorded. 
              recordingFileFormat:
                type: string
                description: The file format of the recorded call.
                enum:
                  - wav
                  - mp3
                default: wav
              recordingMaxDuration:
                type: number
                description: Indicates the maximum duration of call recording in seconds.
                default: 60  
              transcriptionEnabled:
                type: boolean
                description: Whether all the recordings for this call was automatically transcribed.
              transferTo:
                type: string
              transferCallerId:
                type: string
              whisperAudio:
                $ref: '#/components/requestBodies/PlayAudioData'
    UpdateBridgeData:
      content:
        application/json:
          schema:
            type: object
            properties:
              callIds:
                type: array
                description: List of call Ids that will be in the bridge.
                items:
                  type: string
              bridgeAudio:
                type: string
                default: 'true'
                description: Enable/Disable two way audio path.
    PlayAudioData:
      content:
        application/json:
          schema:
            type: object
            properties:
              fileUrl:
                type: string
                description: The location of an audio file to play (WAV and MP3 supported). 
              sentence:
                type: string
                description: The sentence to speak.
              gender: 
                type: string
                description: The gender of the voice used to synthesize the sentence.
                enum:
                  - female
                  - male
                default: female
              locale:
                type: string
                default: en_US
              voice:
                type: string
    DtmfData:
      content:
        application/json:
          schema:
            type: object
            properties:
              dtmfOut:
                type: string
                description: String containing the DTMF characters to be sent in a call. Allows a maximum of 92 characters.

    CreateGatherData:
      content:
        application/json:
          schema:
            type: object
            properties:
              maxDigits:
                type: number
                format: int32
                description: The maximum number of digits to collect, not including terminating digits 
                maximum: 30
              interDigitTimeout:
                type: number
                description: Stop gathering if a DTMF digit is not detected in this many seconds
                maximum: 30
                default: 5
              terminatingDigits:
                type: string
                description: A string of DTMF digits that end the gather operation immediately if any one of them is detected (default “#”; an empty string means collect all DTMF until maxDigits or the timeout).
              tag:
                type: string
                description: A string you choose that will be included with the response and events for this gather operation.
              prompt:
                type: object
                properties:
                  sentence:
                    type: string
                    description: The text to speak for the prompt
                  gender:
                    type: string
                    enum:
                      - female
                      - male
                    description: The gender to use for the voice reading the prompt sentence
                  locale:
                    type: string
                    description: The language and region to use for the voice reading the prompt sentence
                  loopEnabled:
                    type: boolean
                    description: When value is true, the audio will keep playing in a loop.
                    default: false
                  bargeable:
                    type: boolean
                    description: Make the prompt (audio or sentence) bargeable
                    default: true
                  fileUrl:
                    type: string
                    description: The location of an audio file to play (WAV and MP3 supported).
    UpdateGatherData:
      content:
        application/json:
          schema:
            type: object
            properties:
              state:
                type: string
                description: Update the gather.
                enum:
                  - completed

    CreateConferenceData:
      content:
        application/json:
          schema:
            type: object
            properties:
              from:
                type: string
                description: The phone number that will host the conference.
              callbackTimeout:
                type: number
                description: Determine how long should the platform wait for callbackUrl’s response before timing out in milliseconds. 
              callbackUrl:
                type: string
                description: The server URL where the call events related to the call will be sent.
              callbackHttpMethod:  
                type: string
                enum:
                  - GET
                  - POST
                description: Determine if the callback event should be sent via HTTP GET or HTTP POST
              fallbackUrl:
                type: string
                description: he full server URL used to send the callback event if the request to callbackUrl fails.
              profile:
                type: string
                enum:
                  - interpret_digits
                  - passthru_digits
                default: interpret_digits
                description: The conference profile that determines how DTMF is used
              tag:
                type: string
                description: A string that will be included in the callback events of the conference.
    UpdateConferenceData:
      content:
        application/json:
          schema:
            type: object
            properties:
              state:
                type: string
                description: Conference state.
              hold:
                type: boolean
                description: If true, all member can’t hear or speak in the conference. If false, all members can hear and speak in the conference (unless set at the member level).
              mute:
                type: boolean
                description: If true, all member can’t speak in the conference. If false, all members can speak in the conference (unless set at the member level).
              callbackTimeout:
                type: number
                description: Determine how long should the platform wait for callbackUrl’s response before timing out in milliseconds. 
              callbackUrl:
                type: string
                description: The server URL where the call events related to the call will be sent.
              callbackHttpMethod:  
                type: string
                enum:
                  - GET
                  - POST
                description: Determine if the callback event should be sent via HTTP GET or HTTP POST
              fallbackUrl:
                type: string
                description: he full server URL used to send the callback event if the request to callbackUrl fails.
              tag:
                type: string
                description: A string that will be included in the callback events of the conference.

    CreateConferenceMemberData:
      content:
        application/json:
          schema:
            type: object
            required:
              - callId
            properties:
              callId:
                type: string
                description: The callId must refer to an active call that was created using this conferenceId.
              joinTone:
                type: boolean
                description: If true, will play a tone when the member joins the conference. If false, no tone is played when the member joins the conference.
              leavingTone:
                type: boolean
                description: If true, will play a tone when the member leaves the conference. If false, no tone is played when the member leaves the conference.  
              mute:
                type: boolean
                description: If true, member can’t speak in the conference. If false, this members can speak in the conference (unless set at the conference level).
              hold:
                type: boolean
                description: If true, member can’t hear or speak in the conference. If false, member can hear and speak in the conference (unless set at the conference level).  
    UpdateConferenceMemberData:
      content:
        application/json:
          schema:
            type: object
            properties:
              state:
                type: string
                description: If `completed`, member will be removed from the conference.
              joinTone:
                type: boolean
                description: If true, will play a tone when the member joins the conference. If false, no tone is played when the member joins the conference.
              leavingTone:
                type: boolean
                description: If true, will play a tone when the member leaves the conference. If false, no tone is played when the member leaves the conference.  
              mute:
                type: boolean
                description: If true, member can’t speak in the conference. If false, this members can speak in the conference (unless set at the conference level).
              hold:
                type: boolean
                description: If true, member can’t hear or speak in the conference. If false, member can hear and speak in the conference (unless set at the conference level).  

    CreateDomainData:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The name is a unique URI to be used in DNS lookups
              description:
                type: string
                description: String to describe the domain
    CreateEndpointData:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - credentials
            properties:
              name:
                type: string
                description: The endpoint’s name, which SIP clients use as the address of record
              description:
                type: string
                description: String to describe endpoint
              applicationId:
                type: string
                description: The id of the application associated with this endpoint. Application_id is used to determine the callback URL to be used when a client associated with the endpoint attempts to make a call.
              enabled:
                type: boolean
                default: true
                description: When set to true, SIP clients can register as this device to receive and make calls. When set to false, registration, inbound, and outbound calling will not succeed. 
              credentials:
                type: object
                description: Contains SIP authentication credentials
                properties:
                  password:  
                    type: string
                    description: Password
    UpdateEndpointData:
      content:
        application/json:
          schema:
            type: object
            properties:
              description:
                type: string
                description: String to describe endpoint
              applicationId:
                type: string
                description: The id of the application associated with this endpoint. Application_id is used to determine the callback URL to be used when a client associated with the endpoint attempts to make a call.
              enabled:
                type: boolean
                default: true
                description: When set to true, SIP clients can register as this device to receive and make calls. When set to false, registration, inbound, and outbound calling will not succeed. 
              credentials:
                type: object
                description: Contains SIP authentication credentials
                properties:
                  password:  
                    type: string
                    description: Password
    CreatePhoneNumberData:
      content:
        application/json:
          schema:
            type: object
            required:
              - number
            properties:
              name:
                type: string
                description: A name you choose for this number.
              number:
                type: string
                description: The telephone number in E.164 format.
              applicationId:
                type: string
                description: The unique id of an Application you want to associate with this number.
              fallbackNumber:
                type: string
                description: Number to transfer an incoming call when the callback/fallback events can’t be delivered.
    UpdatePhoneNumberData:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name you choose for this number.
              applicationId:
                type: string
                description: The unique id of an Application you want to associate with this number.
              fallbackNumber:
                type: string
                description: Number to transfer an incoming call when the callback/fallback events can’t be delivered.

  responses:
    Created:
      description: Created
      headers:
        Location: 
          schema:
            type: string
    Empty:
      description: Done
