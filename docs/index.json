[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/account.js",
    "content": "var getNextLink = require(\"./headerParsingLib\").getNextLink;\nvar Promise = require(\"bluebird\");\n\n/**\n * Account\n * @constructor\n */\nvar Account = function(client) {\n  /**\n\t * Gets information about user's account.\n\t * @param  {String} accountId The ID of the account to get\n\t * @param  {Function} callback A callback with the account information\n\t * @return {AccountResponse} A promise for the account information\n\t * @example\n\t * // Promise\n\t * client.Account.get().then(function(info){});\n\t *\n\t * // Callback\n\t * client.Account.get(function(err, info){});\n\t */\n  this.get = function(callback) {\n    return client\n      .makeRequest({\n        path: \"account\",\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of transactions from user's account.\n\t * @param {Object} params Query parameters for listing accounts\n\t * @param {Number} [params.size=25] Used for pagination to indicate the size of each page requested\n\t * for querying a list of transactions. If no value is specified the default value is 25 (maximum value 1000).\n\t * @param {Number} [params.maxItems] Limit the number of transactions that will be returned\n\t * @param {String} [params.toDate] Return only transactions that are newer than the parameter.\n\t * @param {String} [params.fromDate] Return only transactions that are older than the parameter.\n\t * @param {String} [params.type] Return only transactions that are this type.\n\t * @param {Function} callback A callback with the list of transactions\n\t * @return {TransactionListResponse} A promise for the list of transactions\n\t * @example\n\t *\n\t * //Promise\n\t * client.Account.getTransactions()\n\t * \t.then(function (response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t\tif(response.hasNextPage) {\n\t * \t\t\treturn response.getNextPage();\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\treturn {transactions: []};\n\t * \t\t}\n\t * \t})\n\t * \t.then(function(response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t});\n\t * @example\n\t * //Get transactions filtering by date\n\t * //Promise\n\t * var params = {\n\t * \tfromDate: \"2013-02-21T13:38:00\"\n\t * };\n\t * client.Account.getTransactions(params)\n\t * \t.then(function (response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t\tif(response.hasNextPage) {\n\t * \t\t\treturn response.getNextPage();\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\treturn {transactions: []};\n\t * \t\t}\n\t * \t})\n\t * \t.then(function(response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t});\n\t * @example\n\t * //Get transactions filtering by date\n\t * //Promise\n\t * var params = {\n\t * \tfromDate: \"2013-02-21T13:38:00\",\n\t * \ttoDate:   \"2013-02-21T13:40:00\"\n\t * };\n\t * client.Account.getTransactions(params)\n\t * \t.then(function (response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t\tif(response.hasNextPage) {\n\t * \t\t\treturn response.getNextPage();\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\treturn {transactions: []};\n\t * \t\t}\n\t * \t})\n\t * \t.then(function(response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t});\n\t * @example\n\t * //Get transactions limiting result\n\t * //Promise\n\t * var params = {\n\t * \tmaxItems: 1\n\t * };\n\t * client.Account.getTransactions(params)\n\t * \t.then(function (response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t\tif(response.hasNextPage) {\n\t * \t\t\treturn response.getNextPage();\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\treturn {transactions: []};\n\t * \t\t}\n\t * \t})\n\t * \t.then(function(response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t});\n\t *\n\t * @example\n\t * //Get transactions of `payment` type\n\t * //Promise\n\t * var params = {\n\t * \ttype: \"Payment\"\n\t * };\n\t * client.Account.getTransactions(params)\n\t * \t.then(function (response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t\tif(response.hasNextPage) {\n\t * \t\t\treturn response.getNextPage();\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\treturn {transactions: []};\n\t * \t\t}\n\t * \t})\n\t * \t.then(function(response) {\n\t * \t\tconsole.log(response.transactions);\n\t * \t});\n\t *\n\t */\n  this.getTransactions = function(params, callback) {\n    var self = this;\n    return client\n      .makeRequest({\n        path: \"account/transactions\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        var transactionListResponse = {\n          transactions: response.body,\n          hasNextPage: false,\n          getNextPage: function(nextCallback) {\n            return Promise.reject(\"Next page does not exist.\").asCallback(\n              nextCallback\n            );\n          }\n        };\n        var nextLink = getNextLink(response.headers);\n        if (nextLink) {\n          transactionListResponse.hasNextPage = true;\n          transactionListResponse.getNextPage = function(nextCallback) {\n            return self.getTransactions(nextLink, nextCallback);\n          };\n        }\n        return transactionListResponse;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Account;\n\n/**\n * @class AccountResponse\n * @type {Object}\n * @property {String} balance User's account balance in dollars, as a string;\n * the currency symbol is not included.\n * @property {String} type The type of account configured for your user.\n */\n\n/**\n * @class TransactionListResponse\n * @type {Object}\n * @property {Array.<TransactionResponse>} transactions Array of transactions\n * @property {function} getNextPage Calls the next page function\n * @property {boolean} hasNextPage True/False flag for next\n */\n\n/**\n * @class TransactionResponse\n * @type {Object}\n * @property {String} id The unique identifier for the transaction.\n * @property {String} time The time the transaction was processed.\n * @property {String} amount The transaction amount in dollars, as a string;\n * the currency symbol is not included.\n * @property {String} type The type of transaction.\n * @property {String} units The number of product units the transaction charged or credited.\n * @property {String} productType The product the transaction was related to\n * @property {String} number The phone number the transaction was related to\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/account.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "getNextLink",
    "memberof": "lib/account.js",
    "static": true,
    "longname": "lib/account.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/account.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/account.js",
    "static": true,
    "longname": "lib/account.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/account.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "Account",
    "memberof": "lib/account.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/account.js~Account",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/account.js",
    "importStyle": null,
    "description": "Account",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "lib/application.js",
    "content": "var getNextLink = require(\"./headerParsingLib\").getNextLink;\nvar Promise = require(\"bluebird\");\n\n/**\n * Application\n * @constructor\n * @param {Object} client Catapult client\n */\n\nvar Application = function(client) {\n  /**\n\t * List the user's applications\n\t * @param {Object} params Parameters for filtering applications.\n\t * @param {Number} [params.size] The maximum number of applications returned by\n\t * the query per page (Max size: 1000).\n\t * @param {Function} [callback] A callback for the list of applications.\n\t * @return {ApplicationListResponse} A promise for the list of applications, has a getNextPage\n\t * function if the number of applications returned by the query exceeds the page size.\n\t * @example\n\t * //Promise\n\t * client.Application.list()\n\t * .then(function (response) {\n\t * \tconsole.log(response.applications);\n\t * \tif(response.hasNextPage) {\n\t * \t\treturn response.getNextPage();\n\t * \t}\n\t * \telse {\n\t * \t\treturn {applications: []};\n\t * \t}\n\t * })\n\t * .then(function(response) {\n\t * \tconsole.log(response.applications);\n\t * });\n\t */\n  this.list = function(params, callback) {\n    var self = this;\n    return client\n      .makeRequest({\n        path: \"applications\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        var applicationListResponse = {\n          applications: response.body,\n          hasNextPage: false,\n          getNextPage: function(nextCallback) {\n            return Promise.reject(\"Next page does not exist.\").asCallback(\n              nextCallback\n            );\n          }\n        };\n        var nextLink = getNextLink(response.headers);\n        if (nextLink) {\n          applicationListResponse.hasNextPage = true;\n          applicationListResponse.getNextPage = function(nextCallback) {\n            return self.list(nextLink, nextCallback);\n          };\n        }\n        return applicationListResponse;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Create a new application\n\t * @param {Object} params Parameters for creating a new call\n\t * @param {String} params.name A name you choose for this application.\n \t * @param {String} params.incomingCallUrl A URL where call events will be sent for an inbound call.\n \t * This is the endpoint where the Application Platform will send all call events.\n\t * Either incomingCallUrl or incomingMessageUrl is required.\n \t * @param {String} [params.incomingCallUrlCallbackTimeout] Determine how long should the platform wait\n \t * for incomingCallUrl's response before timing out in milliseconds.\n \t * @param {String} [params.incomingCallFallbackUrl] The URL used to send the callback\n \t * event if the request to incomingCallUrl fails.\n \t * @param {String} params.incomingMessageUrl A URL where message events will be sent for an inbound message.\n \t * This is the endpoint where the Application Platform will send all message events.\n \t * Either incomingMessageUrl or incomingCallUrl is required.\n\t * @param {Number} [params.incomingMessageUrlCallbackTimeout] Determine how long should the platform wait for\n \t * incomingMessageUrl's response before timing out in milliseconds.\n\t * @param {String} [params.incomingMessageFallbackUrl] The URL used to send the callback event if\n\t * the request to incomingMessageUrl fails.\n\t * @param {String} [params.callbackHttpMethod] Determine if the callback event should be sent via HTTP GET\n \t * or HTTP POST. Values are \"get\" or \"post\", default: \"post\".\n \t * @param {Boolean} [params.autoAnswer=true] Determines whether or not an incoming call should be\n \t * automatically answered. Default value is 'true'.\n \t * @param {Function} [callback] A callback for the list of applications\n\t * @return {ApplicationResponse} A promise for the newly created application.\n\t * @example\n\t * //Promise\n\t * client.Application.create({\n\t * \tname: 'SampleApp',\n\t * \tincomingCallUrl: 'http://your-server.com/CallCallback',\n\t * \tincomingMessageUrl: 'http://your-server.com/MsgCallback'\n\t * })\n\t * .then(function (response) {\n\t * \tconsole.log(response);\n\t * });\n\t *\n\t * //Callback\n\t * client.Application.create({\n\t * \tname: 'SampleApp2',\n\t * \tincomingCallUrl: 'http://your-server.com/CallCallback',\n\t * \tincomingMessageUrl: 'http://your-server.com/MsgCallback'\n\t * }, function (err, response) {\n\t * \tif (err) {\n\t * \t\tconsole.log(err);\n\t * \t}\n\t * \telse {\n\t * \t\tconsole.log(response)\n\t * \t}\n\t * });\n\t */\n  this.create = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"applications\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var application = params;\n        var location = response.headers.location;\n        var applicationId = location.substring(location.lastIndexOf(\"/\") + 1);\n        application.id = applicationId;\n        return application;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get an application.\n\t * @param  {String} applicationId The ID of the application to get.\n\t * @param  {Function} [callback] A callback for the application.\n\t * @return {ApplicationResponse} A promise for the application.\n\t * @example\n\t * // Promise\n\t * client.Application.get('a-j4f2jz53mq')\n\t * .then(function (response) {\n\t * \tconsole.log(response);\n\t * });\n\t *\n\t * // Callback\n\t * client.Application.get('a-zuwwfzzrbea',\n\t * \tfunction (err, response) {\n\t * \t\tif (err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(response);\n\t * \t\t}\n\t * });\n\t */\n  this.get = function(applicationId, callback) {\n    return client\n      .makeRequest({\n        path: \"applications/\" + applicationId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Make changes to an application.\n\t * @param {String} applicationId The ID of the application to modify.\n\t * @param {Object} params Parameters for creating a new call\n\t * @param {String} [params.name] A name you choose for this application.\n \t * @param {String} [params.incomingCallUrl] A URL where call events will be sent for an inbound call.\n \t * This is the endpoint where the Application Platform will send all call events.\n\t * Either incomingCallUrl or incomingMessageUrl is required.\n \t * @param {String} [params.incomingCallUrlCallbackTimeout] Determine how long should the platform wait\n \t * for incomingCallUrl's response before timing out in milliseconds.\n \t * @param {String} [params.incomingCallFallbackUrl] The URL used to send the callback\n \t * event if the request to incomingCallUrl fails.\n \t * @param {String} [params.incomingMessageUrl] A URL where message events will be sent for an inbound message.\n \t * This is the endpoint where the Application Platform will send all message events.\n \t * Either incomingMessageUrl or incomingCallUrl is required.\n\t * @param {Number} [params.incomingMessageUrlCallbackTimeout] Determine how long should the platform wait for\n \t * incomingMessageUrl's response before timing out in milliseconds.\n\t * @param {String} [params.incomingMessageFallbackUrl] The URL used to send the callback event if\n\t * the request to incomingMessageUrl fails.\n\t * @param {String} [params.callbackHttpMethod] Determine if the callback event should be sent via HTTP GET\n \t * or HTTP POST. Values are \"get\" or \"post\", default: \"post\".\n \t * @param {Boolean} [params.autoAnswer] Determines whether or not an incoming call should be\n \t * automatically answered. Default value is 'true'.\n \t * @param {Function} [callback] A callback for the list of applications\n \t * @example\n\t * // Promise\n\t * client.Application.update('a-j4f2j6vjmqz53mq', {\n\t * \tname: 'Rename App1',\n\t * \tautoAnswer: false\n\t * })\n\t * .then(function (response) {\n\t * \tconsole.log(response);\n\t * });\n\t *\n\t * // Callback\n\t * client.Application.update('a-zudcfzzrbea',\n\t * \t{\n\t * \t\tname: 'Rename App2',\n\t * \t\tautoAnswer: false\n\t * \t},\n\t * \tfunction (err, response) {\n\t * \t\tif (err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(response);\n\t * \t\t}\n\t * });\n\t */\n  this.update = function(applicationId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"applications/\" + applicationId,\n        method: \"POST\",\n        body: params\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Delete an application.\n\t * @param  {String} applicationId The ID of the application to delete.\n\t * @param  {Function} [callback] A callback for the application.\n\t * @example\n\t * // Promise\n\t * client.Application.delete('a-j4f2j6mqz53mq')\n\t * .then(function (response) {\n\t * \tconsole.log(response);\n\t * });\n\t *\n\t * // Callback\n\t * client.Application.delete('a-zuwwzrbea',\n\t * \tfunction (err, response) {\n\t * \t\tif (err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(response);\n\t * \t\t}\n\t * });\n\t */\n  this.delete = function(applicationId, callback) {\n    return client\n      .makeRequest({\n        path: \"applications/\" + applicationId,\n        method: \"DELETE\"\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Application;\n\n/**\n * @class ApplicationListResponse\n * @type {Object}\n * @property {Array.<ApplicationResponse>} applications Array of applications\n * @property {function} getNextPage Calls the next page function\n * @property {boolean} hasNextPage True/False flag for next\n */\n\n/**\n * ApplicationResponse\n * @class ApplicationResponse\n * @type {Object}\n * @property {String} id The unique identifier for the application.\n * @property {String} name A name you choose for this application.\n * @property {String} incomingCallUrl A URL where call events will be sent for an inbound call.\n * This is the endpoint where the Application Platform will send all call events.\n * Either incomingCallUrl or incomingMessageUrl is required.\n * @property {String} incomingCallUrlCallbackTimeout Determine how long should the platform wait\n * for incomingCallUrl's response before timing out in milliseconds.\n * @property {String} incomingCallFallbackUrl The URL used to send the callback\n * event if the request to incomingCallUrl fails.\n * @property {String} callbackHttpMethod Determine if the callback event should be sent via HTTP GET\n * or HTTP POST. Values are \"get\" or \"post\", default: \"post\".\n * @property {Boolean} autoAnswer Determines whether or not an incoming call should be\n * automatically answered. Default value is 'true'.\n * @property {String} incomingMessageUrl A URL where message events will be sent for an inbound message.\n * This is the endpoint where the Application Platform will send all message events.\n * Either incomingMessageUrl or incomingCallUrl is required.\n * @property {Number} incomingMessageUrlCallbackTimeout Determine how long should the platform wait for\n * incomingMessageUrl's response before timing out in milliseconds.\n * @property {String} incomingMessageFallbackUrl The URL used to send the callback event if\n * the request to incomingMessageUrl fails.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/application.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "getNextLink",
    "memberof": "lib/application.js",
    "static": true,
    "longname": "lib/application.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/application.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/application.js",
    "static": true,
    "longname": "lib/application.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/application.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "Application",
    "memberof": "lib/application.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/application.js~Application",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/application.js",
    "importStyle": null,
    "description": "Application",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "Catapult client"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "lib/availableNumber.js",
    "content": "/**\n * Available numbers\n * @constructor\n */\nvar AvailableNumber = function(client) {\n  /**\n\t * Search for available local or tollFree numbers\n\t * @param {String} type Type of number to search (local or tollFree)\n\t * @param {Object} params Search parameters\n\t * @param {String} [params.city] A city name (only for local numbers)\n\t * @param {String} [params.state] A state name (only for local numbers)\n\t * @param {String} [params.zip] A 5-digit US ZIP code (only for local numbers)\n\t * @param {String} [params.areaCode] A 3-digit telephone area code (only for local numbers)\n\t * @param {String} [params.localNumber] First digits of a telephone number inside an area code\n\t * for filtering the results (only for local numbers)\n\t * @param {String} [params.inLocalCallingArea] Boolean value to indicate that the search for\n\t * available numbers must consider overlayed areas. Only applied for localNumber searching.\n\t * (only for local numbers)\n\t * @param {String} [params.quantity] The maximum number of numbers to return (default 10, maximum 5000)\n\t * @param {String} [params.pattern] A number pattern that may include letters, digits, and the following\n\t * wildcard characters: ? - matches any single digit, * - matches zero or more digits\n\t * @param {Function} callback A callback with the list of available numbers\n\t * @return {Array.<AvailableNumberResponse>} A promise for the list of available numbers\n\t * @example\n\t * // Search 3 available local phone numbers with area code 910\n\t *\n\t * // Promise\n\t * client.AvailableNumber.search(\"local\", { areaCode : \"910\", quantity : 3 }).then(function (numbers) {});\n\t *\n\t * // Callback\n\t * client.AvailableNumber.search(\"local\", { areaCode : \"910\", quantity : 3 }, function (err, numbers) {});\n\t * @example\n\t * //Promise\n\t * client.AvailableNumber.search(\"tollFree\", {\n\t * \tquantity : 3 })\n\t * .then(function (numbers) {\n\t * \tconsole.log(numbers)\n\t * });\n\t *\n\t * // Callback\n\t * client.AvailableNumber.search(\"tollFree\", {\n\t * \tquantity : 3 },\n\t * \tfunction (err, numbers) {\n\t * \t\tif(err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(numbers);\n\t * \t\t}\n\t * \t});\n\t */\n  this.search = function(type, params, callback) {\n    return client\n      .makeRequest({\n        pathWithoutUser: true,\n        path: \"availableNumbers/\" + type,\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Search for available local or tollFree numbers and order them\n\t * @param {String} type Type of number to search (local or tollFree)\n\t * @param {Object} params Search parameters\n\t * @param {String} [params.city] A city name (only for local numbers)\n\t * @param {String} [params.state] A state name (only for local numbers)\n\t * @param {String} [params.zip] A 5-digit US ZIP code (only for local numbers)\n\t * @param {String} [params.areaCode] A 3-digit telephone area code (only for local numbers)\n\t * @param {String} [params.localNumber] First digits of a telephone number inside an area code for\n\t * filtering the results (only for local numbers)\n\t * @param {String} [params.inLocalCallingArea] Boolean value to indicate that the search for\n\t * available numbers must consider overlayed areas. Only applied for localNumber searching.\n\t * (only for local numbers)\n\t * @param {String} [params.quantity] The maximum number of numbers to return\n\t * (default 10, maximum 5000)\n\t * @param {Function} callback A callback with the list of ordered numbers\n\t * @return {Array.<OrderedNumberResponse>} A promise for the list of ordered numbers\n\t * @example\n\t * // Search 2 available local phone numbers with area code 910 and order them\n\t *\n\t * // Promise\n\t * client.AvailableNumber.searchAndOrder(\"local\", { areaCode : \"910\", quantity : 2 }).then(function (numbers) {});\n\t *\n\t * // Callback\n\t * client.AvailableNumber.serchAndOrder(\"local\", { areaCode : \"910\", quantity : 2 }, function (err, numbers) {});\n\t * @example\n\t * //Search and order tollfree numbers\n\t * //Promise\n\t * client.AvailableNumber.searchAndOrder(\"tollFree\", {\n\t * \tquantity : 1 })\n\t * .then(function (numbers) {\n\t * \tconsole.log(numbers)\n\t * });\n\t *\n\t * // Callback\n\t * client.AvailableNumber.searchAndOrder(\"tollFree\", {\n\t * \tquantity : 1 },\n\t * \tfunction (err, numbers) {\n\t * \t\tif(err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(numbers);\n\t * \t\t}\n\t * \t});\n\t */\n  this.searchAndOrder = function(type, params, callback) {\n    return client\n      .makeRequest({\n        pathWithoutUser: true,\n        path: \"availableNumbers/\" + type,\n        method: \"POST\",\n        qs: params\n      })\n      .then(function(response) {\n        return response.body.map(function(item) {\n          var location = item.location;\n          item.id = location.substring(location.lastIndexOf(\"/\") + 1);\n          return item;\n        });\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = AvailableNumber;\n\n/**\n * @class AvailableNumberResponse\n * @type {Object}\n * @property {String} number Phone number.\n * @property {String} nationalNumber Phone number in national format.\n * @property {String} price Price of this phone number.\n * @property {String} city A city name of number (only for local numbers).\n * @property {String} rateCenter A rate center (only for local numbers).\n * @property {String} state A state of number (only for local numbers).\n */\n\n/**\n * @class OrderedNumberResponse\n * @type {Object}\n * @property {String} id Id of ordered number.\n * @property {String} number Phone number.\n * @property {String} nationalNumber Phone number in national format.\n * @property {String} price Price of this phone number.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/availableNumber.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "AvailableNumber",
    "memberof": "lib/availableNumber.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/availableNumber.js~AvailableNumber",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/availableNumber.js",
    "importStyle": null,
    "description": "Available numbers",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "lib/bridge.js",
    "content": "var getNextLink = require(\"./headerParsingLib\").getNextLink;\nvar Promise = require(\"bluebird\");\n\n/**\n * Bridge\n * @constructor\n */\nvar Bridge = function(client) {\n  /**\n\t * Create a new bridge\n\t * @param {Object} params Parameters for creating a bridge\n\t * @param {Boolean} [params.bridgeAudio=true] Enable/Disable two way audio path.\n\t * @param {Array<String>} [params.callIds] The list of call ids in the bridge. If the list of call ids\n\t * is not provided the bridge is logically created and it can be used to place calls later.\n\t * @param {Function} [callback] Callback with the newly created bridge\n\t * @return {BridgeResponse} A promise for the newly created bridge\n\t * @example\n\t * //Promise\n\t * client.Bridge.create({\n\t * \tbridgeAudio: true,\n\t * \tcallIds: ['c-qbs5kwrsyx6wsdi', 'c-zan4g74pprsq']\n\t * })\n\t * .then(function (response) {\n\t * \tconsole.log(response);\n\t * });\n\t *\n\t * //Callback\n\t * client.Bridge.create({\n\t * \tbridgeAudio: true,\n\t * \tcallIds: ['c-qbsx6wsdi', 'c-zan4g7prsq']\n\t * }, function (err, response) {\n\t * \t\tif(err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(response);\n\t * \t\t}\n\t * \t});\n\t */\n  this.create = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"bridges\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var bridge = params;\n        var location = response.headers.location;\n        bridge.id = location.substring(location.lastIndexOf(\"/\") + 1);\n        return bridge;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets information about a bridge.\n\t * @param  {String} bridgeId The ID of the bridge to get\n\t * @param  {Function} callback A callback with the call information\n\t * @return {BridgeResponse} A promise for the call information\n\t * @example\n\t * //Promise\n\t * client.Bridge.get('brg-65dhjwrmbasiei')\n\t * .then(function (response) {\n\t * \tconsole.log(response);\n\t * });\n\t *\n\t * //Callback\n\t * client.Bridge.get('brg-65dhmbasiei',\n\t * \tfunction (err, response) {\n\t * \t\tif(err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(response);\n\t * \t\t}\n\t * \t});\n\t */\n  this.get = function(bridgeId, callback) {\n    return client\n      .makeRequest({\n        path: \"bridges/\" + bridgeId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of bridges.\n\t * @param {Object} params Query parameters for listing bridges\n\t * @param {Number} [params.size=25] Used for pagination to indicate the size of each page requested\n\t * for querying a list of bridges. If no value is specified the default value is 25 (maximum value 1000).\n\t * @param {Function} callback A callback with the list of bridges\n\t * @return {BridgeListResponse} A promise for the list of bridges\n\t * @example\n\t * client.Bridge.list()\n\t * .then(function (response) {\n\t * \tconsole.log(response.bridges);\n\t * \tif(response.hasNextPage) {\n\t * \t\treturn response.getNextPage();\n\t * \t}\n\t * \telse {\n\t * \t\treturn {bridges: []};\n\t * \t}\n\t * })\n\t * .then(function(response) {\n\t * \tconsole.log(response.bridges);\n\t * });\n\t */\n  this.list = function(params, callback) {\n    var self = this;\n    return client\n      .makeRequest({\n        path: \"bridges\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        var bridgeListResponse = {\n          bridges: response.body,\n          hasNextPage: false,\n          getNextPage: function(nextCallback) {\n            return Promise.reject(\"Next page does not exist.\").asCallback(\n              nextCallback\n            );\n          }\n        };\n        var nextLink = getNextLink(response.headers);\n        if (nextLink) {\n          bridgeListResponse.hasNextPage = true;\n          bridgeListResponse.getNextPage = function(nextCallback) {\n            return self.list(nextLink, nextCallback);\n          };\n        }\n        return bridgeListResponse;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Update the bridge\n\t * @param  {String} bridgeId The ID of the bridge\n\t * @param {Object} params Changed parameters of the bridge\n\t * @param {Boolean} params.bridgeAudio Enable/Disable two way audio path (default = true).\n\t * @param {Array<String>} params.callIds The list of call ids in the bridge.\n\t * @param {Function} [callback] Callback with the newly created bridge\n\t * @return {BridgeResponse} A promise for the operation\n\t * @example\n\t * //Promise\n\t * client.Bridge.update('brg-65dasiei', {\n\t * \tbridgeAudio: false\n\t * })\n\t * .then(function (response) {\n\t * \tconsole.log(response);\n\t * });\n\t *\n\t * //Callback\n\t * client.Bridge.update('brg-65dhjbanasiei', {\n\t * \tbridgeAudio: false\n\t * }, function (err, response) {\n\t * \t\tif(err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(response);\n\t * \t\t}\n\t * \t});\n\t *\n\t * @example\n\t * // end bridge\n\t * var bridgeOptions = {\n\t * \tcallIds: []\n\t * };\n\t *\n\t * client.Bridge.update(\"{bridgeId}\", bridgeOptions)\n\t * .then(function () {\n\t * \t// continue\n\t * });\n\t *\n\t * @example\n\t * // Add two calls to bridge then remove one\n\t * var bridgeOptions = {\n\t * \tbridgeAudio : true,\n\t * \tcallIds: [\"{callId1}\",\"{callId2}\"]\n\t * };\n\t *\n\t * client.Bridge.update(\"{bridgeId}\", bridgeOptions)\n\t * .then(function () {\n\t * \tvar callIdsToRemainInBridge = {\n\t * \t\tcallIds: [\"{callId1\"]\n\t * \t};\n\t * \treturn client.Bridge.update(\"{bridgeId}\", callIdsToRemainInBridge)\n\t * })\n\t * .then(function () {\n\t * \t//continue\n\t * });\n\t */\n  this.update = function(bridgeId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"bridges/\" + bridgeId,\n        method: \"POST\",\n        body: params\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n\n  function audioApi(bridgeId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"bridges/\" + bridgeId + \"/audio\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  }\n\n  /**\n\t * Speak sentence to the bridge using default values\n\t * @param {String} bridgeId The ID of the bridge\n\t * @param {String} sentence A sentence to speak to the bridge.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Speak sentence in a bridge\n\t *\n\t * //Promise\n\t * client.Bridge.speakSentence(\"bridgeID\", \"Hello From Bandwidth\").then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Bridge.speakSentence(\"bridgeID\", \"Hello From Bandwidth\", function (err, res) {});\n\t */\n  this.speakSentence = function(bridgeId, sentence, callback) {\n    return audioApi(bridgeId, { sentence: sentence }).asCallback(callback);\n  };\n\n  /**\n\t * Play audio url to the bridge\n\t * @param {String} bridgeId The ID of the bridge\n\t * @param {String} fileUrl The http location of an audio file to play (WAV and MP3 supported).\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Play Audio file on bridge\n\t *\n\t * //Promise\n\t * client.Bridge.playAudioFile(\"bridgeID\", \"http://myurl.com/file.mp3\").then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Bridge.playAudioFile(\"bridgeID\", \"http://myurl.com/file.wav\", function (err, res) {});\n\t */\n  this.playAudioFile = function(bridgeId, fileUrl, callback) {\n    return audioApi(bridgeId, { fileUrl: fileUrl }).asCallback(callback);\n  };\n\n  /**\n\t * Play audio file or speak sentence in bridge\n\t * @param {String} bridgeId The ID of the bridge\n\t * @param {Object} params Parameters to play audio in bridge.\n\t * @param {String} [params.fileUrl] The http location of an audio file to play (WAV and MP3 supported).\n\t * @param {String} [params.sentence] The sentence to speak.\n\t * @param {String} [params.gender=female] The gender of the voice used to synthesize the sentence.\n\t * It will be considered only if sentence is not null. The female gender will be used by default.\n\t * @param {String=} [params.locale=en_US] The locale used to get the accent of the voice used to\n\t * synthesize the sentence. Check out\n\t * {@link http://ap.bandwidth.com/docs/rest-api/bridges/#resourcePOSTv1usersuserIdbridgesbridgeIdaudio|docs}\n\t * for list of supported locales.\n\t * It will be considered only if sentence is not null/empty. The en_US will be used by default.\n\t * @param {String} [params.voice=Susan] The voice to speak the sentence. Check out\n\t * {@link http://ap.bandwidth.com/docs/rest-api/bridges/#resourcePOSTv1usersuserIdbridgesbridgeIdaudio|docs}\n\t * for list of supported voices\n\t * It will be considered only if sentence is not null/empty. Susan's voice will be used by default.\n\t * @param {Boolean} [params.loopEnabled=false] When value is true, the audio will keep playing in a loop.\n\t * Default: false.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Play Audio File on loop\n\t * var options = {\n\t * \tfileUrl     : \"http://myurl.com/file.mp3\",\n\t * \tloopEnabled : true\n\t * }\n\t * //Promise\n\t * client.Bridge.playAudioAdvanced(\"bridgeId\", options).then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Bridge.playAudioAdvanced(\"bridgeId\", options, function (err,res) {});\n\t * @example\n\t * //Speak sentence with options\n\t * var options = {\n\t * \tsentence : \"hola de Bandwidth\",\n\t * \tgender   : \"male\",\n\t * \tlocale   : \"es\",\n\t * \tvoice    : \"Jorge\"\n\t * }\n\t * //Promise\n\t * client.Bridge.playAudioAdvanced(\"bridgeId\", options).then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Bridge.playAudioAdvanced(\"bridgeId\", options, function (err,res) {});\n\t */\n  this.playAudioAdvanced = function(bridgeId, params, callback) {\n    return audioApi(bridgeId, params).asCallback(callback);\n  };\n\n  /**\n\t * Gets information about a bridge.\n\t * @param  {String} bridgeId The ID of the bridge to get\n\t * @param  {Function} callback A callback with the call information\n\t * @return {Promise} A promise for the call information\n\t * @example\n\t * //Promise\n\t * client.Bridge.getCalls('brg-65dhjbiei')\n\t * .then(function (response) {\n\t * \tconsole.log(response);\n\t * });\n\t *\n\t * //Callback\n\t * client.Bridge.getCalls('brg-65dhjrmbasiei',\n\t * \tfunction (err, response) {\n\t * \t\tif(err) {\n\t * \t\t\tconsole.log(err);\n\t * \t\t}\n\t * \t\telse {\n\t * \t\t\tconsole.log(response);\n\t * \t\t}\n\t * \t});\n\t */\n  this.getCalls = function(bridgeId, callback) {\n    return client\n      .makeRequest({\n        path: \"bridges/\" + bridgeId + \"/calls\",\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Bridge;\n\n/**\n * @class BridgeListResponse\n * @type {Object}\n * @property {Array.<BridgeResponse>} bridges Array of bridges\n * @property {function} getNextPage Calls the next page function\n * @property {boolean} hasNextPage True/False flag for next\n */\n\n/**\n * @class BridgeResponse\n * @type {Object}\n * @property {String} id The unique ID of the bridge.\n * @property {String} state Bridge state. Possible state values are described here.\n * @property {Array<String>} callIds List of call Ids that will be in the bridge.\n * @property {Boolean} bridgeAudio Enable/Disable two way audio path.\n * @property {String} completedTime The time when the bridge was completed.\n * @property {String} createdTime The time that bridge was created.\n * @property {String} activatedTime The time that the bridge got into active state.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/bridge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "getNextLink",
    "memberof": "lib/bridge.js",
    "static": true,
    "longname": "lib/bridge.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/bridge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/bridge.js",
    "static": true,
    "longname": "lib/bridge.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/bridge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "Bridge",
    "memberof": "lib/bridge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/bridge.js~Bridge",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/bridge.js",
    "importStyle": null,
    "description": "Bridge",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "lib/call.js",
    "content": "/**\n * Voice call\n * @constructor\n */\nvar Call = function(client) {\n  /**\n\t * Create a new voice call\n\t * @param {Object} params Parameters for creating a new call\n\t * @param {String} params.from A Bandwidth phone number on your account the\n\t * call should come from (must be in E.164 format, like +19195551212).\n\t * @param {String} params.to The number to call (must be either an E.164 formated number,\n\t * like +19195551212, or a valid SIP URI, like sip:someone@somewhere.com).\n\t * @param {Number} [params.callTimeout] Determine how long should the platform wait for]\n\t * call answer before timing out in seconds.\n\t * @param {String} [params.callbackUrl] The full server URL where the call events related to the\n\t * Call will be sent to.\n\t * @param {Number} [params.callbackTimeout] Determine how long should the platform wait for\n\t * callbackUrl's response before timing out in milliseconds.\n\t * @param {String} [params.callbackHttpMethod] Determine if the callback event should be sent via HTTP GET\n\t * or HTTP POST. Values are \"GET\" or \"POST\" (if not set the default is POST).\n\t * @param {String} [params.fallbackUrl] The full server URL used to send the callback\n\t * event if the request to callbackUrl fails.\n\t * @param {String} [params.bridgeId] The id of the bridge where the call will be added.\n\t * @param {String} [params.conferenceId] Id of the conference where the call will be added.\n\t * This property is required if you want to add this call to a conference.\n\t * @param {String} [params.recordingEnabled] Indicates if the call should be recorded after being created.\n\t * Set to \"true\" to enable. Default is \"false\".\n\t * @param {String} [params.recordingMaxDuration] Indicates the maximum duration of call recording in seconds.\n\t * Default value is 1 hour.\n\t * @param {String} [params.transcriptionEnabled] Whether all the recordings for this call is going to be\n\t * automatically transcribed.\n\t * @param {String} [params.tag] A string that will be included in the callback events of the call.\n\t * @param {Object} [params.sipHeaders] Map of Sip headers prefixed by \"X-\". Up to 5 headers can be sent per call.\n\t * @param {Function} [callback] Callback with the newly created call\n\t * @return {CallResponse} A promise for the newly created call\n\t */\n  this.create = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"calls\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var call = params;\n        var location = response.headers.location;\n        var callId = location.substring(location.lastIndexOf(\"/\") + 1);\n        call.id = callId;\n        return call;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets information about an active or completed call.\n\t * @param  {String} callId The ID of the call to get\n\t * @param  {Function} callback A callback with the call information\n\t * @return {Promise} A promise for the call information\n\t */\n  this.get = function(callId, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of active and historic calls you made or received.\n\t * @param {Object} params Query parameters for listing calls\n\t * @param {String} [params.bridgeId] The id of the bridge for querying a list of calls history\n\t * (pagination does not apply).\n\t * @param {String} [params.conferenceId] The id of the conference for querying a list of calls history\n\t * @param {String} [params.from] The number to filter calls that came from (must be either an E.164\n\t * formated number,like +19195551212, or a valid SIP URI, like sip:someone@somewhere.com).\n\t * @param {String} [params.to] The number to filter calls that was called to (must be either an E.164\n\t * formated number,like +19195551212, or a valid SIP URI, like sip:someone@somewhere.com).\n\t * @param {Number} [params.page=0] Used for pagination to indicate the page requested for querying a list of calls.\n\t * If no value is specified the default is 0.\n\t * @param {Number} [params.size=25] Used for pagination to indicate the size of each page requested\n\t * for querying a list of calls. If no value is specified the default value is 25 (maximum value 1000).\n\t * @param {Function} callback A callback with the list of calls\n\t * @return {Promise} A promise for the list of calls\n\t */\n  this.list = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"calls\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Update properties of an active phone call.\n\t * @param {String} callId The ID of the incoming call\n\t * @param {Object} params The propreties to update\n\t * @param {string} [params.state] The call state.\n\t * Possible values:\n\t * `rejected` to reject not answer,\n\t * `active` to answer the call,\n\t * `completed` to hangup the call,\n\t * `transferring` to start and connect call to a new outbound call.\n\t * @param {string} [params.recordingEnabled] Indicates if the call should be recorded.\n\t * Values `true` or `false`. You can turn recording on/off and have multiple recordings on a single call.\n\t * @param {string} [params.recordingFileFormat] The file format of the recorded call.\n\t * Supported values are `wav` (default) and `mp3`.\n\t * @param {string} [params.transferTo] Phone number or SIP address that the call is going to be transferred to.\n\t * @param {string} [params.transferCallerId] This is the caller id that will be used when the call is transferred.\n\t * This parameter is only considered in `transfer` state.\n\t * <br> - transferring an incoming call:\n\t * Allowed values are 1) \"private\" 2) the incoming call \"from\" number or 3) any Bandwidth number owned by user.\n\t * <br> - transferring an outgoing call call:\n\t * allowed values are 1) \"private\" or 2) any Bandwidth phone number owned by user.\n\t * @param {string} [params.whisperAudio] Audio to be played to the caller that the call will be transferred to.\n\t * @param {string} [params.callbackUrl] The server URL where the call events for the new call will be sent.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Start recording a mp3 and update the callback url\n\t * var payLoad = {\n\t * \trecordingEnabled: \"true\",\n\t * \trecordingFileFormat = \"mp3\",\n\t * \tcallbackUrl: \"http://yourUrl.com/callbacks/callrecording\"\n\t * };\n\t *\n\t * client.call.update(\"callId\", payload)\n\t * .then(function () {\n\t * \t// keep on keeping on here;\n\t * });\n\t */\n  this.update = function(callId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId,\n        method: \"POST\",\n        body: params\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Answer an incoming call\n\t * @param {String} callId The ID of the incoming call\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Promise\n\t * client.Call.answer(\"callID\").then(function () {});\n\t *\n\t * //Callback\n\t * client.Call.answer(\"callID\", function (err) {});\n\t */\n  this.answer = function(callId, callback) {\n    return this.update(callId, { state: \"active\" }).asCallback(callback);\n  };\n\n  /**\n\t * Reject an incoming call\n\t * @param {String} callId The ID of the incoming call\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Promise\n\t * client.Call.reject(\"callID\").then(function () {});\n\t *\n\t * //Callback\n\t * client.Call.reject(\"callID\", function (err) {});\n\t */\n  this.reject = function(callId, callback) {\n    return this.update(callId, { state: \"rejected\" }).asCallback(callback);\n  };\n\n  /**\n\t * Complete active call\n\t * @param {String} callId The ID of the call\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Promise\n\t * client.Call.hangup(\"callID\").then(function () {});\n\t *\n\t * //Callback\n\t * client.Call.hangup(\"callID\", function (err) {});\n\t */\n  this.hangup = function(callId, callback) {\n    return this.update(callId, { state: \"completed\" }).asCallback(callback);\n  };\n\n  /**\n\t * Transfer a call\n\t * @param {Object} params Parameters for transfering of the call\n\t * @param {String} params.transferTo Phone number or SIP address that the call\n\t * is going to be transferred to.\n\t * @param {String} [params.transferCallerId] The caller id that will be used when the call is transferred\n\t * see the {@link http://ap.bandwidth.com/docs/rest-api/calls/#resourcePOSTv1usersuserIdcallscallId|docs}\n\t * for supported options.\n\t * @param {Object} [params.whisperAudio] Audio to be played to the caller that the call will be transferred to.\n\t * Uses the same parameters as call.playAudioAdvanced. See the\n\t * {@link http://ap.bandwidth.com/docs/rest-api/calls/#resourcePOSTv1usersuserIdcallscallIdaudio|docs}.\n\t * @param {String} [params.whisperAudio.gender=female] The gender of the voice used to synthesize the sentence\n\t * @param {String} [params.whisperAudio.voice=Susan] The voice to speak the sentence\n\t * @param {String} [params.whisperAudio.locale=en_US]\n\t * The locale used to get the accent of the voice used to synthesize the sentence.\n\t * @param {String} [params.whisperAudio.fileUrl] The location of an audio file to play WAV and MP3 supported\n\t * @param {Boolean} [params.whisperAudio.loopEnabled=false] Loop media\n\t * @param {Function} [callback] Callback with the transfered call\n\t * @return {CallResponse} A promise for the transfered call\n\t * @example\n\t * //Transfer call\n\t * var speakSentence = {\n\t * \ttransferTo       : \"+15555555555\",\n\t * \ttransferCallerId : \"private\",\n\t * \twhisperAudio     : {\n\t * \t\tsentence : \"You have an incoming call\",\n\t * \t\tgender   : \"female\",\n\t * \t\tvoice    : \"julie\",\n\t * \t\tlocale   : \"en\"\n\t * \t}\n\t * };\n\t *\n\t * //Using Promises\n\t * client.Call.transfer(\"callId\", speakSentence).then(function (res) {});\n\t *\n\t * var playAudio = {\n\t * \tfileUrl     : \"http://mysite.com/file.wav\",\n\t * \tloopEnabled : true\n\t * }\n\t * //Using callbacks\n\t * client.Call.transfer(\"callId\", playAudio, function (err, res) {});\n\t *\n\t * @example\n\t * //Example: Transfer a call using the caller Id of the party being transferred\n\t * var transferPayload = {\n\t * \ttransferTo       : \"+18382947878\",\n\t * };\n\t *\n\t * //Using Promises\n\t * client.Call.transfer(\"callId\", transferPayload).then(function (res) {});\n\t *\n\t */\n  this.transfer = function(callId, params, callback) {\n    params.state = \"transferring\";\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId,\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var location = response.headers.location;\n        var callId = location.substring(location.lastIndexOf(\"/\") + 1);\n        return { id: callId };\n      })\n      .asCallback(callback);\n  };\n\n  function audioApi(callId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/audio\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  }\n\n  /**\n\t * Speak sentence to the call using default values\n\t * @param {String} callId The ID of the call\n\t * @param {String} sentence A sentence to speak to the call.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Speak sentence in a call\n\t *\n\t * //Promise\n\t * client.Call.speakSentence(\"callID\", \"Hello From Bandwidth\").then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Call.speakSentence(\"callID\", \"Hello From Bandwidth\", function (err, res) {});\n\t */\n  this.speakSentence = function(callId, sentence, callback) {\n    return audioApi(callId, { sentence: sentence }).asCallback(callback);\n  };\n\n  /**\n\t * Play audio url to the call\n\t * @param {String} callId The ID of the call\n\t * @param {String} fileUrl The http location of an audio file to play (WAV and MP3 supported).\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Play Audio file on call\n\t *\n\t * //Promise\n\t * client.Call.playAudioFile(\"callId\", \"http://myurl.com/file.mp3\").then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Call.playAudioFile(\"callId\", \"http://myurl.com/file.wav\", function (err, res) {});\n\t */\n  this.playAudioFile = function(callId, fileUrl, callback) {\n    return audioApi(callId, { fileUrl: fileUrl }).asCallback(callback);\n  };\n\n  /**\n\t * Play audio file or speak sentence in call\n\t * @param {String} callId The ID of the call\n\t * @param {Object} params Parameters to play audio in call.\n\t * @param {String} [params.fileUrl] The http location of an audio file to play (WAV and MP3 supported).\n\t * @param {String} [params.sentence] The sentence to speak.\n\t * @param {String} [params.gender=female] The gender of the voice used to synthesize the sentence.\n\t * It will be considered only if sentence is not null. The female gender will be used by default.\n\t * @param {String=} [params.locale=en_US] The locale used to get the accent of the voice used to\n\t * synthesize the sentence. Check out\n\t * {@link http://ap.bandwidth.com/docs/rest-api/calls/#resourcePOSTv1usersuserIdcallscallIdaudio|docs}\n\t * for list of supported locales.\n\t * It will be considered only if sentence is not null/empty. The en_US will be used by default.\n\t * @param {String} [params.voice=Susan] The voice to speak the sentence. Check out\n\t * {@link http://ap.bandwidth.com/docs/rest-api/calls/#resourcePOSTv1usersuserIdcallscallIdaudio|docs}\n\t * for list of supported voices\n\t * It will be considered only if sentence is not null/empty. Susan's voice will be used by default.\n\t * @param {Boolean} [params.loopEnabled=false] When value is true, the audio will keep playing in a loop.\n\t * Default: false.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Play Audio File on loop\n\t * var options = {\n\t * \tfileUrl     : \"http://myurl.com/file.mp3\",\n\t * \tloopEnabled : true\n\t * }\n\t * //Promise\n\t * client.Call.playAudioAdvanced(\"callId\", options).then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Call.playAudioAdvanced(\"callId\", options, function (err,res) {});\n\t * @example\n\t * //Speak sentence with options\n\t * var options = {\n\t * \tsentence : \"hola de Bandwidth\",\n\t * \tgender   : \"male\",\n\t * \tlocale   : \"es\",\n\t * \tvoice    : \"Jorge\"\n\t * }\n\t * //Promise\n\t * client.Call.playAudioAdvanced(\"callId\", options).then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Call.playAudioAdvanced(\"callId\", options, function (err,res) {});\n\t */\n  this.playAudioAdvanced = function(callId, params, callback) {\n    return audioApi(callId, params).asCallback(callback);\n  };\n\n  /**\n\t * Turns on call recording for the active call\n\t * @param {String} callId The ID of the call\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Turn on recording\n\t *\n\t * //Promise\n\t * client.Call.enableRecording(\"callId\").then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Call.enableRecording(\"callId\", function (err, res) {});\n\t */\n  this.enableRecording = function(callId, callback) {\n    return this.update(callId, { recordingEnabled: true }).asCallback(callback);\n  };\n\n  /**\n\t * Turns off call recording for the active call\n\t * @param {String} callId The ID of the call\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Turn off recording\n\t *\n\t * //Promise\n\t * client.Call.disableRecording(\"callId\").then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Call.disableRecording(\"callId\", function (err, res) {});\n\t */\n  this.disableRecording = function(callId, callback) {\n    return this.update(callId, { recordingEnabled: false }).asCallback(\n      callback\n    );\n  };\n\n  this.setMaxRecordingDuration = function(\n    callId,\n    recordingMaxDuration,\n    callback\n  ) {\n    return this.update(callId, {\n      recordingMaxDuration: recordingMaxDuration\n    }).asCallback(callback);\n  };\n\n  /**\n\t * Collects a series of DTMF digits from a phone call with an optional prompt.\n\t * @param {String} callId The ID of the call\n\t * @param {Object} params Parameters for creating a gather\n\t * @param {String} [params.maxDigits] The maximum number of digits to collect (max: 30)\n\t * @param {String} [params.interDigitTimeout=5] Stop gathering if a DTMF digit is not detected\n\t * in this many seconds (max: 30s)\n\t * @param {String} [params.terminatingDigits=#] A string of DTMF digits that end the gather operation immediately\n\t * if any one of them is detected\n\t * @param {String} [params.tag] A string you choose that will be included with the response and\n\t * events for this gather operation.\n\t * @param {String} [params.prompt.sentence] The text to speak for the prompt.\n\t * Uses the same defaults as call.playAudioAdvanced. See the\n\t * {@link http://ap.bandwidth.com/docs/rest-api/calls/#resourcePOSTv1usersuserIdcallscallIdaudio|docs}\n\t * @param {String} [params.prompt.gender] The gender to use for the voice reading the prompt sentence\n\t * @param {String} [params.prompt.locale] The language and region to use for the voice reading the prompt sentence\n\t * @param {Boolean} [params.prompt.loopEnabled=false] When value is true, the audio will keep playing in a loop\n\t * @param {Boolean} [params.prompt.bargeable=true] Make the prompt (audio or sentence) bargeable\n\t * (will be interrupted at first digit gathered).\n\t * @param {Strings} [params.prompt.fileUrl] Make the prompt (audio or sentence) bargeable\n\t * (will be interrupted at first digit gathered).\n\t * @param {Function} [callback] Callback with the newly created call\n\t * @return {CallResponse} A promise for the newly created call\n\t * @example\n\t * //Create Gather\n\t * //The gather ends if either 0, #, or * is detected\n\t * var options = {\n\t * \tmaxDigits         : 30,\n\t * \tinterDigitTimeout : \"30\",\n\t * \tterminatingDigits : \"0#*\",\n\t * \tprompt            : {\n\t * \t\tsentence    : \"Please enter your account number and press pound\",\n\t * \t\tgender      : \"male\",\n\t * \t\tvoice       : \"Simon\",\n\t * \t\tlocale      : \"en_UK\",\n\t * \t\tloopEnabled : true,\n\t * \t\tbargeable   : true\n\t * \t}\n\t * };\n\t * //Promise\n\t * client.Call.createGather(\"callId\", options).then(function(res) {});\n\t *\n\t * //Callback\n\t * client.Call.createGather(\"callId\", options, function(err, res) {});\n\t */\n  this.createGather = function(callId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/gather\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var gather = params;\n        var location = response.headers.location;\n        gather.id = location.substring(location.lastIndexOf(\"/\") + 1);\n        return gather;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get the gather DTMF parameters and results.\n\t * @param {String} callId The ID of the call\n\t * @param {String} gatherId The ID of the gather\n\t * @param {Function} [callback] Callback with the gather\n\t * @return {GatherResponse} A promise for the gather\n\t */\n  this.getGather = function(callId, gatherId, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/gather/\" + gatherId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Complete the gather.\n\t * @param {String} callId The ID of the call\n\t * @param {String} gatherId The ID of the gather\n\t * @param {Function} [callback] Callback of the operation\n\t * @return {Promise} A promise for the operation\n\t */\n  this.completeGather = function(callId, gatherId, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/gather/\" + gatherId,\n        method: \"POST\",\n        body: { state: \"completed\" }\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get events for the call.\n\t * @param {String} callId The ID of the call\n\t * @param {Function} [callback] Callback with the event list\n\t * @return {Array.<EventResponse>} A promise for the event list\n\t * @example\n\t * // Promise\n\t * client.Call.getEvents(callId).then(function (events) {});\n\t * // Callback\n\t * client.Call.getEvents(callId, function (err, events) {});\n\t */\n  this.getEvents = function(callId, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/events\",\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get a single event for the call.\n\t * @param {String} callId The ID of the call\n\t * @param {String} eventId The ID of the event to get\n\t * @param {Function} [callback] Callback with the event list\n\t * @return {EventResponse} A promise for the event list\n\t * @example\n\t * // Promise\n\t * client.Call.getEvent(callId, evenId).then(function (callEvent) {});\n\t * // Callback\n\t * client.Call.getEvent(callId, eventId, function (err, callEvent) {});\n\t */\n  this.getEvent = function(callId, eventId, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/events/\" + eventId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get recordings for the call.\n\t * @param {String} callId The ID of the call\n\t * @param {Function} [callback] Callback with the recording list\n\t * @return {Array.<RecordingResponse>} A promise for the recording list\n\t * @example\n\t * // Promise\n\t * client.Call.getRecordings(callId).then(function (list) {});\n\t * // Callback\n\t * client.Call.getRecordings(callId, function (err, list) {});\n\t */\n  this.getRecordings = function(callId, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/recordings\",\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get transcriptions for the call.\n\t * @param {String} callId The ID of the call\n\t * @param {Function} [callback] Callback with the transcription list\n\t * @return {Array.<TranscriptionResponse>} A promise for the transcription list\n\t * @example\n\t * // Promise\n\t * client.Call.getTranscriptions(callId).then(function (list) {});\n\t * // Callback\n\t * client.Call.getTranscriptions(callId, function (err, list) {});\n\t */\n  this.getTranscriptions = function(callId, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/transcriptions\",\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Send DTMF (phone keypad digit presses).\n\t * @param {String} callId The ID of the call\n\t * @param {String} dtmfOut String containing the DTMF characters to be sent\n\t * in a call.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * // Promise\n\t * client.Call.sendDtmf(callId, \"1\").then(function () {});\n\t * // Callback\n\t * client.Call.sendDtmf(callId, \"1\", function (err) {});\n\t */\n  this.sendDtmf = function(callId, dtmfOut, callback) {\n    return client\n      .makeRequest({\n        path: \"calls/\" + callId + \"/dtmf\",\n        method: \"POST\",\n        body: { dtmfOut: dtmfOut }\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Call;\n\n/**\n * @class CallResponse\n * @type {Object}\n * @property {String} id The unique ID of the call.\n * @property {String} direction Call direction: values are 'in' for an incoming call, 'out' for an outgoing call\n * @property {String} from The phone number or SIP address that made the call.\n * Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).\n * @property {String} to The phone number or SIP address that received the call.\n * Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).\n * @property {String} state The call state. Described below, values are\n * 'started' 'rejected' 'active' 'completed' 'transferring'\n * @property {String} startTime Date when the call was created. Timestamp follows the ISO8601 format.\n * @property {String} activeTime Date when the call was answered. Timestamp follows the ISO8601 format.\n * @property {String} endTime Date when the call ended. Timestamp follows the ISO8601 format.\n * @property {Number} callTimeout Determine how long should the platform wait for\n * call answer before timing out in seconds\n * @property {String} callbackUrl The server URL where the call events related to the call will be sent.\n * @property {String} callbackHttpMethod Determine if the callback event should be sent via\n * HTTP GET or HTTP POST. Values are 'get' or 'post' Default is 'post'\n * @property {Number} callbackTimeout Determine how long should the platform wait for\n * callbackUrl's response before timing out (milliseconds).\n * @property {String} fallbackUrl The server URL used to send the call events if the request to callbackUrl fails.\n * @property {Number} chargeableDuration The number of seconds the call will be billed for.\n * @property {String} transferTo\tPhone number or SIP address that the call is going to be transferred to.\n * @property {String} transferCallerId\tThis is the caller id that will be used when\n * the call is transferred. This parameter is only considered in transfer state.\n * @property {String} whisperAudio\tAudio to be played to the caller that the call will be transferred to.\n * @property {String} bridgeId\tThe id of the bridge where the call will be added.\n * @property {String} bridge\tThe URL of the bridge, if any, that contains the call.\n * @property {String} conferenceId\tThe id of the conference where the call will be added.\n * This property is required if you want to add this call to a conference.\n * @property {String} conference\tThe complete URL of the conference resource the call is associated with.\n * @property {String} events The URL to retrieve the events related to the call.\n * @property {String} recordingEnabled=false\tIndicates if the call should be recorded\n * after being created. Set to 'true' to enable. Default is 'false'\n * @property {String} recordingFileFormat=wav The file format of the recorded call.\n * Supported values are 'wav' (default) and 'mp3'.\n * @property {Number} recordingMaxDuration=3600\tIndicates the maximum duration of\n * call recording in seconds. Default value is 1 hour.\n * @property {Boolean} transcriptionEnabled\tWhether all the recordings for\n * this call should be be automatically transcribed.\n * tag Any string, it will be included in the callback events of the call.\n * @property {Number} page=0 Used for pagination to indicate the page requested for\n * querying a list of calls. If no value is specified the default is 0.\n * @property {Number} size=25 Used for pagination to indicate the size of each page requested\n * for querying a list of calls. If no value is specified the default value is 25 (maximum value 1000).\n * @property {Object} sipHeaders Map of Sip headers prefixed by \"X-\".\n * Up to 5 headers can be sent per call. Max length for header and value is 256 characters.\n */\n\n/**\n * @class GatherResponse\n * @type {Object}\n * @property {String} id The unique ID of the gather.\n * @property {String} state The state of the gather.\n * @property {String} reason The reason of completing of the gather.\n * @property {String} createdTime Time of creation of the gather.\n * @property {String} completedTime TIme of completion of the gather.\n * @property {String} digits Gathered digits.\n */\n\n/**\n * @class EventResponse\n * @type {Object}\n * @property {String} id The call event id.\n * @property {String} time The time the event occurred.\n * @property {String} name The name of the event.\n * @property {String} data Data about event.\n */\n\n/**\n * @class RecordingResponse\n * @type {Object}\n * @property {String} id The recording id.\n * @property {String} startTime Date/time when the recording started.\n * @property {String} endTime Date/time when the recording ended.\n * @property {String} call The complete URL to the call resource this recording is associated with.\n * @property {String} media The complete URL to the media resource this recording is associated with.\n * @property {String} state The state of the recording\n */\n\n/**\n * @class  TranscriptionResponse\n * @type {Object}\n * @property {String} id The transcription id.\n * @property {String} state The state of the transcription\n * @property {String} text The transcribed text (only first 1000 characters)\n * @property {String} time The date/time the transcription resource was created\n * @property {Number} chargeableDuration The seconds between activeTime and endTime for the recording;\n *  this is the time that is going to be used to charge the resource.\n * @property {Number} textSize The size of the transcribed text.\n * @property {String} textUrl An url to the full text\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/call.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "Call",
    "memberof": "lib/call.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/call.js~Call",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/call.js",
    "importStyle": null,
    "description": "Voice call",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "lib/client.js",
    "content": "var Promise = require(\"bluebird\");\nvar request = Promise.promisify(require(\"request\"));\nvar UnexpectedResponseError = require(\"./unexpectedResponseError\");\nvar packageInfo = require(\"./../package.json\");\n\nvar apiVersionPath = \"/v1\";\nvar usersPath = \"/users\";\n\nvar Client = function(config) {\n  // Apply default values if not provided\n  if (!config.baseUrl) {\n    config.baseUrl = \"https://api.catapult.inetwork.com\";\n  }\n\n  var handleResponse = function(response) {\n    if (\n      response.statusCode !== 200 &&\n      response.statusCode !== 201 &&\n      response.statusCode !== 202\n    ) {\n      var message = \"\";\n      if (response.body) {\n        message = response.body.message || \"\";\n      }\n      throw new UnexpectedResponseError(message, response.statusCode);\n    }\n    return response;\n  };\n\n  function getUserAgentHeader() {\n    return packageInfo.name + \"-v\" + packageInfo.version;\n  }\n\n  function createRequestOptions(params) {\n    var baseUrl = config.baseUrl + apiVersionPath;\n    var userPath = params.pathWithoutUser\n      ? \"\"\n      : usersPath + \"/\" + config.userId;\n    return {\n      url: baseUrl + userPath + \"/\" + params.path,\n      headers: {\n        \"User-Agent\": getUserAgentHeader()\n      },\n      qs: params.qs,\n      method: params.method || \"GET\",\n      auth: {\n        user: config.apiToken,\n        pass: config.apiSecret\n      },\n      json: true,\n      body: params.body,\n      rejectUnauthorized: false, // for some reason this is required for bootcamp ssl\n      encoding: params.encoding || undefined\n    };\n  }\n\n  this.makeRequest = function(params) {\n    return request(createRequestOptions(params)).then(handleResponse);\n  };\n\n  this.createRequestOptions = createRequestOptions;\n\n  this.handleResponse = handleResponse;\n};\n\nmodule.exports = Client;\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/client.js",
    "static": true,
    "longname": "lib/client.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "request",
    "memberof": "lib/client.js",
    "static": true,
    "longname": "lib/client.js~request",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "UnexpectedResponseError",
    "memberof": "lib/client.js",
    "static": true,
    "longname": "lib/client.js~UnexpectedResponseError",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "packageInfo",
    "memberof": "lib/client.js",
    "static": true,
    "longname": "lib/client.js~packageInfo",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "apiVersionPath",
    "memberof": "lib/client.js",
    "static": true,
    "longname": "lib/client.js~apiVersionPath",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "usersPath",
    "memberof": "lib/client.js",
    "static": true,
    "longname": "lib/client.js~usersPath",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "Client",
    "memberof": "lib/client.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/client.js~Client",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "lib/conference.js",
    "content": "/**\n * Conference\n * @constructor\n */\nvar Conference = function(client) {\n  /**\n\t * Create a new conference\n\t * @param {Object} params Parameters for creating a conference\n\t * @param {String} params.from The phone number that will host the conference.\n\t * @param {String} [params.callbackUrl] The complete URL where the events related to the\n\t * Conference will be sent to.\n\t * @param {String} [params.callbackHttpMethod=post] Determine if the callback event should be sent\n\t * via HTTP GET or HTTP POST.\n\t * @param {String} [params.callbackTimeout] Determine how long should the platform wait for\n\t * callbackUrl's response before timing out in milliseconds.\n\t * @param {String} [params.fallbackUrl] Determine how long should the platform wait\n\t * for callbackUrl's response before timing out in milliseconds.\n\t * @param {String} [params.profile] Determines how DTMF is used. Values are:\n\t *`interpret_digits`: the conference will handle DTMF with the default behavior, or `passthru_digits`:\n\t * allows the application to receive DTMF events and use the `gather` API.\n\t * @param {String} [params.tag] A string that will be included in the callback events\n\t * of the conference.\n\t * @param {Function} [callback] Callback with the newly created conference\n\t * @return {ConferenceResponse} A promise for the newly created conference\n\t * @example\n\t * // Promise\n\t * client.Conference.create({from: \"+1234567890\"}).then(function(conference){});\n\t * // Callback\n\t * client.Conference.create({from: \"+1234567890\"}, function(err, conference){});\n\t */\n  this.create = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"conferences\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var conference = params;\n        var location = response.headers.location;\n        conference.id = location.substring(location.lastIndexOf(\"/\") + 1);\n        return conference;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets information about a conference.\n\t * @param  {String} conferenceId The ID of the conference to get\n\t * @param  {Function} [callback] A callback with the conference information\n\t * @return {ConferenceResponse} A promise for the conference information\n\t * @example\n\t * // Promise\n\t * client.Conference.get(\"conferenceId\").then(function(conference){});\n\t * // Callback\n\t * client.Conference.get(\"conferenceId\", function(err, conference){});\n\t */\n  this.get = function(conferenceId, callback) {\n    return client\n      .makeRequest({\n        path: \"conferences/\" + conferenceId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Update the conference\n\t * @param  {String} conferenceId The ID of the conference\n\t * @param {Object} params Changed parameters of the conference\n\t * @param {String} [params.state] Conference state. Possible state values are:\n\t * \"completed\" to terminate the conference.\n\t * @param {String} [params.hold] If \"true\", all member can't hear or speak in the conference.\n\t * If \"false\", all members can hear and speak in the conference (unless set at the member level).\n\t * @param {String} [params.mute] If \"true\", all member can't speak in the conference.\n\t * If \"false\", all members can speak in the conference (unless set at the member level).\n\t * @param {String} [params.callbackUrl] The complete URL where the events related to the\n\t * Conference will be sent to.\n\t * @param {String} [params.callbackHttpMethod=post] Determine if the callback event should be sent\n\t * via HTTP GET or HTTP POST.\n\t * @param {String} [params.callbackTimeout] Determine how long should the platform wait for\n\t * callbackUrl's response before timing out in milliseconds.\n\t * @param {String} [params.fallbackUrl] Determine how long should the platform wait\n\t * for callbackUrl's response before timing out in milliseconds.\n\t * @param {String} [params.tag] A string that will be included in the callback events\n\t * of the conference.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * // Promise\n\t * client.Conference.update(\"conferenceID\", {mute: \"true\"}).then(function(){});\n\t * // Callback\n\t * client.Conference.update(\"conferenceID\", {mute: \"true\"}, function(err){});\n\t */\n  this.update = function(conferenceId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"conferences/\" + conferenceId,\n        method: \"POST\",\n        body: params\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Remove the conference\n\t * @param  {String} conferenceId The ID of the conference\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * // Promise\n\t * client.Conference.remove(\"conferenceID\").then(function(){});\n\t * // Callback\n\t * client.Conference.remove(\"conferenceID\", function(err){});\n\t */\n  this.remove = function(conferenceId, callback) {\n    return this.update(conferenceId, { state: \"completed\" }, callback);\n  };\n\n  function audioApi(conferenceId, memberId, params, callback) {\n    var path = \"conferences/\" + conferenceId;\n    if (typeof memberId === \"string\") {\n      path = path + \"/members/\" + memberId;\n    } else {\n      callback = params;\n      params = memberId;\n    }\n    path += \"/audio\";\n    return client\n      .makeRequest({\n        path: path,\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  }\n\n  /**\n\t * Speak sentence to the conference using default values\n\t * @param {String} conferenceId The ID of the conference\n\t * @param {String} sentence A sentence to speak to the conference.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Speak sentence in a conference\n\t *\n\t * //Promise\n\t * client.Conference.speakSentence(\"conferenceID\", \"Hello From Bandwidth\").then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Conference.speakSentence(\"conferenceID\", \"Hello From Bandwidth\", function (err, res) {});\n\t */\n  this.speakSentence = function(conferenceId, sentence, callback) {\n    return audioApi(conferenceId, { sentence: sentence }).asCallback(callback);\n  };\n\n  /**\n\t * Play audio url to the conference\n\t * @param {String} conferenceId The ID of the conference\n\t * @param {String} fileUrl The http location of an audio file to play (WAV and MP3 supported).\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Play Audio file on conference\n\t *\n\t * //Promise\n\t * client.Conference.playAudioFile(\"conferenceID\", \"http://myurl.com/file.mp3\").then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Conference.playAudioFile(\"conferenceID\", \"http://myurl.com/file.wav\", function (err, res) {});\n\t */\n  this.playAudioFile = function(conferenceId, fileUrl, callback) {\n    return audioApi(conferenceId, { fileUrl: fileUrl }).asCallback(callback);\n  };\n\n  /**\n\t * Play audio file or speak sentence in conference\n\t * @param {String} conferenceId The ID of the conference\n\t * @param {Object} params Parameters to play audio in conference.\n\t * @param {String} [params.fileUrl] The http location of an audio file to play (WAV and MP3 supported).\n\t * @param {String} [params.sentence] The sentence to speak.\n\t * @param {String} [params.gender=female] The gender of the voice used to synthesize the sentence.\n\t * It will be considered only if sentence is not null. The female gender will be used by default.\n\t * @param {String=} [params.locale=en_US] The locale used to get the accent of the voice used to\n\t * synthesize the sentence.\n\t * It will be considered only if sentence is not null/empty. The en_US will be used by default.\n\t * @param {String} [params.voice=Susan] The voice to speak the sentence.\n\t * for list of supported voices\n\t * It will be considered only if sentence is not null/empty. Susan's voice will be used by default.\n\t * @param {Boolean} [params.loopEnabled=false] When value is true, the audio will keep playing in a loop.\n\t * Default: false.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Play Audio File on loop\n\t * var options = {\n\t * \tfileUrl     : \"http://myurl.com/file.mp3\",\n\t * \tloopEnabled : true\n\t * }\n\t * //Promise\n\t * client.Conference.playAudioAdvanced(\"conferenceId\", options).then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Conference.playAudioAdvanced(\"conferenceId\", options, function (err,res) {});\n\t * @example\n\t * //Speak sentence with options\n\t * var options = {\n\t * \tsentence : \"hola de Bandwidth\",\n\t * \tgender   : \"male\",\n\t * \tlocale   : \"es\",\n\t * \tvoice    : \"Jorge\"\n\t * }\n\t * //Promise\n\t * client.Conference.playAudioAdvanced(\"conferenceId\", options).then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Conference.playAudioAdvanced(\"conferenceId\", options, function (err,res) {});\n\t */\n  this.playAudioAdvanced = function(conferenceId, params, callback) {\n    return audioApi(conferenceId, params).asCallback(callback);\n  };\n\n  /**\n\t * Gets information about a conference members.\n\t * @param  {String} conferenceId The ID of the conference to get memebers\n\t * @param  {Function} callback A callback with member list\n\t * @return {Promise} A promise for member list\n\t * @example\n\t * // Promise\n\t * client.Conference.getMembers(\"conferenceId\").then(function(members){});\n\t * // Callback\n\t * client.Conference.getMembers(\"conferenceId\", function(err, members){});\n\t */\n  this.getMembers = function(conferenceId, callback) {\n    return client\n      .makeRequest({\n        path: \"conferences/\" + conferenceId + \"/members\",\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets information about a single conference member.\n\t * @param  {String} conferenceId The ID of the conference\n\t * @param  {String} memberId The ID of the member\n\t * @param  {Function} callback A callback with the member\n\t * @return {Promise} A promise for the member\n\t * @example\n\t * // Promise\n\t * client.Conference.getMember(\"conferenceId\", \"memberId\").then(function(member){});\n\t * // Callback\n\t * client.Conference.getMember(\"conferenceId\", \"memberId\", function(err, member){});\n\t */\n  this.getMember = function(conferenceId, memberId, callback) {\n    return client\n      .makeRequest({\n        path: \"conferences/\" + conferenceId + \"/members/\" + memberId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Add members to a conference.\n\t * @param {Object} params Parameters for new member\n\t * @param {String} params.callId The callId must refer to an active call that was created\n\t * using this conferenceId.\n\t * @param {String} [params.joinTone] If \"true\", will play a tone when the member joins the conference.\n\t * If \"false\", no tone is played when the member joins the conference.\n\t * @param {String} [params.leavingTone] If \"true\", will play a tone when the member leaves the conference.\n\t * If \"false\", no tone is played when the member leaves the conference.\n\t * @param {String} [params.mute] If \"true\", member can't speak in the conference. If \"false\",\n\t * this members can speak in the conference (unless set at the conference level).\n\t * @param {String} [params.hold] If \"true\", member can't hear or speak in the conference.\n\t * If \"false\", member can hear and speak in the conference (unless set at the conference level).\n\t * @param {Function} [callback] Callback with the added member\n\t * @return {ConferenceResponse} A promise for the added member\n\t * @example\n\t * // Promise\n\t * client.Conference.createMember(\"conferenceId\", {callId: \"callID\"}).then(function(member){});\n\t * // Callback\n\t * client.Conference.createMember(\"conferenceId\", {callId: \"callID\"}, function(err, member){});\n\t */\n  this.createMember = function(conferenceId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"conferences/\" + conferenceId + \"/members\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var conference = params;\n        var location = response.headers.location;\n        conference.id = location.substring(location.lastIndexOf(\"/\") + 1);\n        return conference;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Update the conference member\n\t * @param  {String} conferenceId The ID of the conference\n\t * @param  {String} memberId The ID of the member\n\t * @param {Object} params Changed parameters of the member\n\t * @param {String} [params.joinTone] If \"true\", will play a tone when the member joins the conference.\n\t * If \"false\", no tone is played when the member joins the conference.\n\t * @param {String} [params.leavingTone] If \"true\", will play a tone when the member leaves the conference.\n\t * If \"false\", no tone is played when the member leaves the conference.\n\t * @param {String} [params.mute] If \"true\", member can't speak in the conference. If \"false\",\n\t * this members can speak in the conference (unless set at the conference level).\n\t * @param {String} [params.hold] If \"true\", member can't hear or speak in the conference.\n\t * If \"false\", member can hear and speak in the conference (unless set at the conference level).\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * // Promise\n\t * client.Conference.updateMember(\"conferenceID\", \"memberId\", {mute: \"true\"}).then(function(){});\n\t * // Callback\n\t * client.Conference.updateMember(\"conferenceID\", \"memberId\", {mute: \"true\"}, function(err){});\n\t */\n  this.updateMember = function(conferenceId, memberId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"conferences/\" + conferenceId + \"/members/\" + memberId,\n        method: \"POST\",\n        body: params\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Remove the conference member\n\t * @param  {String} conferenceId The ID of the conference\n\t * @param  {String} memberId The ID of the member\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * // Promise\n\t * client.Conference.removeMember(\"conferenceID\", \"memberId\").then(function(){});\n\t * // Callback\n\t * client.Conference.removeMember(\"conferenceID\", \"memberId\", function(err){});\n\t */\n  this.removeMember = function(conferenceId, memberId, callback) {\n    return this.updateMember(\n      conferenceId,\n      memberId,\n      { state: \"completed\" },\n      callback\n    );\n  };\n\n  /**\n\t * Speak sentence to the conference member using default values\n\t * @param {String} conferenceId The ID of the conference\n\t * @param {String} memberId The ID of the member\n\t * @param {String} sentence A sentence to speak to the member.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Speak sentence\n\t *\n\t * //Promise\n\t * client.Conference.speakSentenceToMember(\"conferenceID\", \"memberID\", Hello From Bandwidth\")\n\t *   .then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Conference.speakSentenceToMember(\"conferenceID\", \"memberID\", \"Hello From Bandwidth\",\n\t *   function (err, res) {});\n\t */\n  this.speakSentenceToMember = function(\n    conferenceId,\n    memberId,\n    sentence,\n    callback\n  ) {\n    return audioApi(conferenceId, memberId, { sentence: sentence }).asCallback(\n      callback\n    );\n  };\n\n  /**\n\t * Play audio url to the conference member\n\t * @param {String} conferenceId The ID of the conference\n\t * @param {String} memberId The ID of the member\n\t * @param {String} fileUrl The http location of an audio file to play (WAV and MP3 supported).\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Play Audio file\n\t *\n\t * //Promise\n\t * client.Conference.playAudioFileToMember(\"conferenceID\", \"memberId\", http://myurl.com/file.mp3\")\n\t *   .then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Conference.playAudioFileToMember(\"conferenceID\", \"memberId\", http://myurl.com/file.wav\",\n\t *    function (err, res) {});\n\t */\n  this.playAudioFileToMember = function(\n    conferenceId,\n    memberId,\n    fileUrl,\n    callback\n  ) {\n    return audioApi(conferenceId, memberId, { fileUrl: fileUrl }).asCallback(\n      callback\n    );\n  };\n\n  /**\n\t * Play audio file or speak sentence to the conference member\n\t * @param {String} conferenceId The ID of the conference\n\t * @param {String} memberId The ID of the member\n\t * @param {Object} params Parameters to play audio.\n\t * @param {String} [params.fileUrl] The http location of an audio file to play (WAV and MP3 supported).\n\t * @param {String} [params.sentence] The sentence to speak.\n\t * @param {String} [params.gender=female] The gender of the voice used to synthesize the sentence.\n\t * It will be considered only if sentence is not null. The female gender will be used by default.\n\t * @param {String=} [params.locale=en_US] The locale used to get the accent of the voice used to\n\t * synthesize the sentence.\n\t * It will be considered only if sentence is not null/empty. The en_US will be used by default.\n\t * @param {String} [params.voice=Susan] The voice to speak the sentence.\n\t * It will be considered only if sentence is not null/empty. Susan's voice will be used by default.\n\t * @param {Boolean} [params.loopEnabled=false] When value is true, the audio will keep playing in a loop.\n\t * Default: false.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * //Play Audio File on loop\n\t * var options = {\n\t * \tfileUrl     : \"http://myurl.com/file.mp3\",\n\t * \tloopEnabled : true\n\t * }\n\t * //Promise\n\t * client.Conference.playAudioAdvancedToMember(\"conferenceId\", \"memberId\", options)\n\t *  .then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Conference.playAudioAdvancedToMember(\"conferenceId\", \"memberId\", options,\n\t *   function (err,res) {});\n\t * @example\n\t * //Speak sentence with options\n\t * var options = {\n\t * \tsentence : \"hola de Bandwidth\",\n\t * \tgender   : \"male\",\n\t * \tlocale   : \"es\",\n\t * \tvoice    : \"Jorge\"\n\t * }\n\t * //Promise\n\t * client.Conference.playAudioAdvancedToMember(\"conferenceId\", \"memberId\", options)\n\t *   .then(function (res) {});\n\t *\n\t * //Callback\n\t * client.Conference.playAudioAdvanced(\"conferenceId\", options, function (err,res) {});\n\t */\n  this.playAudioAdvancedToMember = function(\n    conferenceId,\n    memberId,\n    params,\n    callback\n  ) {\n    return audioApi(conferenceId, memberId, params).asCallback(callback);\n  };\n};\n\nmodule.exports = Conference;\n\n/**\n * @class ConferenceResponse\n * @type {Object}\n * @property {String} id The unique ID of the conference.\n * @property {String} state Conference state. Possible state values are described here.\n * @property {String} from The phone number that will host the conference.\n * @property {String} createdTime The time that the Conference was created (UTC).\n * @property {String} completedTime The time that the Conference was completed (UTC).\n * @property {Number} activeMembers The number of active conference members.\n * @property {String} hold If \"true\", all member can't hear or speak in the conference.\n * If \"false\", all members can hear and speak in the conference (unless set at the member level).\n * @property {String} mute If \"true\", all member can't speak in the conference.\n * If \"false\", all members can speak in the conference (unless set at the member level).\n * @property {String} callbackUrl The complete URL where the events related to the\n * Conference will be sent to.\n * @property {String} profile If \"interpret_digits\": the conference will handle DTMF with the default behavior\n * or if \"passthru_digits\": allows the application to receive DTMF events and use the `gather` API.\n * @property {String} callbackHttpMethod Determine if the callback event should be sent\n * via HTTP GET or HTTP POST.\n * @property {String} callbackTimeout Determine how long should the platform wait for\n * callbackUrl's response before timing out in milliseconds.\n * @property {String} fallbackUrl Determine how long should the platform wait\n * for callbackUrl's response before timing out in milliseconds.\n * @property {String} tag A string that will be included in the callback events\n * of the conference.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/conference.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "Conference",
    "memberof": "lib/conference.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/conference.js~Conference",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/conference.js",
    "importStyle": null,
    "description": "Conference",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "lib/domain.js",
    "content": "var getNextLink = require(\"./headerParsingLib\").getNextLink;\nvar Promise = require(\"bluebird\");\n/**\n * Domain\n * @constructor\n */\nvar Domain = function(client) {\n  /**\n\t * Create a domain\n\t * @param {Object} params Parameters for creating a new domain\n\t * @param {String} params.name The name is a unique URI to be used in DNS lookups.\n\t * @param {String} params.description String to describe the domain.\n\t * @param {Function} [callback] Callback with the newly created domain\n\t * @return {DomainResponse} A promise for the newly created domain\n\t */\n  this.create = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"domains\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var domain = params;\n        var location = response.headers.location;\n        var domainId = location.substring(location.lastIndexOf(\"/\") + 1);\n        domain.id = domainId;\n        return domain;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of all domains.\n\t * @param {Function} callback A callback with the list of calls\n\t * @param {Number} [params.size] the maximum number of domains returned\n\t * by the query per page (Max size: 100).\n\t * @return {Array.<DomainResponse>} A promise for the list of domains.\n\t */\n  this.list = function(params, callback) {\n    var self = this;\n    return client\n      .makeRequest({\n        path: \"domains\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        var domainListResponse = {\n          domains: response.body,\n          hasNextPage: false,\n          getNextPage: function(nextCallback) {\n            return Promise.reject(\"Next page does not exist.\").asCallback(\n              nextCallback\n            );\n          }\n        };\n        var nextLink = getNextLink(response.headers);\n        if (nextLink) {\n          domainListResponse.hasNextPage = true;\n          domainListResponse.getNextPage = function(nextCallback) {\n            return self.list(nextLink, nextCallback);\n          };\n        }\n        return domainListResponse;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Delete a domain.\n\t * @param  {String} domainId ID of the domain to delete.\n\t * @param  {Function} [callback] A callback for the domain.\n\t * @return {Promise} A promise for current operation.\n\t */\n  this.delete = function(domainId, callback) {\n    return client\n      .makeRequest({\n        path: \"domains/\" + domainId,\n        method: \"DELETE\"\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Domain;\n\n/**\n * @class DomainResponse\n * @type {Object}\n * @property {String} id The unique identifier for the domain.\n * @property {String} name A name you choose for this domain.\n * @property {String} description A description of this domain.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/domain.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "getNextLink",
    "memberof": "lib/domain.js",
    "static": true,
    "longname": "lib/domain.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/domain.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/domain.js",
    "static": true,
    "longname": "lib/domain.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/domain.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "Domain",
    "memberof": "lib/domain.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/domain.js~Domain",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/domain.js",
    "importStyle": null,
    "description": "Domain",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "lib/endpoint.js",
    "content": "var getNextLink = require(\"./headerParsingLib\").getNextLink;\nvar Promise = require(\"bluebird\");\n\n/**\n * Endpoint\n * @constructor\n */\nvar Endpoint = function(client) {\n  /**\n\t * Create a new endpoint for the domain\n\t * @param {String} domainId Id of domain\n\t * @param {Object} params Parameters for creating a new endpoint\n\t * @param {String} params.name The endpoint's name, which SIP clients use as the \"address of record\" .\n\t * @param {String} params.description String to describe the endpoint.\n\t * 0param {String} params.applicationId The id of the application associated with this endpoint.\n\t * @param {Boolean} params.enabled Allow or not to receive and make calls.\n\t * @param {Object} params.credentials Auth parameters\n\t * @param {Function} [callback] Callback with the newly created endpoint\n\t * @return {EndpointResponse} A promise for the newly created endpoint\n\t * @example\n\t * // Promise\n\t * client.Endpoint.create(\"domainId\", { name : \"my-endpoint\", applicationId : \"appId\",\n\t * credentials : { password : \"123456\" }}).then(function (endpoint) {});\n\t * // Callback\n\t * client.Endpoint.create(\"domainId\", { name : \"my-endpoint\", applicationId : \"appId\",\n\t * credentials : { password : \"123456\" }}, function (err, endpoint) {});\n\t */\n  this.create = function(domainId, params, callback) {\n    params.domainId = domainId;\n    return client\n      .makeRequest({\n        path: \"domains/\" + domainId + \"/endpoints\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var enpoint = params;\n        var location = response.headers.location;\n        enpoint.id = location.substring(location.lastIndexOf(\"/\") + 1);\n        return enpoint;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of all endpoints for the domain.\n\t * @example\n\t *  // Default size (25) using promises\n\t *  client.Endpoint.list(\"domainId\")\n\t *  \t.then(function (res) {});\n\t * @example\n\t * // Default size (25) using callbacks\n\t * client.Endpoint.list(\"domainId\", function (err, res) {});\n\t * @example\n\t * // Specify number of endpoints using promises\n\t * client.Endpoint.list(\"domainId\", {size: 1000})\n\t * \t\t.then(function (res) {});\n\t * @example\n\t * // Specify number of endpoints using callbacks\n\t * client.Endpoint.list(\"domainId\" {size: 1000}, function (err, res) {});\n\t * @param {String} domainId Id of the domain to list the endpoints\n\t * @param {Object} params Parameters for listing endpoints on domain\n\t * @param {Number} [params.size] OPTIONAL The maximum number of endpoints returned by\n\t * the query per page (Max size: 1000).\n\t * @param {Function} [callback] A callback with the list of endpoints\n\t * @return {Array.<EndpointResponse>} A promise for the list of endpoints.\n\n\t */\n  this.list = function(domainId, params, callback) {\n    var self = this;\n    if (typeof params === \"function\") {\n      callback = params;\n      params = {};\n    }\n    return client\n      .makeRequest({\n        path: \"domains/\" + domainId + \"/endpoints\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        var endpointListResponse = {\n          endpoints: response.body,\n          hasNextPage: false,\n          getNextPage: function(nextCallback) {\n            return Promise.reject(\"Next page does not exist.\").asCallback(\n              nextCallback\n            );\n          }\n        };\n        var nextLink = getNextLink(response.headers);\n        if (nextLink) {\n          endpointListResponse.hasNextPage = true;\n          endpointListResponse.getNextPage = function(nextCallback) {\n            return self.list(domainId, nextLink, nextCallback);\n          };\n        }\n        return endpointListResponse;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get a single endpoint.\n\t * @param {String} domainId Id of the domain\n\t * @param {String} endpointId Id of the endpoint\n\t * @param {Function} [callback] A callback with the endpoint\n\t * @return {EndpointResponse} A promise for the endpoint.\n\t * @example\n\t * // Promise\n\t * client.Endpoint.get(domainId, endpointId).then(function(endpoint){});\n\t *\n\t * // Callback\n\t * client.Endpoint.get(domainId, endpointId, function(err, endpoint){});\n\t */\n  this.get = function(domainId, endpointId, callback) {\n    return client\n      .makeRequest({\n        path: \"domains/\" + domainId + \"/endpoints/\" + endpointId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Delete an endpoint.\n\t * @param {String} domainId Id of domain\n\t * @param  {String} endpointId ID of the endpoint to delete.\n\t * @param  {Function} [callback] A callback for the operation.\n\t * @return {Promise} A promise for current operation.\n\t * @example\n\t * // Promise\n\t * client.Endpoint.delete(\"domainId\", \"endpointId\").then(function (endpoint) {});\n\t * // Callback\n\t * client.Endpoint.delete(\"domainId\", \"endpointId\", function (err, endpoint) {});\n\t */\n  this.delete = function(domainId, endpointId, callback) {\n    return client\n      .makeRequest({\n        path: \"domains/\" + domainId + \"/endpoints/\" + endpointId,\n        method: \"DELETE\"\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Update an endpoint.\n\t * @param {String} domainId Id of domain\n\t * @param  {String} endpointId ID of the endpoint to update.\n\t * @param {Object} params Changed parameters for the endpoint\n\t * @param {String} params.description String to describe the endpoint.\n\t * 0param {String} params.applicationId The id of the application associated with this endpoint.\n\t * @param {Boolean} params.enabled Allow or not to receive and make calls.\n\t * @param {Object} params.credentials Auth parameters\n\t * @param  {Function} [callback] A callback for the operation.\n\t * @return {Promise} A promise for current operation.\n\t * @example\n\t * // Promise\n\t * client.Endpoint.update(\"domainId\", \"endpointId\", { enabled : true }).then(function (endpoint) {});\n\t * // Callback\n\t * client.Endpoint.update(\"domainId\", \"endpointId\", { enabled : true }, function (err, endpoint) {});\n\t */\n  this.update = function(domainId, endpointId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"domains/\" + domainId + \"/endpoints/\" + endpointId,\n        method: \"POST\",\n        body: params\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Generate auth token for the endpoint.\n\t * @param {String} domainId Id of domain\n\t * @param  {String} endpointId ID of the endpoint to update.\n\t * @param  {Object} params parameters of token.\n\t * @param  {Number} params.expires Expiration time of token in seconds\n\t * @param  {Function} [callback] A callback with token value.\n\t * @return {Promise} A promise with token value.\n \t * @example\n\t * // Promise\n\t * client.Endpoint.createAuthToken(\"domainId\", \"endpointId\", { expires : 3600 }).then(function (endpoint) {});\n\t * // Callback\n\t * client.Endpoint.createAuthToken(\"domainId\", \"endpointId\", { expires : 3600 }, function (err, endpoint) {});\n\t */\n  this.createAuthToken = function(domainId, endpointId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"domains/\" + domainId + \"/endpoints/\" + endpointId + \"/tokens\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Endpoint;\n\n/**\n * @class EndpointResponse\n * @type {Object}\n * @property {String} id The unique identifier for the application.\n * @param {String} name The endpoint's name, which SIP clients use as the \"address of record\" .\n * @param {String} description String to describe the endpoint.\n * 0param {String} applicationId The id of the application associated with this endpoint.\n * @param {Boolean} enabled Allow or not to receive and make calls.\n * @param {Object} credentials Auth parameters\n*/\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/endpoint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "getNextLink",
    "memberof": "lib/endpoint.js",
    "static": true,
    "longname": "lib/endpoint.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/endpoint.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/endpoint.js",
    "static": true,
    "longname": "lib/endpoint.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/endpoint.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "Endpoint",
    "memberof": "lib/endpoint.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/endpoint.js~Endpoint",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/endpoint.js",
    "importStyle": null,
    "description": "Endpoint",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "lib/error.js",
    "content": "var getNextLink = require(\"./headerParsingLib\").getNextLink;\nvar Promise = require(\"bluebird\");\n\n/**\n * Error\n * @constructor\n */\nvar Error = function(client) {\n  /**\n\t * Gets information about a error.\n\t * @param  {String} errorId The ID of the error to get\n\t * @param  {Function} [callback] A callback with the error information\n\t * @return {ErrorResponse} A promise for the error information\n\t * @example\n\t *\n\t * // Promise\n\t * client.Error.get(errorId).then(function(errorInfo){});\n\t *\n\t * // Callback\n\t * client.Error.get(errorId, function(err, errorInfo){});\n\t */\n  this.get = function(errorId, callback) {\n    return client\n      .makeRequest({\n        path: \"errors/\" + errorId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of errors.\n\t * @param {Object} params Query parameters for listing errors\n\t * @param {Number} [params.size=25] Used for pagination to indicate the size of each page requested\n\t * for querying a list of errors. If no value is specified the default value is 25.\n\t * @param {Function} [callback] A callback with the list of errors\n\t * @return {Array.<ErrorResponse>} A promise for the list of errors\n\t * @example\n\t *\n\t * // Promise\n\t * client.Error.list({size: 1000}).then(function(errorResponse){});\n\t *\n\t * // Callback\n\t * client.Error.list({size: 1000}, function(err, errorResponse){});\n\t */\n  this.list = function(params, callback) {\n    var self = this;\n    return client\n      .makeRequest({\n        path: \"errors\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        var errorListResponse = {\n          errors: response.body,\n          hasNextPage: false,\n          getNextPage: function(nextCallback) {\n            return Promise.reject(\"Next page does not exist.\").asCallback(\n              nextCallback\n            );\n          }\n        };\n        var nextLink = getNextLink(response.headers);\n        if (nextLink) {\n          errorListResponse.hasNextPage = true;\n          errorListResponse.getNextPage = function(nextCallback) {\n            return self.list(nextLink, nextCallback);\n          };\n        }\n        return errorListResponse;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Error;\n\n/**\n * @class ErrorResponse\n * @type {Object}\n * @property {String} id The unique ID of the error.\n * @property {String} time The time the error occurred (UTC).\n * @property {String} category The error category.\n * @property {String} code A specific error code string that identifies the type of error\n * @property {String} message A message that describes the error condition in detail.\n * @property {Object} details A list of name/value pairs of additional details.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "getNextLink",
    "memberof": "lib/error.js",
    "static": true,
    "longname": "lib/error.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/error.js",
    "static": true,
    "longname": "lib/error.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "Error",
    "memberof": "lib/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/error.js~Error",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/error.js",
    "importStyle": null,
    "description": "Error",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "lib/headerParsingLib.js",
    "content": "/**\n* Imports\n*/ \nvar parse = require(\"parse-link-header\");\nvar _ = require(\"lodash\");\n\n/**\n * @function\n *  @name getNextLink\n * @param {Object} headers Response A headers object returned from calling 'client.makeRequest' (response.headers)\n * @return {String}  A parsed version of the link to the subsequent page, or null if no such page exists.\n */\nvar getNextLink = function(headers) {\n  if (headers.link) {\n    var parsedHeader = parse(headers.link);\n    if (parsedHeader.next) {\n      return _.omit(parsedHeader.next, [\"rel\", \"url\"]);\n    }\n  }\n  return null;\n};\n\nmodule.exports.getNextLink = getNextLink;\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/headerParsingLib.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "parse",
    "memberof": "lib/headerParsingLib.js",
    "static": true,
    "longname": "lib/headerParsingLib.js~parse",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/headerParsingLib.js",
    "importStyle": null,
    "description": "Imports",
    "lineNumber": 4,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/headerParsingLib.js",
    "static": true,
    "longname": "lib/headerParsingLib.js~_",
    "access": "private",
    "export": false,
    "importPath": "node-bandwidth/lib/headerParsingLib.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "getNextLink",
    "memberof": "lib/headerParsingLib.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/headerParsingLib.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/headerParsingLib.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "Response A headers object returned from calling 'client.makeRequest' (response.headers)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A parsed version of the link to the subsequent page, or null if no such page exists."
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "lib/index.js",
    "content": "var Client = require(\"./client\");\nvar Account = require(\"./account\");\nvar Message = require(\"./message\");\nvar Call = require(\"./call\");\nvar Conference = require(\"./conference\");\nvar Bridge = require(\"./bridge\");\nvar Domain = require(\"./domain\");\nvar Endpoint = require(\"./endpoint\");\nvar ErrorType = require(\"./error\");\nvar NumberInfo = require(\"./numberInfo\");\nvar Media = require(\"./media\");\nvar Application = require(\"./application\");\nvar Recording = require(\"./recording\");\nvar AvailableNumber = require(\"./availableNumber\");\nvar PhoneNumber = require(\"./phoneNumber\");\nvar UnexpectedResponseError = require(\"./unexpectedResponseError\");\nvar BXMLResponse = require(\"./xml\");\n\n/**\n * Catapult API Client\n * @constructor\n * @param {Object} config - Client configuration parameters\n * @param {String} config.userId - Your Catapult user ID\n * @param {String} config.apiToken - Your Catapult API token\n * @param {String} config.apiSecret - Your Catapult API secret\n * @param {String} [config.baseUrl=https://api.catapult.inetwork.com] - The catapult base URL.\n * Configurable for using alternative Catapult environments.\n */\nvar CatapultClient = function(config) {\n  var client = new Client(config);\n  this.Account = new Account(client);\n  this.Media = new Media(client);\n  this.Message = new Message(client);\n  this.Call = new Call(client);\n  this.Conference = new Conference(client);\n  this.Bridge = new Bridge(client);\n  this.Domain = new Domain(client);\n  this.Endpoint = new Endpoint(client);\n  this.Error = new ErrorType(client);\n  this.NumberInfo = new NumberInfo(client);\n  this.Recording = new Recording(client);\n  this.Application = new Application(client);\n  this.AvailableNumber = new AvailableNumber(client);\n  this.PhoneNumber = new PhoneNumber(client);\n};\n\nCatapultClient.UnexpectedResponseError = UnexpectedResponseError;\nCatapultClient.BXMLResponse = BXMLResponse;\n\nmodule.exports = CatapultClient;\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "Client",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Client",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "Account",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Account",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "Message",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Message",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "Call",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Call",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "Conference",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Conference",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "Bridge",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Bridge",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "Domain",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Domain",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "Endpoint",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Endpoint",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "ErrorType",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~ErrorType",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "NumberInfo",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~NumberInfo",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "Media",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Media",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "Application",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Application",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "Recording",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Recording",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "AvailableNumber",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~AvailableNumber",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "PhoneNumber",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~PhoneNumber",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "UnexpectedResponseError",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~UnexpectedResponseError",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "BXMLResponse",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~BXMLResponse",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "CatapultClient",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~CatapultClient",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/index.js",
    "importStyle": null,
    "description": "Catapult API Client",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "Client configuration parameters"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "config.userId",
        "description": "Your Catapult user ID"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "config.apiToken",
        "description": "Your Catapult API token"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "config.apiSecret",
        "description": "Your Catapult API secret"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "https://api.catapult.inetwork.com",
        "defaultRaw": "https://api.catapult.inetwork.com",
        "name": "config.baseUrl",
        "description": "The catapult base URL.\nConfigurable for using alternative Catapult environments."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "lib/media.js",
    "content": "var Promise = require(\"bluebird\");\nvar stream = require(\"stream\");\nvar fs = require(\"fs\");\nvar request = require(\"request\");\n\nfunction getReadStreamData(data) {\n  return new Promise(function(resolve, reject) {\n    var s;\n    if (data instanceof Buffer) {\n      s = new stream.Readable();\n      s.push(data);\n      s.push(null);\n      return resolve({ stream: s, size: data.length });\n    }\n    if (typeof data === \"string\") {\n      return fs.stat(data, function(err, stat) {\n        if (err) {\n          return reject(err);\n        }\n        resolve({ stream: fs.createReadStream(data), size: stat.size });\n      });\n    }\n    if (data instanceof stream.Readable) {\n      // we have to detect stream size first\n      var size = 0;\n      s = new stream.Readable(); // new stream in memory to store data from original stream\n      data.on(\"data\", function(buffer) {\n        s.push(buffer);\n        size += buffer.length;\n      });\n      data.on(\"end\", function() {\n        s.push(null);\n        resolve({ stream: s, size: size });\n      });\n      data.resume();\n      return;\n    }\n    reject(new Error(\"data should be string, Buffer or readable stream\"));\n  });\n}\n\n/**\n * Media\n * @constructor\n */\nvar Media = function(client) {\n  /**\n\t * Upload a media file\n\t * @param {String} name The name of uploaded file.\n\t * @param {String|Buffer|Readable} data Data to upload. If data is string it should be path to file to upload.\n\t * @param {String} contentType Optional MIME type of uploaded data (default: application/octet-stream).\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t */\n  this.upload = function(name, data, contentType, callback) {\n    if (!callback && typeof contentType === \"function\") {\n      callback = contentType;\n      contentType = null;\n    }\n    return getReadStreamData(data)\n      .then(function(streamData) {\n        return new Promise(function(resolve, reject) {\n          var req = request(\n            client.createRequestOptions({\n              path: \"media/\" + encodeURIComponent(name),\n              method: \"PUT\"\n            })\n          );\n          req.headers[\"Content-Type\"] =\n            contentType || \"application/octet-stream\";\n          req.headers[\"Content-Length\"] = streamData.size;\n          req.on(\"error\", reject);\n          req.on(\"response\", resolve);\n          streamData.stream.pipe(req);\n        });\n      })\n      .then(client.handleResponse)\n      .asCallback(callback);\n  };\n\n  /**\n\t * Download a media file\n\t * @param {String} name The name of downloaded file.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {DownloadMediaFileResponse} A promise for the operation\n\t */\n  this.download = function(name, callback) {\n    return client\n      .makeRequest({\n        path: \"media/\" + encodeURIComponent(name),\n        method: \"GET\",\n        encoding: \"binary\"\n      })\n      .then(function(response) {\n        return {\n          contentType: response.headers[\"content-type\"],\n          content: response.body\n        };\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of your media files.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Array<MediaFileResponse>} A promise for the operation\n\t */\n  this.list = function(callback) {\n    return client\n      .makeRequest({\n        path: \"media\",\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Remove a media file\n\t * @param {String} name The name of file to remove.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t */\n  this.delete = function(name, callback) {\n    return client\n      .makeRequest({\n        path: \"media/\" + encodeURIComponent(name),\n        method: \"DELETE\"\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Media;\n/**\n * @class DownloadMediaFileResponse\n * @type {Object}\n * @property {String} contentType MIME type of downloaded file.\n * @property {String|Buffer|Readable} content Content of file.\n */\n\n/**\n * @class MediaFileResponse\n * @type {Object}\n * @property {String} mediaName name of media file.\n * @property {Number} contentLength Length of media file.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/media.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/media.js",
    "static": true,
    "longname": "lib/media.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/media.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "stream",
    "memberof": "lib/media.js",
    "static": true,
    "longname": "lib/media.js~stream",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/media.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "fs",
    "memberof": "lib/media.js",
    "static": true,
    "longname": "lib/media.js~fs",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/media.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "request",
    "memberof": "lib/media.js",
    "static": true,
    "longname": "lib/media.js~request",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/media.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "getReadStreamData",
    "memberof": "lib/media.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/media.js~getReadStreamData",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/media.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "Media",
    "memberof": "lib/media.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/media.js~Media",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/media.js",
    "importStyle": null,
    "description": "Media",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "lib/message.js",
    "content": "var getNextLink = require(\"./headerParsingLib\").getNextLink;\nvar Promise = require(\"bluebird\");\n\n/**\n * SMS or MMS Message\n * @constructor\n * @param {Object} client Catapult client\n */\nvar Message = function(client) {\n  /**\n\t * Send a new SMS or MMS message\n\t * @param  {Object} params Parameters for sending a new message.\n\t * @param  {String} params.text The message text to send\n\t * @param  {String} params.from The message sender\"s telephone number (or short code)\n\t * This must be a Catapult number that you own\n\t * @param  {String} [params.to] Message recipient telephone number (or short code)\n\t * @param  {Array} [params.media] Json array containing list of media urls to be sent as content for an mms.\n\t * Valid URLs are: https://api.catapult.inetwork.com/v1/users/<user-id>/media/\n\t * We also support media URLs that are external to Bandwidth API, http:// or https:// format:\n\t * Example: http://customer-web-site.com/file.jpg\n\t * @param  {String} [params.callbackUrl] The complete URL where the events related to the\n\t * outgoing message will be sent\n\t * @param  {Number} [params.callbackTimeout] Determine how long should the platform wait for\n\t * callbackUrl\"s response before timing out (milliseconds)\n\t * @param  {String} [params.fallbackUrl] The server URL used to send message events\n\t * if the request to callbackUrl fails\n\t * @param  {String} [params.tag] A string that will be included in the callback events of the message\n\t * @param  {String} [params.receiptRequested=none] Requested receipt option for outbound messages:\n\t * `none` `all` `error`\n\t * @param  {Function} [callback] A callback for the new message object\n\t * @returns {MessageResponse} A promise for the new message object\n\t * @example\n\t * client.Message.send({\n\t *   from : \"+19195551212\",\n\t *   to   : \"+19195551213\",\n\t *   text : \"Thank you for susbcribing to Unicorn Enterprises!\"\n\t * })\n\t * .then(function(message){\n\t *   console.log(message);\n\t * });\n\t * //{\n\t * //  from : \"+19195551212\",\n\t * //  to   : \"+19195551213\",\n\t * //  text : \"Thank you for susbcribing to Unicorn Enterprises!\",\n\t * //  id   : \"...\"\n\t * //}\n\t */\n  this.send = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"messages\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var message = params;\n        var location = response.headers.location;\n        message.id = location.substring(location.lastIndexOf(\"/\") + 1);\n        return message;\n      })\n      .asCallback(callback);\n  };\n  /**\n\t * Send multiple SMS or MMS messages with one API call.\n\t * This is much more performant than calling `send` multiple times.\n\t * @param  {Array} params An array of params objects, each of which\n\t * represents a single text message. The returned array will be in\n\t * the same order as this array, so you can iterate over it.\n\t * @param {String} params.text The message text to send\n\t * @param {String} params.from The message sender's telephone number (or short code)\n\t * This must be a Catapult number that you own.\n\t * @param  {String} params.to Message recipient telephone number (or short code)\n\t * @param  {Array} [params.media] Json array containing list of media urls to be sent as content for an mms.\n\t * Valid URLs are: https://api.catapult.inetwork.com/v1/users/<user-id>/media/\n\t * We also support media URLs that are external to Bandwidth API, http:// or https:// format:\n\t * Example: http://customer-web-site.com/file.jpg\n\t * @param  {String} [params.callbackUrl] The complete URL where the events related to the\n\t * outgoing message will be sent\n\t * @param  {Number} [params.callbackTimeout] Determine how long should the platform wait for\n\t * callbackUrl's response before timing out (milliseconds)\n\t * @param  {String} [params.fallbackUrl] The server URL used to send message events\n\t * if the request to callbackUrl fails\n\t * @param  {String} [params.tag] A string that will be included in the callback events of the message\n\t * @param  {String} [params.receiptRequested=none] Requested receipt option for outbound messages:\n\t * `none` `all` `error`\n\t * @param  {Function} [callback] A callback for the array of ExtendedMessageResponse\n\t * @returns {ExtendedMessageResponse} A promise for the array of ExtendedMessageResponses\n\t * @example\n\t * client.Message.sendMultiple({\n\t *   from : \"+19195551211\",\n\t *   to   : \"+19195551213\",\n\t *   text : \"Thank you for susbcribing to Unicorn Enterprises!\"\n\t * }, {\n\t *   from : \"+19195151212\",\n\t *   to   : \"+19195551214\",\n\t *   text : \"Thank you for susbcribing to Unicorn Enterprises!\"\n\t * })\n     * .then(function(messages){\n\t *   console.log(messages);\n\t * });\n\t * //[{\n\t * //  result : \"failed\",\n     * //  error: {\n     * //    category : \"authorization\",\n     * //    code     : \"number-access-denied\",\n     * //    message  : \"User ... does not have permission to use number +19195551211\",\n     * //    details  : [\n     * //      {\n     * //        name  : \"userId\",\n     * //        value : \"...\"\n     * //      },\n     * //      {\n     * //        name  : \"number\",\n     * //        value : \"+19195551211\"\n     * //      }\n     * //    ],\n     * //  },\n     * //  message : {\n\t * //    from : \"+19195551211\",\n\t * //    to   : \"+19195551213\",\n\t * //    text : \"Thank you for susbcribing to Unicorn Enterprises!\"\n\t * //  }\n\t * //},{\n\t * //  result  : \"accepted\",\n     * //  message : {\n     * //    from : \"+19195551212\",\n     * //    to   : \"+19195551214\",\n     * //    text : \"Thank you for susbcribing to Unicorn Enterprises!\",\n     * //    id   : \"...\"\n     * //  }\n     * //}]\n\t */\n  this.sendMultiple = function(array, callback) {\n    return client\n      .makeRequest({\n        path: \"messages\",\n        method: \"POST\",\n        body: array\n      })\n      .then(function(response) {\n        var messages = [];\n        // using C-style loops to guarantee order\n        for (var k = 0; k < array.length; k++) {\n          var message = array[k];\n          if (response.body[k].result === \"accepted\") {\n            var location = response.body[k].location;\n            message.id = location.substring(location.lastIndexOf(\"/\") + 1);\n            messages.push({\n              result: \"accepted\",\n              message: message\n            });\n          } else {\n            messages.push({\n              result: \"failed\",\n              error: response.body[k].error,\n              message: message\n            });\n          }\n        }\n        return messages;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get a message\n\t * @param  {String} messageId The ID of the message to get\n\t * @param  {Function} [callback] A callback for the message\n\t * @return {MessageResponse} A promise for the message\n\t */\n  this.get = function(messageId, callback) {\n    return client\n      .makeRequest({\n        path: \"messages/\" + messageId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of messages\n\t * @param  {Object} params Search parameters\n\t * @param  {String} [params.from] The phone number to filter the messages that\n\t * came from (must be in E.164 format, like +19195551212).\n\t * @param  {String} [params.to] The phone number to filter the messages that was\n\t * sent to (must be in E.164 format, like +19195551212).\n\t * @param  {String} [params.fromDateTime] The starting date time to filter the\n\t * messages (must be in yyyy-MM-dd hh:mm:ss format, like 2014-05-25 12:00:00. You can suppress parts of\n\t * the date or time, like 2014-05-25, but the missing parameters will be filled with zeros).\n\t * @param  {String} [params.toDateTime] The ending date time to filter the messages\n\t * (must be in yyyy-MM-dd hh:mm:ss format, like 2014-05-25 12:00:00. You can suppress parts of the date\n\t * or time, like 2014-05-25, but the missing parameters will be filled with zeros)\n\t * @param  {Number} [params.size] Used for pagination to indicate the size of each page requested \\\n\t * for querying a list of messages. If no value is specified the default value is 25. (Maximum value 1000)\n\t * @param  {String} [params.direction] \tFilter by direction of message, in - a message that came from the\n\t * telephone network to one of your numbers (an \"inbound\" message) or out - a message that was sent from\n\t * one of your numbers to the telephone network (an \"outbound\" message)\n\t * @param  {String} [params.state] The message state to filter. Values are: received, queued, sending, sent, error\n\t * @param  {String} [params.deliveryState] The message delivery state to filter.\n\t * Values are waiting, delivered, not-delivered\n\t * @param  {String} [params.sortOrder] How to sort the messages. Values are asc or desc\n\t * If no value is specified the default value is asc\n\t * @param  {Function} [callback] A callback for the list of messages\n\t * @return {MessageListResponse} A promise for the list of messages\n\t * @example\n\t * //Download the node sdk from ap.bandwidth.com/docs/helper-libraries/node-js\n\t * //API credentials which can be found on your account page at https://catapult.inetwork.com/pages/login.jsf\n\t * var userId = 'u-userid';  //{user_id}\n\t * var token = 't-token'; //{token}\n\t * var secret = 'secret'; //{secret}\n\t *\n\t * var Bandwidth = require('node-bandwidth');\n\t *\n\t * var client = new Bandwidth({\n\t * \tuserId: userId,\n\t * \tapiToken: token,\n\t * \tapiSecret: secret\n\t * });\n\t *\n\t * client.Message.list()\n\t * .then(function (response) {\n\t * \tconsole.log(response.messages);\n\t * \tif(response.hasNextPage) {\n\t * \t\treturn response.getNextPage();\n\t * \t}\n\t * \telse {\n\t * \t\treturn {messages: []};\n\t * \t}\n\t * })\n\t * .then(function(response) {\n\t * \tconsole.log(response.messages);\n\t * });\n\t */\n  this.list = function(params, callback) {\n    var self = this;\n    return client\n      .makeRequest({\n        path: \"messages\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        var messageListResponse = {\n          messages: response.body,\n          hasNextPage: false,\n          getNextPage: function(nextCallback) {\n            return Promise.reject(\"Next page does not exist.\").asCallback(\n              nextCallback\n            );\n          }\n        };\n        var nextLink = getNextLink(response.headers);\n        if (nextLink) {\n          messageListResponse.hasNextPage = true;\n          messageListResponse.getNextPage = function(nextCallback) {\n            return self.list(nextLink, nextCallback);\n          };\n        }\n        return messageListResponse;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Message;\n\n/**\n * @class MessageListResponse\n * @type {Object}\n * @property {Array.<MessageResponse>} messages Array of messages\n * @property {function} getNextPage Calls the next page function\n * @property {boolean} hasNextPage True/False flag for next\n */\n\n/**\n * @class ExtendedMessageResponse\n * @type Object\n * @property {String} result Either \"accepted\" or \"failed\".\n * @property {MessageResponse} The message. Will consist of the params\n * queried with, if the query failed, or the complete message response,\n * if the message was accepted.\n * @property {MessageError} Defined only if result is \"failed\".\n */\n\n/**\n * @class MessageError\n * @type Object\n * @property {String} category The type of error (e.g. \"authorization\").\n * @property {String} code The exact error string provided by the API.\n * @property {String} message A human-readable error message.\n * @property {Object} details Additional details on the error.\n */\n\n/**\n * @class MessageResponse\n * @type Object\n * @property {String} id The unique ID of the message.\n * @property {String} from The message sender's telephone number (or short code).\n * @property {String} to Message recipient telephone number (or short code).\n * @property {String} direction Direction of message, in - a message that came from\n * the telephone network to one of your numbers (an \"inbound\" message) or out - a message\n * that was sent from one of your numbers to the telephone network (an \"outbound\" message)\n * @property {String} text The message contents.\n * @property {Array} media Json array containing list of media urls to be sent as content for an mms.\n * @property {String} state Message state, values are received, queued, sending, sent, error\n * @property {String} time The time the message resource was created (UTC, follows the ISO 8601 format).\n * @property {String} callbackUrl The complete URL where the events related to the outgoing message will be sent.\n * @property {Number} callbackTimeout Determine how long should the platform wait for callbackUrl's response\n * before timing out. (milliseconds)\n * @property {String} fallbackUrl The server URL used to send message events if the request to callbackUrl fails.\n * @property {Number} size Used for pagination to indicate the size of each page requested for\n * querying a list of messages.\n * If no value is specified the default value is 25. (Maximum value 1000)\n * @property {String} tag A string that will be included in the callback events of the message.\n * @property {String} receiptRequested Requested receipt option for outbound messages: none, all, error\n * Default is none.\n * @property {String} deliveryState One of the message delivery states: waiting, delivered, not-delivered.\n * @property {Number} deliveryCode Numeric value of deliver code.\n * @property {String} deliveryDescription Message delivery description for the respective delivery code.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "getNextLink",
    "memberof": "lib/message.js",
    "static": true,
    "longname": "lib/message.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/message.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/message.js",
    "static": true,
    "longname": "lib/message.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/message.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "Message",
    "memberof": "lib/message.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/message.js~Message",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/message.js",
    "importStyle": null,
    "description": "SMS or MMS Message",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "Catapult client"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "lib/numberInfo.js",
    "content": "/**\n * NumberInfo\n * @constructor\n */\nvar NumberInfo = function(client) {\n  /**\n\t * Gets information about a number.\n\t * @param  {String} number The ID of the numberInfo to get\n\t * @param  {Function} [callback] A callback with the number information\n\t * @return {NumberInfoResponse} A promise for the number information\n\t * @example\n\t * // Promise\n\t * client.NumberInfo.get(\"+1234567890\").then(function(info){});\n\t *\n\t * // Callback\n\t * client.NumberInfo.get(\"+1234567890\", function(err, info){});\n\t */\n  this.get = function(number, callback) {\n    return client\n      .makeRequest({\n        pathWithoutUser: true,\n        path: \"phoneNumbers/numberInfo/\" + encodeURIComponent(number),\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = NumberInfo;\n\n/**\n * @class NumberInfoResponse\n * @type {Object}\n * @property {String} name The Caller ID name information.\n * @property {String} number Phone number in  E164 format.\n * @property {String} created The time this Caller ID information was first queried (UTC).\n * @property {String} updated The time this Caller ID information was last updated (UTC).\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/numberInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "NumberInfo",
    "memberof": "lib/numberInfo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/numberInfo.js~NumberInfo",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/numberInfo.js",
    "importStyle": null,
    "description": "NumberInfo",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "lib/phoneNumber.js",
    "content": "var getNextLink = require(\"./headerParsingLib\").getNextLink;\nvar Promise = require(\"bluebird\");\n\n/**\n * Phone numbers\n * @constructor\n */\nvar PhoneNumber = function(client) {\n  /**\n\t * Allocates a number\n\t * @param {Object} params Parameters for allocating a number\n\t * @param {String} params.number A number to allocate.\n\t * @param {String} [params.name] A name you choose for this number.\n\t * @param {String} [params.applicationId] The unique id of an Application you want\n\t * to associate with this number.\n\t * @param {String} [params.fallbackNumber] Number to transfer an incoming call when\n\t * the callback/fallback events can't be delivered.\n\t * @param {Function} [callback] Callback with the newly created number\n\t * @return {PhoneNumberResponse} A promise for the newly created number\n\t * @example\n\t *\n\t * //Allocate number +1234567980\n\t *\n\t * // Promise\n\t * client.PhoneNumber.create({ number : \"+1234567890\" }).then(function(number){});\n\t *\n\t * // Callback\n\t * client.PhoneNumber.create({ number : \"+1234567890\" }, function(err, number){});\n\t */\n  this.create = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"phoneNumbers\",\n        method: \"POST\",\n        body: params\n      })\n      .then(function(response) {\n        var phoneNumber = params;\n        var location = response.headers.location;\n        phoneNumber.id = location.substring(location.lastIndexOf(\"/\") + 1);\n        return phoneNumber;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets information about a phoneNumber.\n\t * @param  {String} phoneNumberOrId The ID of the number or number in format E.164\n\t * (like +1234567980) to get\n\t * @param  {Function} callback A callback with the call information\n\t * @return {PhoneNumberResponse} A promise for the call information\n\t * @example\n\t * // Promise\n\t * client.PhoneNumber.get(numberId).then(function(number){});\n\t * // or\n\t * client.PhoneNumber.get(\"+1234567890\").then(function(number){});\n\t *\n\t * // Callback\n\t * client.PhoneNumber.get(numberId, function(err, number){});\n\t * // or\n\t * client.PhoneNumber.get(\"+1234567890\", function(err, number){});\n\t * */\n  this.get = function(phoneNumberOrId, callback) {\n    return client\n      .makeRequest({\n        path: \"phoneNumbers/\" + encodeURIComponent(phoneNumberOrId),\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Gets a list of allocated numbers.\n\t * @param {Object} params Query parameters for listing numbers\n\t * @param {Number} [params.size=25] Used for pagination to indicate the size of each page requested\n\t * for querying a list numbers. If no value is specified the default value is 25 (maximum value 1000).\n\t * @param {String} [params.applicationId] Used to filter the retrieved list of numbers by\n\t * an associated application ID\n\t * @param {String} [params.state] Used to filter the retrieved list of numbers by\n\t * a US state.\n\t * @param {String} [params.name] Used to filter the retrieved list of numbers by name\n\t * @param {String} [params.city] Used to filter the retrieved list of numbers by city name\n\t * @param {String} [params.numberState] Used to filter the retrieved list of numbers by number state\n\t * @param {Function} callback A callback with the list of numbers\n\t * @return {Array.<PhoneNumberResponse>} A promise for the list of phone numbers\n\t * @example\n\t * // Promise\n\t * client.PhoneNumber.list({size: 1000}).then(function(numbersResponse){});\n\t *\n\t * // Callback\n\t * client.PhoneNumber.list({size: 1000}, function(err, numbersResponse){});\n\t */\n  this.list = function(params, callback) {\n    var self = this;\n    return client\n      .makeRequest({\n        path: \"phoneNumbers\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        var phoneNumberListResponse = {\n          phoneNumbers: response.body,\n          hasNextPage: false,\n          getNextPage: function(nextCallback) {\n            return Promise.reject(\"Next page does not exist.\").asCallback(\n              nextCallback\n            );\n          }\n        };\n        var nextLink = getNextLink(response.headers);\n        if (nextLink) {\n          phoneNumberListResponse.hasNextPage = true;\n          phoneNumberListResponse.getNextPage = function(nextCallback) {\n            return self.list(nextLink, nextCallback);\n          };\n        }\n        return phoneNumberListResponse;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Update the number\n\t * @param  {String} phoneNumberId The ID of the number\n\t * @param {Object} params Changed parameters of the number\n\t * @param {String} params.applicationId The unique id of an Application\n\t * resource you want to associate with this number for incoming calls and messages.\n\t * @param {String} params.name A name you choose for this number.\n\t * @param {String} params.fallbackNumber Number to transfer an incoming call when the\n\t * callback/fallback events can't be delivered.\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * // Promise\n\t * client.PhoneNumber.update(numberId, {name: \"Another Name\"}).then(function(){});\n\t *\n\t * // Callback\n\t * client.PhoneNumber.update(numberId, {name: \"Another Name\"}, function(err){});\n\t */\n  this.update = function(phoneNumberId, params, callback) {\n    return client\n      .makeRequest({\n        path: \"phoneNumbers/\" + phoneNumberId,\n        method: \"POST\",\n        body: params\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Remove the number\n\t * @param  {String} phoneNumberId The ID of the number\n\t * @param {Function} [callback] Callback for the operation\n\t * @return {Promise} A promise for the operation\n\t * @example\n\t * // Promise\n\t * client.PhoneNumber.delete(numberId).then(function(){});\n\t *\n\t * // Callback\n\t * client.PhoneNumber.delete(numberId, function(err){});\n\t */\n  this.delete = function(phoneNumberId, callback) {\n    return client\n      .makeRequest({\n        path: \"phoneNumbers/\" + phoneNumberId,\n        method: \"DELETE\"\n      })\n      .then(function() {\n        return;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = PhoneNumber;\n\n/**\n * @class PhoneNumberResponse\n * @type {Object}\n * @property {String} id The unique ID of the number.\n * @property {String} state Number state\n * @property {String} name Number name\n * @property {String} number Number  in E.164 format.\n * @property {String} nationalNumber Number in natinal friendly format (like  (555) 5555-5555).\n * @property {String} city Number city.\n * @property {String} state Number state.\n * @property {String} applicationId The unique id of an linked Application.\n * @property {String} fallbackNumber Number to transfer an incoming call\n * when the callback/fallback events can't be delivered.\n * @property {String} price The monthly price for this number.\n * @property {String} numberState The phone number state, values are `enabled` or `released`\n * @property {String} createdTime Date when the number was created.\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/phoneNumber.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "getNextLink",
    "memberof": "lib/phoneNumber.js",
    "static": true,
    "longname": "lib/phoneNumber.js~getNextLink",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/phoneNumber.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "Promise",
    "memberof": "lib/phoneNumber.js",
    "static": true,
    "longname": "lib/phoneNumber.js~Promise",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/phoneNumber.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "PhoneNumber",
    "memberof": "lib/phoneNumber.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/phoneNumber.js~PhoneNumber",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/phoneNumber.js",
    "importStyle": null,
    "description": "Phone numbers",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "lib/recording.js",
    "content": "/**\n * Retrieve information about call recordings\n * @constructor\n */\nvar Recording = function(client) {\n  /**\n\t * Get a recording\n\t * @param  {String} recordingId The ID of the recording to retrieve\n\t * @param  {Function} [callback] Callback with the recording object\n\t * @return {RecordingResponse} A promise for the recording object\n\t */\n  this.get = function(recordingId, callback) {\n    return client\n      .makeRequest({\n        path: \"recordings/\" + recordingId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get a list of recordings\n\t * @param  {Object} params [description]\n\t * @param  {Function} [callback] Callback with the recording objects\n\t * @return {RecordingResponse} A promise for the recording objects\n\t */\n  this.list = function(params, callback) {\n    return client\n      .makeRequest({\n        path: \"recordings\",\n        method: \"GET\",\n        qs: params\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Create a transcription\n\t * @param  {String} recordingId The ID of the recording\n\t * @param  {Function} [callback] Callback with the create transcription\n\t * @return {TranscriptionResponse} A promise for the created transcription\n\t * @example\n\t *\n\t * // Promise\n\t * client.Recording.createTranscription(recordingId).then(function(transcription){});\n\t *\n\t * // Callback\n\t * client.Recording.createTranscription(recordingId, function(err, transcription){});\n\t */\n  this.createTranscription = function(recordingId, callback) {\n    return client\n      .makeRequest({\n        path: \"recordings/\" + recordingId + \"/transcriptions\",\n        method: \"POST\",\n        body: {}\n      })\n      .then(function(response) {\n        var location = response.headers.location;\n        return { id: location.substring(location.lastIndexOf(\"/\") + 1) };\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get information about the transcription\n\t * @param  {String} recordingId The ID of the recording\n\t * @param  {String} transcriptionId The ID of the transcription\n\t * @param  {Function} [callback] Callback with the  transcription\n\t * @return {TranscriptionResponse} A promise for the transcription\n\t * @example\n\t *\n\t * // Promise\n\t * client.Recording.getTranscription(recordingId, transcriptionId).then(function(transcription){});\n\t *\n\t * // Callback\n\t * client.Recording.getTranscription(recordingId, transcriptionId, function(err, transcription){});\n\t */\n  this.getTranscription = function(recordingId, transcriptionId, callback) {\n    return client\n      .makeRequest({\n        path:\n          \"recordings/\" + recordingId + \"/transcriptions/\" + transcriptionId,\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n\n  /**\n\t * Get list of all transcriptions for recording\n\t * @param  {String} recordingId The ID of the recording\n\t * @param  {Function} [callback] Callback with the  transcriptions\n\t * @return {TranscriptionResponse} A promise for the transcriptions\n\t * @example\n\t *\n\t * // Promise\n\t * client.Recording.getTranscriptions(recordingId).then(function(transcriptions){});\n\t *\n\t * // Callback\n\t * client.Recording.getTranscriptions(recordingId, function(err, transcriptions){});\n\t */\n  this.getTranscriptions = function(recordingId, callback) {\n    return client\n      .makeRequest({\n        path: \"recordings/\" + recordingId + \"/transcriptions\",\n        method: \"GET\"\n      })\n      .then(function(response) {\n        return response.body;\n      })\n      .asCallback(callback);\n  };\n};\n\nmodule.exports = Recording;\n/**\n * @class RecordingResponse\n * @type {Object}\n * @property {String} id The unique ID of the recording.\n * @property {String} startTime Date/time when the recording started.\n * @property {String} endTime Date/time when the recording ended.\n * @property {String} media The complete URL to the media resource this\n * recording is associated with.\n * @property {String} call The complete URL to the call resource\n * this recording is associated with.\n * @property {String} state The state of the recording,\n */\n/**\n * @class TranscriptionResponse\n * @type {Object}\n * @property {String} id The unique ID of the transcription.\n * @property {String} text The transcribed text (only first 1000 characters).\n * @property {Number} chargeableDuration The seconds between activeTime and endTime\n * for the recording; this is the time that is going to be used to charge the resource.\n * @property {Number} textSize The size of the transcribed text.\n * @property {String} state The state of the transcription,\n * @property {String} textUrl A url to the full text,\n */\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/recording.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "Recording",
    "memberof": "lib/recording.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/recording.js~Recording",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/recording.js",
    "importStyle": null,
    "description": "Retrieve information about call recordings",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "lib/unexpectedResponseError.js",
    "content": "var util = require(\"util\");\n\nvar UnexpectedResponseError = function(message, statusCode) {\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n  this.statusCode = statusCode;\n};\n\nutil.inherits(UnexpectedResponseError, Error);\n\nmodule.exports = UnexpectedResponseError;\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/unexpectedResponseError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/unexpectedResponseError.js",
    "static": true,
    "longname": "lib/unexpectedResponseError.js~util",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/unexpectedResponseError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "UnexpectedResponseError",
    "memberof": "lib/unexpectedResponseError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/unexpectedResponseError.js~UnexpectedResponseError",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/unexpectedResponseError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "statusCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "lib/xml.js",
    "content": "var builder = require(\"xmlbuilder\");\n/**\n * Creates a new BXML Response object.\n * Call .toString() on this method to obtain the BXML string.\n * @constructor\n */\n\nvar BXMLResponse = function() {\n  this.xml = builder.create(\"Response\", {\n    encoding: \"UTF-8\"\n  });\n  /**\n\t * Create a SpeakSentence tag.\n\t * @param {string} sentence The sentence to have the voice say.\n\t * @param {Object} params The parameters for the API SpeakSentence call.\n\t * @param {string} [params.gender=\"female\"] The gender of the speaker.\n\t * @param {string} [params.locale=\"en_US\"] The locale for the speaker.\n\t * @param {string} [params.voice=\"julie\"] The voice for the speaker.\n\t * @return {BXMLResponse} this, for chaining\n\t * @example\n\t * //This app will speak two sentences.\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.speakSentence(\"Thanks for calling Unicorn Enterprises.\")\n\t *      .speakSentence(\"Someone will be with you shortly.\");\n\t * myApp = myApp.toString();\n\t */\n\n  this.speakSentence = function(sentence, params) {\n    params = params || {};\n    params.locale = params.locale || \"en_US\";\n    params.gender = params.gender || \"female\";\n    params.voice = params.voice || \"julie\";\n    this.xml = this.xml.ele(\"SpeakSentence\", params, sentence).up();\n    return this;\n  };\n\n  /**\n\t * Create a Gather call, which collects pressed numbers.\n\t * @param {Object} params The parameters for the Gather verb.\n\t * @param {string} params.requestURL Relative or absolute URL to send events to and request new BXML.\n\t * @param {number} [params.requestURLTimeout=3000] Time to wait for requestURL response in ms.\n\t * @param {string} [params.terminatingDigits=#] Digits to stop gather.\n\t * @param {number} [params.maxDigits=128] Maximum number of digits to collect.\n\t * @param {number} [params.integerDigitTimeout=5] Timeout between digits.\n\t * @param {boolean} [params.bargeable=true] Boolean indicating if audio should stop when digit is pressed.\n\t * @param {function} [callback] A function containing the verbs to be nested inside the Gather call.\n\t * @return {BXMLResponse} this, for chaining\n\t * @example\n\t * //This app will collect a PIN code.\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.gather({\n\t *     requestUrl : 'http://unico.rn/pinApiEndpoint',\n\t *     maxDigits  : 4\n\t * }, function () {\n\t *     this.speakSentence(\"Please enter your PIN code.\")\n\t * });\n\t * myApp = myApp.toString();\n\t */\n  this.gather = function(params, callback) {\n    this.xml = this.xml.ele(\"Gather\", params);\n    callback = callback || function() {};\n    callback.call(this);\n    this.xml = this.xml.up();\n    return this;\n  };\n\n  /**\n\t * @return {string} A string representation of the object's BXML.\n\t */\n  this.toString = function() {\n    return this.xml\n      .end({\n        pretty: true,\n        indent: \"     \"\n      })\n      .toString();\n  };\n\n  /**\n\t * Create a new call to another phone number.\n\t * @param {Object} params The parameters for the Call verb.\n\t * @param {string} params.from Defines the number the call will be created from.\n\t * @param {string} params.to Defines the number the call will be made to.\n\t * @param {string} [params.requestUrl] URL to send event\n\t * @param {number} [params.timeout] The timeout, in seconds, for the call to answer\n\t * @param {number} [params.requestUrlTimeout] Timeout, in ms, to request new BXML document\n\t * @param {function} [callback] A function containing the verbs to be nested inside the Call verb\n\t * @return {BXMLResponse} this, for chaining\n\t * @example\n\t * //This app will create a call and tell the callee they are being called.\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.call({\n\t *      from : '+19195551212',\n\t *      to   : '+19195551213'\n\t * }, function () {\n\t *      this.speakSentence(\"You are recieving a call from 919 555 1212.\");\n\t * });\n\t * myApp = myApp.toString();\n\t */\n  this.call = function(params, callback) {\n    this.xml = this.xml.ele(\"Call\", params);\n    callback = callback || function() {};\n    callback.call(this);\n    this.xml = this.xml.up();\n    return this;\n  };\n\n  /**\n\t * Create a new conference call.\n\t * @param {Object} params The parameters for the Conference verb.\n\t * @param {string} params.from The phone number that will host the conference.\n\t * @param {string} [params.statusCallbackUrl] URL to which conference callbacks will be POSTed\n\t * @param {boolean} [params.joinTone=true] Determines whether or not a tone is played on join.\n\t * @param {boolean} [params.leavingTone=true] Determines whether or not a tone is played on leave.\n\t * @param {string} [params.tag] A string that will be included in the callback events of the conference.\n\t * @param {boolean} [params.mute=false] Determines whether or not the member will join muted.\n\t * @param {boolean} [params.hold=false] Determines whether or not the member will join on hold.\n\t * @return {BXMLResponse} this, for chaining.\n\t * @example\n\t * //This app will create a conference call. Callers to (919) 555 1212 will be patched in.\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.conference({\n\t *     from : '+19195551212'\n\t * });\n\t * myApp = myApp.toString();\n\t */\n\n  this.conference = function(params) {\n    params.joinTone = params.joinTone || true;\n    params.leavingTone = params.leavingTone || true;\n    this.xml = this.xml.ele(\"Conference\", params).up();\n    return this;\n  };\n\n  /**\n\t * Terminates an outgoing call.\n\t * @return {BXMLResponse} this, for chaining.\n\t * @example\n\t * //This app will speak two sentences and hang up.\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.speakSentence(\"Thanks for calling Unicorn Enterprises.\")\n\t *      .speakSentence(\"We have been acquired by BigCorp.\")\n\t *      .hangup();\n\t * myApp = myApp.toString();\n\t */\n\n  this.hangup = function() {\n    this.xml = this.xml.ele(\"Hangup\").up();\n    return this;\n  };\n\n  /**\n\t * Plays an audio file located at a specified URL.\n\t * @param {string} audio The URL of the audio to be played.\n\t * @return {BXMLResponse} this, for chaining.\n\t * @example\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.speakSentence(\"Thanks for calling Unicorn Enterprises.\")\n\t *      .speakSentence(\"All agents are currently busy playing ping-pong. Please hold.\")\n\t *      .playAudio(\"http://unico.rn/assets/postglamspeedfolk.mp3\");\n\t * myApp = myApp.toString();\n\t */\n\n  this.playAudio = function(audio) {\n    this.xml = this.xml.ele(\"PlayAudio\", {}, audio).up();\n    return this;\n  };\n  /**\n\t * Records the call. At end of call, a call recording event is sent to the callback URL.\n\t * @param {Object} params The parameters for the Record verb.\n\t * @param {string} [params.requestUrl] URL to send event and request new BXML.\n\t * @param {number} [params.requestUrlTimeout] Timeout, in ms, to wait for requestUrl response.\n\t * @param {string} [params.fileFormat] The format in which to save the recording - mp3 or wav.\n\t * @param {string} [params.terminatingDigits] One or more digits that will finish the recording.\n\t * @param {number} [params.maxDuration=300] Time, in seconds, for max duration. Up to 3600 sec (1hr)\n\t * @param {boolean} [params.transcribe=false] Boolean to indicate transcription of the recording.\n\t * @param {string} [params.transcribeCallbackUrl] URL to send transcribed event.\n\t * @return {BXMLResponse} this, for chaining.\n\t * @example\n\t * //This app will record a message.\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.speakSentence(\"Thanks for calling Unicorn Enterprises.\")\n\t *      .speakSentence(\"Your call may be recorded for quality assurance.\")\n\t *      .record({\n\t *            requestUrl : \"http://unico.rn/recordsGetPutHere\",\n\t *            fileFormat : \"mp3\"\n\t *\t\t});\n\t */\n\n  this.record = function(params) {\n    this.xml = this.xml.ele(\"Record\", params).up();\n    return this;\n  };\n\n  /**\n\t * Redirects the current execution to run XML at another URL.\n\t * @param {Object} params The parameters for the Redirect verb.\n\t * @param {string} params.requestUrl The URL to send event to and request new BXML.\n\t * @param {number} params.requestUrlTimeout Timeout, in ms, to wait for requestUrl to respond.\n\t * @return {BXMLResponse} this, for chaining.\n\t */\n\n  this.redirect = function(params) {\n    this.xml = this.xml.ele(\"Redirect\", params).up();\n    return this;\n  };\n  /**\n\t * Sends a text message.\n\t * @param {string} message The message to send.\n\t * @param {Object} params The parameters for the SendMessage verb\n\t * @param {string} params.from The number to send the message from.\n\t * @param {string} params.to The number to send the message to.\n\t * @param {string} [params.requestUrl] The URL to send events to and request new BXML from.\n\t * @param {number} [params.requestUrlTimeout=30] Timeout, in seconds, to wait for requestUrl to respond.\n\t * @param {string} [params.statusCallbackUrl] URL to send the message callback to.\n\t * @return {BXMLResponse} this, for chaining.\n\t * @example\n\t * // This app will text a customer.\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.sendMessage(\"Get $20 off your next purchase!\", {\n\t * \t\tfrom : \"+19195551212\",\n\t *\t\tto   : \"+19195551213\"\n\t * });\n\t */\n  this.sendMessage = function(message, params) {\n    this.xml = this.xml.ele(\"SendMessage\", params, message).up();\n    return this;\n  };\n\n  /**\n\t * Used to direct call flow for multiple transfer\n\t * @param  {String} phoneNumber The phone number to try for a transfer\n\t * @return {BXMLResponse} this, for chaining.\n\t */\n  this.phoneNumber = function(phoneNumber) {\n    this.xml = this.xml.ele(\"PhoneNumber\", phoneNumber).up();\n    return this;\n  };\n\n  /**\n\t * Transfers the call to another number.\n\t * @param {Object} params The parameters for the Transfer verb.\n\t * @param {string} params.transferTo The number to transfer the call to.\n\t * @param {string} [params.transferCallerId] The caller ID to use on the transferred call.\n\t * @param {number} [params.callTimeout] The timeout, in seconds, for the call to be answered.\n\t * @param {string} [params.requestUrl] URL to send event to and request new BXML from.\n\t * @param {number} [params.requestUrlTimeout] Timeout, in msec, to wait for requestUrl to respond.\n\t * @param {string} [params.tag] A string that will be included in the callback events.\n\t * @param {function} callback The verbs to nest inside the Transfer verb.\n\t * @return {BXMLResponse} this, for chaining.\n\t * @example\n\t * // This app will transfer a call.\n\t * var Bandwidth = require(\"node-bandwidth\");\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.speakSentence(\"Your call is somewhat important to us.\")\n\t *\t\t.speakSentence(\"Please wait while it is being transferred.\")\n\t *\t\t.transfer({\n\t * \t\t\ttransferTo: \"+19195551213\"\n\t *\t\t}, function (){\n\t * \t\t\tthis.speakSentence(\"A call is being transferred to you from Customer Service.\");\n\t *\t\t});\n\t * @example\n\t * // Multiple transfer with speak senetence - Try 3 numbers\n\t * var myApp = new Bandwidth.BXMLResponse();\n\t * myApp.speakSentence(\"Your call is somewhat important to us.\")\n\t * \t.speakSentence(\"Please wait while it is being transferred.\")\n\t * \t.transfer({}, function (){\n\t * \t\tthis.phoneNumber(\"+13334445555\");\n\t * \t\tthis.phoneNumber(\"+13334445556\");\n\t * \t\tthis.phoneNumber(\"+13334445557\");\n\t * \t\tthis.speakSentence(\"A call is being transferred to you from Customer Service.\");\n\t * \t});\nconsole.log(myApp.toString());\n\t */\n  this.transfer = function(params, callback) {\n    this.xml = this.xml.ele(\"Transfer\", params);\n    callback = callback || function() {};\n    callback.call(this);\n    this.xml = this.xml.up();\n    return this;\n  };\n};\n\nmodule.exports = BXMLResponse;\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/lib/xml.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "builder",
    "memberof": "lib/xml.js",
    "static": true,
    "longname": "lib/xml.js~builder",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/xml.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "BXMLResponse",
    "memberof": "lib/xml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/xml.js~BXMLResponse",
    "access": "public",
    "export": false,
    "importPath": "node-bandwidth/lib/xml.js",
    "importStyle": null,
    "description": "Creates a new BXML Response object.\nCall .toString() on this method to obtain the BXML string.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# node-bandwidth\n[![npm version](https://badge.fury.io/js/node-bandwidth.svg)](https://badge.fury.io/js/node-bandwidth)\n[![Build Status](https://travis-ci.org/bandwidthcom/node-bandwidth.svg?branch=master)](https://travis-ci.org/bandwidthcom/node-bandwidth)\n[![dependencies](https://david-dm.org/bandwidthcom/node-bandwidth.svg)](https://david-dm.org/bandwidthcom/node-bandwidth)\n[![Known Vulnerabilities](https://snyk.io/package/npm/node-bandwidth/badge.svg)](https://snyk.io/package/npm/node-bandwidth)\n\nA Node.js client library for the [Bandwidth Application Platform](http://bandwidth.com/products/application-platform?utm_medium=social&utm_source=github&utm_campaign=dtolb&utm_content=_)\n\nThe current version is v2, released 5 August, 2016. Version 1.3.3 is available  [here](https://github.com/bandwidthcom/node-bandwidth/tree/v1.3.3).\n\n\n## [Full API Reference](http://bwdemos.com/node-bandwidth/index.html)\nThe Full API Reference is available either as an interactive site or as a single Markdown file:\n\n* [Site](http://bwdemos.com/node-bandwidth/index.html).\n* [Single MD file](https://github.com/bandwidthcom/node-bandwidth/blob/master/docs/api.md)\n\n\n## Installing the SDK\n\n`node-bandwidth` is available on NPM:\n\n\tnpm install --save node-bandwidth\n\n## Supported Versions\n`node-bandwidth` should work on all versions of node newer than `0.10.*`. However, due to the rapid development in the Node and npm environment, we can only provide _support_ on [LTS versions of Node](https://github.com/nodejs/LTS)\n\n| Version                        | Support Level   |\n|:-------------------------------|:----------------|\n| <0.10.*                        | Unsupported     |\n| 0.10.*                         | End-of-Life (2016-10-31) |\n| 0.12.*                         | End-of-Life (2016-10-31) |\n| >=4.0 <4.2                     | Unsupported     |\n| >=4.2 <5.* (Node v4 argon LTS) | Supported       |\n| 5.*                            | Unsupported     |\n| _6.9.4 (Node v6 Boron LTS)_    | **Recommended** |\n| 7.*                            | Unsupported     |\n\n## Client initialization\n\nAll interaction with the API is done through a `client` Object. The client constructor takes an Object containing configuration options. The following options are supported:\n\n| Field name  | Description            | Default value                       | Required |\n|:------------|:-----------------------|:------------------------------------|:---------|\n| `userId`    | Your Bandwidth user ID | `undefined`                         | Yes      |\n| `apiToken`  | Your API token         | `undefined`                         | Yes      |\n| `apiSecret` | Your API secret        | `undefined`                         | Yes      |\n| `baseUrl`   | The Bandwidth API URL  | `https://api.catapult.inetwork.com` | No       |\n\nTo initialize the client object, provide your API credentials which can be found on your account page in [the portal](https://catapult.inetwork.com/pages/catapult.jsf).\n\n```javascript\nvar Bandwidth = require(\"node-bandwidth\");\n\nvar client = new Bandwidth({\n\tuserId    : \"YOUR_USER_ID\", // <-- note, this is not the same as the username you used to login to the portal\n\tapiToken  : \"YOUR_API_TOKEN\",\n\tapiSecret : \"YOUR_API_SECRET\"\n});\n```\n\nYour `client` object is now ready to use the API.\n\n## Callbacks or Promises\nAll functions of the client object take an optional Node.js style `(err, result)` callback, and also return a Promise. That way if you want to use Promises in your application, you don't have to wrap the SDK with a Promise library. You can simply do things like this:\n\n### Promise style\n```javascript\nclient.Message.send({\n\tfrom : \"+12345678901\", // This must be a Catapult number on your account\n\tto   : \"+12345678902\",\n\ttext : \"Hello world.\"\n})\n.then(function(message) {\n\tconsole.log(\"Message sent with ID \" + message.id);\n})\n.catch(function(err) {\n\tconsole.log(err.message);\n});\n```\nIf you're not into that kind of thing you can also do things the \"old fashioned\" callback way:\n\n### Callback style\n```javascript\nclient.Message.send({\n\tfrom : \"+12345678901\", // This must be a Catapult number on your account\n\tto   : \"+12345678902\",\n\ttext : \"Hello world.\"\n}, function(err, message) {\n\tif (err) {\n\t\tconsole.log(err);\n\t\treturn;\n\t}\n\tconsole.log(\"Message sent with ID \" + message.id);\n});\n```\n## Providing feedback\n\nFor current discussions on 2.0 please see the [2.0 issues section on GitHub](https://github.com/bandwidthcom/node-bandwidth/labels/2.0). To start a new topic on 2.0, please open an issue and use the `2.0` tag. Your feedback is greatly appreciated!\n",
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"node-bandwidth\",\n  \"version\": \"2.3.2\",\n  \"description\": \"NodeJs Client library for Catapult API\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"cross-env NODE_ENV=test gulp\",\n    \"docs\": \"./node_modules/.bin/jsdoc --configure conf.json\",\n    \"precommit\": \"lint-staged\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/bandwidthcom/node-bandwidth.git\"\n  },\n  \"lint-staged\": {\n    \"*.js\": [\n      \"prettier --write\",\n      \"git add\"\n    ]\n  },\n  \"keywords\": [\n    \"bandwidth\",\n    \"catapult\"\n  ],\n  \"author\": \"bandwidth\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/bandwidthcom/node-bandwidth/issues\"\n  },\n  \"homepage\": \"https://github.com/bandwidthcom/node-bandwidth\",\n  \"dependencies\": {\n    \"bluebird\": \"^3.3.4\",\n    \"lodash\": \"^4.13.1\",\n    \"parse-link-header\": \"^0.4.1\",\n    \"qs\": \"^6.1.0\",\n    \"request\": \"^2.69.0\",\n    \"xmlbuilder\": \"^8.2.2\"\n  },\n  \"devDependencies\": {\n    \"cross-env\": \"2.0.0\",\n    \"esdoc\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.2.0\",\n    \"eslint-config-prettier\": \"^2.3.0\",\n    \"eslint-plugin-prettier\": \"^2.1.2\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-clean\": \"^0.3.1\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-istanbul\": \"^0.10.0\",\n    \"gulp-jscs\": \"^1.6.0\",\n    \"gulp-jsdoc-to-markdown\": \"^1.2.2\",\n    \"gulp-jshint\": \"1.11.2\",\n    \"gulp-mocha\": \"^2.2.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"husky\": \"^0.14.3\",\n    \"jsdoc\": \"^3.4.0\",\n    \"jshint-stylish\": \"^2.1.0\",\n    \"lint-staged\": \"^4.0.2\",\n    \"minami\": \"^1.1.1\",\n    \"mocha\": \"^2.4.5\",\n    \"nock\": \"^7.5.0\",\n    \"prettier\": \"^1.5.3\",\n    \"should\": \"4.3.0\",\n    \"sinon\": \"1.17.4\"\n  }\n}\n",
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 134,
    "kind": "testFile",
    "name": "test/account-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Account API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var testAccount = {\n      balance: \"100\",\n      type: \"pre-paid\"\n    };\n\n    var transactionList = [\n      {\n        id: \"{transactionId1}\",\n        time: \"2013-02-21T13:39:09.122Z\",\n        amount: \"0.00750\",\n        type: \"charge\",\n        units: \"1\",\n        productType: \"sms-out\",\n        number: \"{number}\"\n      },\n      {\n        id: \"{transactionId2}\",\n        time: \"2013-02-21T13:37:42.079Z\",\n        amount: \"0.00750\",\n        type: \"charge\",\n        units: \"1\",\n        productType: \"sms-out\",\n        number: \"{number}\"\n      }\n    ];\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/users/\" + userId + \"/account\")\n        .reply(200, testAccount)\n        .get(\"/v1/users/\" + userId + \"/account/transactions\")\n        .reply(200, transactionList);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should get a account info, promise style\", function() {\n      return client.Account.get().then(function(account) {\n        account.should.eql(testAccount);\n      });\n    });\n\n    it(\"should get a list of transactions, promise style\", function() {\n      return client.Account.getTransactions({}).then(function(response) {\n        response.transactions.should.eql(transactionList);\n      });\n    });\n\n    it(\"those transactions should not have more pages\", function() {\n      return client.Account.getTransactions({}).then(function(response) {\n        response.hasNextPage.should.be.false;\n        return response.getNextPage().catch(function(err) {\n          err.should.equal(\"Next page does not exist.\");\n        });\n      });\n    });\n\n    describe(\"pagination tests\", function() {\n      before(function() {\n        nock(\"https://api.catapult.inetwork.com\")\n          .persist()\n          .get(\"/v1/users/\" + userId + \"/account/transactions?size=25\")\n          .reply(200, transactionList, {\n            link:\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/account/transactions?page=0&size=25>; rel=\"first\",' +\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/account/transactions>; rel=\"next\"'\n          });\n      });\n\n      after(function() {\n        nock.cleanAll();\n        nock.enableNetConnect();\n      });\n\n      it(\"should return a list of accounts with a page to the next link\", function() {\n        return client.Account\n          .getTransactions({ size: 25 })\n          .then(function(response) {\n            response.transactions.should.eql(transactionList);\n            return response.getNextPage();\n          })\n          .then(function(moreTransactions) {\n            moreTransactions.transactions.should.eql(transactionList);\n          });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/account-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/account-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/account-test.js~describe0",
    "access": null,
    "description": "Account API",
    "lineNumber": 6
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/account-test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/account-test.js~describe0.describe1",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/account-test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/account-test.js~describe0.describe1.it2",
    "access": null,
    "description": "should get a account info, promise style",
    "lineNumber": 61
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/account-test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/account-test.js~describe0.describe1.it3",
    "access": null,
    "description": "should get a list of transactions, promise style",
    "lineNumber": 67
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/account-test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/account-test.js~describe0.describe1.it4",
    "access": null,
    "description": "those transactions should not have more pages",
    "lineNumber": 73
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/account-test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/account-test.js~describe0.describe1.describe5",
    "access": null,
    "description": "pagination tests",
    "lineNumber": 82
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/account-test.js~describe0.describe1.describe5",
    "testDepth": 3,
    "static": true,
    "longname": "test/account-test.js~describe0.describe1.describe5.it6",
    "access": null,
    "description": "should return a list of accounts with a page to the next link",
    "lineNumber": 103
  },
  {
    "__docId__": 142,
    "kind": "testFile",
    "name": "test/application-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Application API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n    var requestSpy;\n    var updateNock;\n    var deleteNock;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var page = 1;\n    var size = 1;\n\n    var applicationsList = [\n      {\n        id: \"fakeApplicationId\",\n        name: \"fakeApp\",\n        incomingCallUrl: \"http://example.com/calls.php\",\n        incomingMessageUrl: \"http://example.com/messages.php\",\n        autoAnswer: true\n      },\n      {\n        id: \"fakeApplicationId2\",\n        name: \"fakeApp2\",\n        incomingCallUrl: \"http://example.com/calls2.php\",\n        incomingMessageUrl: \"http://example.com/messages2.php\",\n        autoAnswer: true\n      }\n    ];\n\n    var newApplication = {\n      name: \"NewApplication\",\n      incomingCallUrl: \"http://example.com/calls3.php\",\n      incomingMessageUrl: \"http://example.com/messages3.php\",\n      autoAnswer: true\n    };\n\n    var testApplication = {\n      id: \"fakeTestApplicationId\",\n      name: \"NewApplication\",\n      incomingCallUrl: \"http://example.com/calls3.php\",\n      incomingMessageUrl: \"http://example.com/messages3.php\",\n      autoAnswer: true\n    };\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/users/\" + userId + \"/applications\")\n        .reply(200, applicationsList, {\n          link:\n            \"<https://api.catapult.inetwork.com/v1/users/\" +\n            userId +\n            \"/applications?page=0&size=25>; rel='first'\"\n        })\n        .post(\"/v1/users/\" + userId + \"/applications\")\n        .reply(\n          201,\n          {},\n          {\n            location: \"/v1/users/\" + userId + \"/messages/fakeApplicationId3\"\n          }\n        )\n        .get(\"/v1/users/\" + userId + \"/applications/\" + testApplication.id)\n        .reply(200, testApplication)\n        .get(\n          \"/v1/users/\" + userId + \"/applications?page=\" + page + \"&size=\" + size\n        )\n        .reply(200, applicationsList);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should get a list of applications, promise style\", function() {\n      return client.Application.list({}).then(function(applicationsResponse) {\n        applicationsResponse.applications.should.eql(applicationsList);\n      });\n    });\n\n    it(\"should get a list of applications, callback style\", function() {\n      client.Application.list({}, function(err, applicationsResponse) {\n        if (err) {\n          throw err;\n        }\n        applicationsResponse.applications.should.eql(applicationsList);\n      });\n    });\n\n    it(\"those applications should not have more pages\", function() {\n      return client.Application.list({}).then(function(applicationsResponse) {\n        applicationsResponse.hasNextPage.should.be.false;\n        return applicationsResponse.getNextPage().catch(function(err) {\n          err.should.equal(\"Next page does not exist.\");\n        });\n      });\n    });\n\n    it(\"should create an application, promise style\", function() {\n      return client.Application\n        .create(newApplication)\n        .then(function(applicationResponse) {\n          applicationResponse.id.should.equal(\"fakeApplicationId3\");\n          applicationResponse.name.should.equal(newApplication.name);\n          applicationResponse.incomingCallUrl.should.equal(\n            newApplication.incomingCallUrl\n          );\n          applicationResponse.incomingMessageUrl.should.equal(\n            newApplication.incomingMessageUrl\n          );\n          applicationResponse.autoAnswer.should.equal(\n            newApplication.autoAnswer\n          );\n        });\n    });\n\n    it(\"should create an application, callback style\", function() {\n      client.Application.create(newApplication, function(\n        err,\n        applicationResponse\n      ) {\n        if (err) {\n          throw err;\n        }\n        applicationResponse.id.should.equal(\"fakeApplicationId3\");\n        applicationResponse.name.should.equal(newApplication.name);\n        applicationResponse.incomingCallUrl.should.equal(\n          newApplication.incomingCallUrl\n        );\n        applicationResponse.incomingMessageUrl.should.equal(\n          newApplication.incomingMessageUrl\n        );\n        applicationResponse.autoAnswer.should.equal(newApplication.autoAnswer);\n      });\n    });\n\n    it(\"should get an application, promise style\", function() {\n      return client.Application\n        .get(testApplication.id)\n        .then(function(applicationResponse) {\n          applicationResponse.should.eql(testApplication);\n        });\n    });\n\n    it(\"should get an application, callback style\", function() {\n      client.Application.get(testApplication.id, function(\n        err,\n        applicationResponse\n      ) {\n        if (err) {\n          throw err;\n        }\n        applicationResponse.should.eql(testApplication);\n      });\n    });\n\n    describe(\"testing global void methods\", function() {\n      describe(\"updating applications\", function() {\n        beforeEach(function() {\n          updateNock = nock(\"https://api.catapult.inetwork.com\")\n            .persist()\n            .post(\"/v1/users/\" + userId + \"/applications/\" + testApplication.id)\n            .reply(200, {});\n        });\n\n        afterEach(function() {\n          nock.cleanAll();\n        });\n\n        it(\"should update an application, promise style\", function() {\n          return client.Application\n            .update(testApplication.id, { name: \"newTestApplication\" })\n            .then(function() {\n              updateNock.isDone().should.equal(true);\n            });\n        });\n\n        it(\"should update an application, callback style\", function() {\n          client.Application.update(\n            testApplication.id,\n            { name: \"anotherNewTestApplication\" },\n            function(err, response) {\n              if (err) {\n                throw err;\n              }\n              updateNock.isDone().should.equal(true);\n            }\n          );\n        });\n      });\n\n      describe(\"deleting applications\", function() {\n        beforeEach(function() {\n          deleteNock = nock(\"https://api.catapult.inetwork.com\")\n            .persist()\n            .delete(\n              \"/v1/users/\" + userId + \"/applications/\" + testApplication.id\n            )\n            .reply(200, {});\n        });\n\n        afterEach(function() {\n          nock.cleanAll();\n        });\n\n        it(\"should delete an application, promise style\", function() {\n          return client.Application.delete(testApplication.id).then(function() {\n            deleteNock.isDone().should.equal(true);\n          });\n        });\n\n        it(\"should delete an application, callback style\", function() {\n          client.Application.delete(testApplication.id, function(\n            err,\n            response\n          ) {\n            if (err) {\n              throw err;\n            }\n            deleteNock.isDone().should.equal(true);\n          });\n        });\n      });\n    });\n\n    describe(\"pagination tests\", function() {\n      before(function() {\n        nock(\"https://api.catapult.inetwork.com\")\n          .persist()\n          .get(\"/v1/users/\" + userId + \"/applications\")\n          .reply(200, applicationsList, {\n            link:\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/applications?page=0&size=25>; rel=\"first\",' +\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/applications>; rel=\"next\"'\n          });\n      });\n\n      after(function() {\n        nock.cleanAll();\n        nock.enableNetConnect();\n      });\n\n      it(\"should return a list of applications with a page to the next link\", function() {\n        return client.Application\n          .list({})\n          .then(function(applicationsResponse) {\n            applicationsResponse.applications.should.eql(applicationsList);\n            return applicationsResponse.getNextPage();\n          })\n          .then(function(moreApplications) {\n            moreApplications.applications.should.eql(applicationsList);\n          });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/application-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/application-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/application-test.js~describe7",
    "access": null,
    "description": "Application API",
    "lineNumber": 6
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/application-test.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.it9",
    "access": null,
    "description": "should get a list of applications, promise style",
    "lineNumber": 90
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.it10",
    "access": null,
    "description": "should get a list of applications, callback style",
    "lineNumber": 96
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.it11",
    "access": null,
    "description": "those applications should not have more pages",
    "lineNumber": 105
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.it12",
    "access": null,
    "description": "should create an application, promise style",
    "lineNumber": 114
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.it13",
    "access": null,
    "description": "should create an application, callback style",
    "lineNumber": 132
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.it14",
    "access": null,
    "description": "should get an application, promise style",
    "lineNumber": 152
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.it15",
    "access": null,
    "description": "should get an application, callback style",
    "lineNumber": 160
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe16",
    "access": null,
    "description": "testing global void methods",
    "lineNumber": 172
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/application-test.js~describe7.describe8.describe16",
    "testDepth": 3,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe16.describe17",
    "access": null,
    "description": "updating applications",
    "lineNumber": 173
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/application-test.js~describe7.describe8.describe16.describe17",
    "testDepth": 4,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe16.describe17.it18",
    "access": null,
    "description": "should update an application, promise style",
    "lineNumber": 185
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/application-test.js~describe7.describe8.describe16.describe17",
    "testDepth": 4,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe16.describe17.it19",
    "access": null,
    "description": "should update an application, callback style",
    "lineNumber": 193
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "test/application-test.js~describe7.describe8.describe16",
    "testDepth": 3,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe16.describe20",
    "access": null,
    "description": "deleting applications",
    "lineNumber": 207
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/application-test.js~describe7.describe8.describe16.describe20",
    "testDepth": 4,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe16.describe20.it21",
    "access": null,
    "description": "should delete an application, promise style",
    "lineNumber": 221
  },
  {
    "__docId__": 158,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/application-test.js~describe7.describe8.describe16.describe20",
    "testDepth": 4,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe16.describe20.it22",
    "access": null,
    "description": "should delete an application, callback style",
    "lineNumber": 227
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/application-test.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe23",
    "access": null,
    "description": "pagination tests",
    "lineNumber": 241
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/application-test.js~describe7.describe8.describe23",
    "testDepth": 3,
    "static": true,
    "longname": "test/application-test.js~describe7.describe8.describe23.it24",
    "access": null,
    "description": "should return a list of applications with a page to the next link",
    "lineNumber": 262
  },
  {
    "__docId__": 161,
    "kind": "testFile",
    "name": "test/availableNumber-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"AvailableNumber API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var query = { areaCode: \"910\" };\n\n    var foundNumberList = [\n      {\n        number: \"{number1}\",\n        nationalNumber: \"{national_number1}\",\n        patternMatch: \"          2 9 \",\n        city: \"CARY\",\n        lata: \"426\",\n        rateCenter: \"CARY\",\n        state: \"NC\",\n        price: \"0.60\"\n      }\n    ];\n\n    var orderedNumberList = [\n      {\n        number: \"{number1}\",\n        nationalNumber: \"{national_number1}\",\n        price: \"0.60\",\n        location: \"https://.../v1/users/.../phoneNumbers/numberId1\"\n      }\n    ];\n\n    var orderedNumber = {\n      id: \"numberId1\",\n      number: \"{number1}\",\n      nationalNumber: \"{national_number1}\",\n      price: \"0.60\",\n      location: \"https://.../v1/users/.../phoneNumbers/numberId1\"\n    };\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/availableNumbers/local?areaCode=910\")\n        .reply(200, foundNumberList)\n        .post(\"/v1/availableNumbers/local?areaCode=910\")\n        .reply(200, orderedNumberList);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should search available numbers\", function() {\n      return client.AvailableNumber\n        .search(\"local\", { areaCode: \"910\" })\n        .then(function(numbers) {\n          numbers[0].should.eql(foundNumberList[0]);\n        });\n    });\n\n    it(\"should search available numbers and order them\", function() {\n      return client.AvailableNumber\n        .searchAndOrder(\"local\", { areaCode: \"910\" })\n        .then(function(numbers) {\n          numbers[0].should.eql(orderedNumber);\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/availableNumber-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/availableNumber-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/availableNumber-test.js~describe25",
    "access": null,
    "description": "AvailableNumber API",
    "lineNumber": 6
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "test/availableNumber-test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/availableNumber-test.js~describe25.describe26",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/availableNumber-test.js~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "test/availableNumber-test.js~describe25.describe26.it27",
    "access": null,
    "description": "should search available numbers",
    "lineNumber": 67
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/availableNumber-test.js~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "test/availableNumber-test.js~describe25.describe26.it28",
    "access": null,
    "description": "should search available numbers and order them",
    "lineNumber": 75
  },
  {
    "__docId__": 166,
    "kind": "testFile",
    "name": "test/bridge-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Bridge API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var newTestBridge = {\n      bridgeAudio: true,\n      callIds: [\"callId\"]\n    };\n\n    var changes = {\n      bridgeAudio: true,\n      callIds: [\"callId1\"]\n    };\n\n    var testBridge = {\n      id: \"bridgeId\",\n      state: \"completed\",\n      bridgeAudio: \"true\",\n      calls: \"https://.../v1/users/{userId}/bridges/{bridgeId}/calls\",\n      createdTime: \"2013-04-22T13:55:30.279Z\",\n      activatedTime: \"2013-04-22T13:55:30.280Z\",\n      completedTime: \"2013-04-22T13:59:30.122Z\"\n    };\n\n    var bridgesList = [testBridge];\n\n    var callsList = [\n      {\n        id: \"fakeCallId1\",\n        direction: \"out\",\n        from: \"{fromNumber}\",\n        to: \"{toNumber1}\",\n        recordingEnabled: false,\n        callbackUrl: \"\",\n        state: \"completed\",\n        startTime: \"2013-02-08T13:15:47.587Z\",\n        activeTime: \"2013-02-08T13:15:52.347Z\",\n        endTime: \"2013-02-08T13:15:55.887Z\",\n        chargeableDuration: 60,\n        events: \"https://.../calls/fakeCallId1/events\"\n      },\n      {\n        id: \"fakeCallId2\",\n        direction: \"out\",\n        from: \"{fromNumber}\",\n        to: \"{toNumber2}\",\n        recordingEnabled: false,\n        callbackUrl: \"\",\n        state: \"active\",\n        startTime: \"2013-02-08T13:15:47.587Z\",\n        activeTime: \"2013-02-08T13:15:52.347Z\",\n        events: \"https://.../calls/fakeCallId2/events\"\n      }\n    ];\n\n    var tag = \"tag\";\n    var sampleSentence = \"Hello world\";\n    var speakSentencePayload = {\n      sentence: sampleSentence\n    };\n\n    var speakSentencePayloadWithTag = {\n      sentence: sampleSentence,\n      tag: tag\n    };\n\n    var audioUrl = \"http://somewhere/something.mp3\";\n    var playAudioPayload = {\n      fileUrl: audioUrl\n    };\n\n    var playAudioPayloadWithTag = {\n      fileUrl: audioUrl,\n      tag: tag\n    };\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .post(\"/v1/users/\" + userId + \"/bridges\", newTestBridge)\n        .reply(\n          201,\n          {},\n          {\n            Location: \"/v1/users/\" + userId + \"/bridges/fakeBridgeId\"\n          }\n        )\n        .get(\"/v1/users/\" + userId + \"/bridges/\" + testBridge.id)\n        .reply(200, testBridge)\n        .get(\"/v1/users/\" + userId + \"/bridges\")\n        .reply(200, bridgesList)\n        .post(\n          \"/v1/users/\" + userId + \"/bridges/\" + testBridge.id + \"/audio\",\n          speakSentencePayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/bridges/\" + testBridge.id + \"/audio\",\n          playAudioPayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/bridges/\" + testBridge.id + \"/audio\",\n          speakSentencePayloadWithTag\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/bridges/\" + testBridge.id + \"/audio\",\n          playAudioPayloadWithTag\n        )\n        .reply(200)\n        .post(\"/v1/users/\" + userId + \"/bridges/\" + testBridge.id, changes)\n        .reply(200)\n        .get(\"/v1/users/\" + userId + \"/bridges/\" + testBridge.id + \"/calls\")\n        .reply(200, callsList);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should create a bridge, promise style\", function() {\n      return client.Bridge.create(newTestBridge).then(function(bridge) {\n        bridge.should.eql(newTestBridge);\n      });\n    });\n\n    it(\"should create a bridge, callback style\", function(done) {\n      client.Bridge.create(newTestBridge, function(err, call) {\n        if (err) {\n          throw err;\n        }\n        call.should.eql(newTestBridge);\n        done();\n      });\n    });\n\n    it(\"should get a bridge, promise style\", function() {\n      return client.Bridge.get(testBridge.id).then(function(bridge) {\n        bridge.should.eql(testBridge);\n      });\n    });\n\n    it(\"should get a list of bridges, promise style\", function() {\n      return client.Bridge.list({}).then(function(bridgesResponse) {\n        bridgesResponse.bridges[0].should.eql(bridgesList[0]);\n      });\n    });\n\n    it(\"should get a list of bridges, callback style\", function(done) {\n      client.Bridge.list({}, function(err, bridgesResponse) {\n        if (err) {\n          throw err;\n        }\n        bridgesResponse.bridges[0].should.eql(bridgesList[0]);\n        done();\n      });\n    });\n\n    it(\"those bridges should not have more pages\", function() {\n      return client.Bridge.list({}).then(function(bridgesResponse) {\n        bridgesResponse.hasNextPage.should.be.false;\n        return bridgesResponse.getNextPage().catch(function(err) {\n          err.should.equal(\"Next page does not exist.\");\n        });\n      });\n    });\n\n    it(\"should speak a sentence to the bridge, promise style\", function() {\n      return client.Bridge.speakSentence(testBridge.id, sampleSentence);\n    });\n\n    it(\"should speak a sentence to the bridge, callback style\", function(done) {\n      return client.Bridge.speakSentence(testBridge.id, sampleSentence, done);\n    });\n\n    it(\"should play an audio file on sentence to the bridge, promise style\", function() {\n      return client.Bridge.playAudioFile(testBridge.id, audioUrl);\n    });\n\n    it(\"should play an audio file on sentence to the bridge, callback style\", function(\n      done\n    ) {\n      return client.Bridge.playAudioFile(testBridge.id, audioUrl, done);\n    });\n\n    it(\"should play an audio with custom params to the bridge, promise style\", function() {\n      return client.Bridge.playAudioAdvanced(testBridge.id, {\n        fileUrl: audioUrl\n      });\n    });\n\n    it(\"should play an audio with custom params to the bridge, callback style\", function(\n      done\n    ) {\n      return client.Bridge.playAudioAdvanced(\n        testBridge.id,\n        { fileUrl: audioUrl },\n        done\n      );\n    });\n\n    it(\"should update the bridge, promise style\", function() {\n      return client.Bridge.update(testBridge.id, changes);\n    });\n\n    it(\"should get a list of calls for the bridge, promise style\", function() {\n      return client.Bridge.getCalls(testBridge.id).then(function(calls) {\n        calls[0].should.eql(callsList[0]);\n        calls[1].should.eql(callsList[1]);\n      });\n    });\n\n    describe(\"pagination tests\", function() {\n      before(function() {\n        nock(\"https://api.catapult.inetwork.com\")\n          .persist()\n          .get(\"/v1/users/\" + userId + \"/bridges?size=25\")\n          .reply(200, bridgesList, {\n            link:\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/bridges?page=0&size=25>; rel=\"first\",' +\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/bridges>; rel=\"next\"'\n          });\n      });\n\n      after(function() {\n        nock.cleanAll();\n        nock.enableNetConnect();\n      });\n\n      it(\"should return a list of bridges with a page to the next link\", function() {\n        return client.Bridge\n          .list({ size: 25 })\n          .then(function(bridgesResponse) {\n            bridgesResponse.bridges.should.eql(bridgesList);\n            return bridgesResponse.getNextPage();\n          })\n          .then(function(moreBridges) {\n            moreBridges.bridges.should.eql(bridgesList);\n          });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/bridge-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/bridge-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/bridge-test.js~describe29",
    "access": null,
    "description": "Bridge API",
    "lineNumber": 6
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/bridge-test.js~describe29",
    "testDepth": 1,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it31",
    "access": null,
    "description": "should create a bridge, promise style",
    "lineNumber": 139
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it32",
    "access": null,
    "description": "should create a bridge, callback style",
    "lineNumber": 145
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it33",
    "access": null,
    "description": "should get a bridge, promise style",
    "lineNumber": 155
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it34",
    "access": null,
    "description": "should get a list of bridges, promise style",
    "lineNumber": 161
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it35",
    "access": null,
    "description": "should get a list of bridges, callback style",
    "lineNumber": 167
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it36",
    "access": null,
    "description": "those bridges should not have more pages",
    "lineNumber": 177
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it37",
    "access": null,
    "description": "should speak a sentence to the bridge, promise style",
    "lineNumber": 186
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it38",
    "access": null,
    "description": "should speak a sentence to the bridge, callback style",
    "lineNumber": 190
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it39",
    "access": null,
    "description": "should play an audio file on sentence to the bridge, promise style",
    "lineNumber": 194
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it40",
    "access": null,
    "description": "should play an audio file on sentence to the bridge, callback style",
    "lineNumber": 198
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it41",
    "access": null,
    "description": "should play an audio with custom params to the bridge, promise style",
    "lineNumber": 204
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it42",
    "access": null,
    "description": "should play an audio with custom params to the bridge, callback style",
    "lineNumber": 210
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it43",
    "access": null,
    "description": "should update the bridge, promise style",
    "lineNumber": 220
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.it44",
    "access": null,
    "description": "should get a list of calls for the bridge, promise style",
    "lineNumber": 224
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/bridge-test.js~describe29.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.describe45",
    "access": null,
    "description": "pagination tests",
    "lineNumber": 231
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/bridge-test.js~describe29.describe30.describe45",
    "testDepth": 3,
    "static": true,
    "longname": "test/bridge-test.js~describe29.describe30.describe45.it46",
    "access": null,
    "description": "should return a list of bridges with a page to the next link",
    "lineNumber": 252
  },
  {
    "__docId__": 185,
    "kind": "testFile",
    "name": "test/call-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Call API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var newTestCall = {\n      from: \"+12345678901\",\n      to: \"+12345678902\"\n    };\n\n    var testCall = {\n      id: \"fakeCallId\",\n      direction: \"out\",\n      from: \"{fromNumber}\",\n      to: \"{number}\",\n      recordingEnabled: false,\n      callbackUrl: \"\",\n      state: \"completed\",\n      startTime: \"2013-02-08T13:15:47.587Z\",\n      activeTime: \"2013-02-08T13:15:52.347Z\",\n      endTime: \"2013-02-08T13:15:55.887Z\",\n      chargeableDuration: 60,\n      events: \"https://.../calls/fakeCallId/events\",\n      sipHeaders: {\n        \"X-Header-1\": \"value-1\",\n        \"X-Header-2\": \"value2\"\n      }\n    };\n\n    var callsList = [\n      {\n        id: \"fakeCallId1\",\n        direction: \"out\",\n        from: \"{fromNumber}\",\n        to: \"{toNumber1}\",\n        recordingEnabled: false,\n        callbackUrl: \"\",\n        state: \"completed\",\n        startTime: \"2013-02-08T13:15:47.587Z\",\n        activeTime: \"2013-02-08T13:15:52.347Z\",\n        endTime: \"2013-02-08T13:15:55.887Z\",\n        chargeableDuration: 60,\n        events: \"https://.../calls/fakeCallId1/events\"\n      },\n      {\n        id: \"fakeCallId2\",\n        direction: \"out\",\n        from: \"{fromNumber}\",\n        to: \"{toNumber2}\",\n        recordingEnabled: false,\n        callbackUrl: \"\",\n        state: \"active\",\n        startTime: \"2013-02-08T13:15:47.587Z\",\n        activeTime: \"2013-02-08T13:15:52.347Z\",\n        events: \"https://.../calls/fakeCallId2/events\"\n      }\n    ];\n\n    var answerCallPayload = {\n      state: \"active\"\n    };\n\n    var rejectCallPayload = {\n      state: \"rejected\"\n    };\n\n    var hangupCallPayload = {\n      state: \"completed\"\n    };\n\n    var transferCallPayload = {\n      transferTo: \"+1234567891\",\n      transferCallerId: \"private\",\n      state: \"transferring\"\n    };\n\n    var sampleSentence = \"Hello world\";\n    var speakSentencePayload = {\n      sentence: sampleSentence\n    };\n\n    var audioUrl = \"http://somewhere/something.mp3\";\n    var playAudioPayload = {\n      fileUrl: audioUrl\n    };\n\n    var enableRecordingPayload = {\n      recordingEnabled: true\n    };\n\n    var disableRecordingPayload = {\n      recordingEnabled: false\n    };\n\n    var maxRecordingDuration = 90;\n    var setRecordingMaxDurationPayload = {\n      recordingMaxDuration: maxRecordingDuration\n    };\n\n    var fromDateTime = \"2012-10-04\";\n    var toDateTime = \"2012-10-06\";\n\n    var newTestGather = {\n      maxDigits: \"5\",\n      terminatingDigits: \"*\",\n      interDigitTimeout: \"7\",\n      prompt: {\n        sentence: \"Please enter your 5 digit code\"\n      }\n    };\n\n    var testGather = {\n      id: \"gatherId\",\n      state: \"completed\",\n      reason: \"max-digits\",\n      createdTime: \"2014-02-12T19:33:56Z\",\n      completedTime: \"2014-02-12T19:33:59Z\",\n      call:\n        \"https://api.catapult.inetwork.com/v1/users/{userId}/calls/{callId}\",\n      digits: \"123\"\n    };\n\n    var completeGather = {\n      state: \"completed\"\n    };\n\n    var testEvent = {\n      id: \"callEventId1\",\n      time: \"2012-09-19T13:55:41.343Z\",\n      name: \"create\"\n    };\n\n    var eventList = [testEvent];\n\n    var recordingList = [\n      {\n        endTime: \"2013-02-08T12:06:55.007Z\",\n        id: \"{recordingId1}\",\n        media: \"https://.../v1/users/.../media/{callId}-1.wav\",\n        call: \"https://.../v1/users/.../calls/{callId}\",\n        startTime: \"2013-02-08T12:05:17.807Z\",\n        state: \"complete\"\n      }\n    ];\n\n    var transcriptionList = [\n      {\n        chargeableDuration: 60,\n        id: \"{transcription-id}\",\n        state: \"completed\",\n        time: \"2014-10-09T12:09:16Z\",\n        text: \"{transcription-text}\",\n        textSize: 3627,\n        textUrl: \"{url-to-full-text}\"\n      }\n    ];\n\n    var dtmfOut = {\n      dtmfOut: \"1234\"\n    };\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .post(\"/v1/users/\" + userId + \"/calls\", newTestCall)\n        .reply(\n          201,\n          {},\n          {\n            Location: \"/v1/users/\" + userId + \"/calls/fakeCallId\"\n          }\n        )\n        .get(\"/v1/users/\" + userId + \"/calls/\" + testCall.id)\n        .reply(200, testCall)\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/calls?fromDateTime=\" +\n            fromDateTime +\n            \"&\" +\n            \"toDateTime=\" +\n            toDateTime\n        )\n        .reply(200, callsList)\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id,\n          answerCallPayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id,\n          rejectCallPayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id,\n          hangupCallPayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id,\n          transferCallPayload\n        )\n        .reply(\n          201,\n          {},\n          {\n            Location: \"/v1/users/\" + userId + \"/calls/transferedCallId\"\n          }\n        )\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id + \"/audio\",\n          speakSentencePayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id + \"/audio\",\n          playAudioPayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id,\n          setRecordingMaxDurationPayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id + \"/gather\",\n          newTestGather\n        )\n        .reply(\n          201,\n          {},\n          {\n            Location:\n              \"/v1/users/\" +\n              userId +\n              \"/calls/\" +\n              testCall.id +\n              \"/gather/gatherId\"\n          }\n        )\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/calls/\" +\n            testCall.id +\n            \"/gather/\" +\n            testGather.id\n        )\n        .reply(200, testGather)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/calls/\" +\n            testCall.id +\n            \"/gather/\" +\n            testGather.id,\n          completeGather\n        )\n        .reply(200)\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/calls/\" +\n            testCall.id +\n            \"/events/\" +\n            testEvent.id\n        )\n        .reply(200, testEvent)\n        .get(\"/v1/users/\" + userId + \"/calls/\" + testCall.id + \"/events\")\n        .reply(200, eventList)\n        .get(\"/v1/users/\" + userId + \"/calls/\" + testCall.id + \"/recordings\")\n        .reply(200, recordingList)\n        .get(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id + \"/transcriptions\"\n        )\n        .reply(200, transcriptionList)\n        .post(\n          \"/v1/users/\" + userId + \"/calls/\" + testCall.id + \"/dtmf\",\n          dtmfOut\n        )\n        .reply(200);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should create a call, promise style\", function() {\n      return client.Call.create(newTestCall).then(function(call) {\n        call.should.eql(newTestCall);\n      });\n    });\n\n    it(\"should answer a call\", function() {\n      return client.Call.answer(testCall.id);\n    });\n\n    it(\"should reject a call\", function() {\n      return client.Call.reject(testCall.id);\n    });\n\n    it(\"should complete a call\", function() {\n      return client.Call.hangup(testCall.id);\n    });\n\n    it(\"should transfer a call\", function() {\n      return client.Call\n        .transfer(testCall.id, {\n          transferTo: \"+1234567891\",\n          transferCallerId: \"private\"\n        })\n        .then(function(call) {\n          call.id.should.eql(\"transferedCallId\");\n        });\n    });\n\n    it(\"should speak a sentence to the call, promise style\", function() {\n      return client.Call.speakSentence(testCall.id, sampleSentence);\n    });\n\n    it(\"should speak a sentence to the call, callback style\", function(done) {\n      return client.Call.speakSentence(testCall.id, sampleSentence, done);\n    });\n\n    it(\"should play an audio file on sentence to the call, promise style\", function() {\n      return client.Call.playAudioFile(testCall.id, audioUrl);\n    });\n\n    it(\"should play an audio file on sentence to the call, callback style\", function(\n      done\n    ) {\n      return client.Call.playAudioFile(testCall.id, audioUrl, done);\n    });\n\n    it(\"should play an audio with custom params to the call, promise style\", function() {\n      return client.Call.playAudioAdvanced(testCall.id, { fileUrl: audioUrl });\n    });\n\n    it(\"should play an audio with custom params to the call, callback style\", function(\n      done\n    ) {\n      return client.Call.playAudioAdvanced(\n        testCall.id,\n        { fileUrl: audioUrl },\n        done\n      );\n    });\n\n    describe(\"Recording toggle\", function() {\n      describe(\"turn recording on\", function() {\n        before(function() {\n          nock(\"https://api.catapult.inetwork.com\")\n            .persist()\n            .post(\n              \"/v1/users/\" + userId + \"/calls/\" + testCall.id,\n              enableRecordingPayload\n            )\n            .reply(200);\n        });\n\n        after(function() {\n          nock.cleanAll();\n          nock.enableNetConnect();\n        });\n\n        it(\"should enable recording on a call\", function() {\n          return client.Call.enableRecording(testCall.id);\n        });\n      });\n\n      describe(\"turn recording off\", function() {\n        before(function() {\n          nock(\"https://api.catapult.inetwork.com\")\n            .persist()\n            .post(\n              \"/v1/users/\" + userId + \"/calls/\" + testCall.id,\n              disableRecordingPayload\n            )\n            .reply(200);\n        });\n\n        after(function() {\n          nock.cleanAll();\n          nock.enableNetConnect();\n        });\n\n        it(\"should disable recording on a call\", function() {\n          return client.Call.disableRecording(testCall.id);\n        });\n      });\n    });\n\n    it(\"should set the maximum recording duration on a call\", function() {\n      return client.Call.setMaxRecordingDuration(\n        testCall.id,\n        maxRecordingDuration\n      );\n    });\n\n    it(\"should create a call, callback style\", function(done) {\n      client.Call.create(newTestCall, function(err, call) {\n        if (err) {\n          throw err;\n        }\n        call.should.eql(newTestCall);\n        done();\n      });\n    });\n\n    it(\"should get a call, promise style\", function() {\n      return client.Call.get(testCall.id).then(function(call) {\n        call.should.eql(testCall);\n      });\n    });\n\n    it(\"should get a list of calls, promise style\", function() {\n      return client.Call\n        .list({\n          fromDateTime: fromDateTime,\n          toDateTime: toDateTime\n        })\n        .then(function(calls) {\n          calls[0].should.eql(callsList[0]);\n          calls[1].should.eql(callsList[1]);\n        });\n    });\n\n    it(\"should get a list of calls, callback style\", function(done) {\n      client.Call.list(\n        {\n          fromDateTime: fromDateTime,\n          toDateTime: toDateTime\n        },\n        function(err, calls) {\n          if (err) {\n            throw err;\n          }\n          calls[0].should.eql(callsList[0]);\n          calls[1].should.eql(callsList[1]);\n          done();\n        }\n      );\n    });\n\n    it(\"should create a gather for the call\", function() {\n      return client.Call\n        .createGather(testCall.id, newTestGather)\n        .then(function(gather) {\n          gather.should.eql(newTestGather);\n        });\n    });\n\n    it(\"should get a gather\", function() {\n      return client.Call\n        .getGather(testCall.id, testGather.id)\n        .then(function(gather) {\n          gather.should.eql(testGather);\n        });\n    });\n\n    it(\"should complete a gather\", function() {\n      return client.Call.completeGather(testCall.id, testGather.id);\n    });\n\n    it(\"should get events\", function() {\n      return client.Call.getEvents(testCall.id).then(function(list) {\n        list.should.eql(eventList);\n      });\n    });\n\n    it(\"should get a single event\", function() {\n      return client.Call\n        .getEvent(testCall.id, testEvent.id)\n        .then(function(callEvent) {\n          callEvent.should.eql(testEvent);\n        });\n    });\n\n    it(\"should get recordings\", function() {\n      return client.Call.getRecordings(testCall.id).then(function(list) {\n        list.should.eql(recordingList);\n      });\n    });\n\n    it(\"should get transcriptions\", function() {\n      return client.Call.getTranscriptions(testCall.id).then(function(list) {\n        list.should.eql(transcriptionList);\n      });\n    });\n\n    it(\"should send dtmf string\", function() {\n      return client.Call.sendDtmf(testCall.id, dtmfOut.dtmfOut);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/call-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "test/call-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/call-test.js~describe47",
    "access": null,
    "description": "Call API",
    "lineNumber": 6
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/call-test.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it49",
    "access": null,
    "description": "should create a call, promise style",
    "lineNumber": 305
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it50",
    "access": null,
    "description": "should answer a call",
    "lineNumber": 311
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it51",
    "access": null,
    "description": "should reject a call",
    "lineNumber": 315
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it52",
    "access": null,
    "description": "should complete a call",
    "lineNumber": 319
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it53",
    "access": null,
    "description": "should transfer a call",
    "lineNumber": 323
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it54",
    "access": null,
    "description": "should speak a sentence to the call, promise style",
    "lineNumber": 334
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it55",
    "access": null,
    "description": "should speak a sentence to the call, callback style",
    "lineNumber": 338
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it56",
    "access": null,
    "description": "should play an audio file on sentence to the call, promise style",
    "lineNumber": 342
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it57",
    "access": null,
    "description": "should play an audio file on sentence to the call, callback style",
    "lineNumber": 346
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it58",
    "access": null,
    "description": "should play an audio with custom params to the call, promise style",
    "lineNumber": 352
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it59",
    "access": null,
    "description": "should play an audio with custom params to the call, callback style",
    "lineNumber": 356
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.describe60",
    "access": null,
    "description": "Recording toggle",
    "lineNumber": 366
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/call-test.js~describe47.describe48.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.describe60.describe61",
    "access": null,
    "description": "turn recording on",
    "lineNumber": 367
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/call-test.js~describe47.describe48.describe60.describe61",
    "testDepth": 4,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.describe60.describe61.it62",
    "access": null,
    "description": "should enable recording on a call",
    "lineNumber": 383
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "test/call-test.js~describe47.describe48.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.describe60.describe63",
    "access": null,
    "description": "turn recording off",
    "lineNumber": 388
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/call-test.js~describe47.describe48.describe60.describe63",
    "testDepth": 4,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.describe60.describe63.it64",
    "access": null,
    "description": "should disable recording on a call",
    "lineNumber": 404
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it65",
    "access": null,
    "description": "should set the maximum recording duration on a call",
    "lineNumber": 410
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it66",
    "access": null,
    "description": "should create a call, callback style",
    "lineNumber": 417
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it67",
    "access": null,
    "description": "should get a call, promise style",
    "lineNumber": 427
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it68",
    "access": null,
    "description": "should get a list of calls, promise style",
    "lineNumber": 433
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it69",
    "access": null,
    "description": "should get a list of calls, callback style",
    "lineNumber": 445
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it70",
    "access": null,
    "description": "should create a gather for the call",
    "lineNumber": 462
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it71",
    "access": null,
    "description": "should get a gather",
    "lineNumber": 470
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it72",
    "access": null,
    "description": "should complete a gather",
    "lineNumber": 478
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it73",
    "access": null,
    "description": "should get events",
    "lineNumber": 482
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it74",
    "access": null,
    "description": "should get a single event",
    "lineNumber": 488
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it75",
    "access": null,
    "description": "should get recordings",
    "lineNumber": 496
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it76",
    "access": null,
    "description": "should get transcriptions",
    "lineNumber": 502
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/call-test.js~describe47.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/call-test.js~describe47.describe48.it77",
    "access": null,
    "description": "should send dtmf string",
    "lineNumber": 508
  },
  {
    "__docId__": 217,
    "kind": "testFile",
    "name": "test/client-test.js",
    "content": "var nock = require(\"nock\");\nvar Client = require(\"../lib/client\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Client\", function() {\n  var accountResponse = {\n    balance: \"20.00\",\n    accountType: \"pre-pay\"\n  };\n\n  before(function() {\n    nock.disableNetConnect();\n  });\n\n  after(function() {\n    nock.enableNetConnect();\n  });\n\n  describe(\"using default options\", function() {\n    var client;\n\n    before(function() {\n      client = new Client({\n        userId: \"fakeUserId\",\n        apiToken: \"fakeApiToken\",\n        apiKey: \"fakeApiKey\"\n      });\n\n      nock(baseUrl)\n        .persist()\n        .get(\"/v1/users/fakeUserId/account\")\n        .reply(200, accountResponse)\n        .post(\"/v1/users/fakeUserId/201endpoint\")\n        .reply(201, {}, {})\n        .post(\"/v1/users/fakeUserId/202endpoint\")\n        .reply(202, {}, {});\n    });\n\n    after(function() {\n      nock.cleanAll();\n    });\n\n    it(\"should make requests to the default baseUrl\", function() {\n      return client\n        .makeRequest({\n          path: \"account\"\n        })\n        .then(function(res) {\n          res.body.should.eql(accountResponse);\n        });\n    });\n\n    it(\"should not error on 200 responses\", function() {\n      return client\n        .makeRequest({\n          path: \"account\"\n        })\n        .then(function(res) {\n          res.statusCode.should.eql(200);\n        });\n    });\n\n    it(\"should not error on 201 responses\", function() {\n      return client\n        .makeRequest({\n          path: \"201endpoint\",\n          method: \"POST\"\n        })\n        .then(function(res) {\n          res.statusCode.should.eql(201);\n        });\n    });\n\n    it(\"should not error on 202 responses\", function() {\n      return client\n        .makeRequest({\n          path: \"202endpoint\",\n          method: \"POST\"\n        })\n        .then(function(res) {\n          res.statusCode.should.eql(202);\n        });\n    });\n  });\n\n  describe(\"using custom options\", function() {\n    var client;\n    var oldBaseUrl;\n\n    before(function() {\n      oldBaseUrl = baseUrl;\n      baseUrl = \"https://stage.catapult.inetwork.com\";\n      client = new Client({\n        userId: \"fakeUserId\",\n        apiToken: \"fakeApiToken\",\n        apiKey: \"fakeApiKey\",\n        baseUrl: baseUrl\n      });\n    });\n\n    after(function() {\n      nock.cleanAll();\n      baseUrl = oldBaseUrl;\n    });\n\n    it(\"should make requests to the custom baseUrl\", function() {\n      var accountResponse = {\n        balance: \"20.00\",\n        accountType: \"pre-pay\"\n      };\n\n      nock(baseUrl)\n        .get(\"/v1/users/fakeUserId/account\")\n        .reply(200, accountResponse);\n      return client\n        .makeRequest({\n          path: \"account\"\n        })\n        .then(function(res) {\n          res.body.should.eql(accountResponse);\n        });\n    });\n  });\n\n  describe(\"using path without user\", function() {\n    var client;\n    var oldBaseUrl;\n\n    before(function() {\n      client = new Client({\n        userId: \"fakeUserId\",\n        apiToken: \"fakeApiToken\",\n        apiKey: \"fakeApiKey\"\n      });\n    });\n\n    after(function() {\n      nock.cleanAll();\n    });\n\n    it(\"should make requests without user data in the path\", function() {\n      var numbersResponse = [];\n      nock(baseUrl).get(\"/v1/availableNumbers\").reply(200, numbersResponse);\n      return client\n        .makeRequest({\n          path: \"availableNumbers\",\n          pathWithoutUser: true\n        })\n        .then(function(res) {\n          res.body.should.eql(numbersResponse);\n        });\n    });\n  });\n\n  describe(\"in error cases\", function() {\n    var client;\n\n    before(function() {\n      client = new Client({\n        userId: \"fakeUserId\",\n        apiToken: \"fakeApiToken\",\n        apiKey: \"fakeApiKey\"\n      });\n\n      nock(baseUrl)\n        .persist()\n        .get(\"/v1/users/fakeUserId/account\")\n        .reply(401, { message: \"Something bad happened...\" })\n        .get(\"/v1/users/fakeUserId/unknown\")\n        .reply(404)\n        .get(\"/v1/users/fakeUserId/unknown2\")\n        .reply(404, {});\n    });\n\n    after(function() {\n      nock.cleanAll();\n    });\n\n    it(\"should throw exceptions on unexpected HTTP responses\", function() {\n      return client\n        .makeRequest({\n          path: \"account\"\n        })\n        .then(function(res) {\n          throw new Error(\"It should have thrown an exception!\");\n        })\n        .catch(function(err) {\n          err.statusCode.should.equal(401);\n          err.message.should.equal(\"Something bad happened...\");\n        });\n    });\n\n    it(\"should throw exceptions on unexpected HTTP responses with no response body\", function() {\n      return client\n        .makeRequest({\n          path: \"unknown\"\n        })\n        .then(function(res) {\n          throw new Error(\"It should have thrown an exception!\");\n        })\n        .catch(function(err) {\n          err.statusCode.should.equal(404);\n          err.message.should.equal(\"\");\n        });\n    });\n\n    it(\"should throw exceptions on unexpected HTTP responses with an empty response body\", function() {\n      return client\n        .makeRequest({\n          path: \"unknown2\"\n        })\n        .then(function(res) {\n          throw new Error(\"It should have thrown an exception!\");\n        })\n        .catch(function(err) {\n          err.statusCode.should.equal(404);\n          err.message.should.equal(\"\");\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/client-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "test/client-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/client-test.js~describe78",
    "access": null,
    "description": "Client",
    "lineNumber": 6
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/client-test.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/client-test.js~describe78.describe79",
    "access": null,
    "description": "using default options",
    "lineNumber": 20
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/client-test.js~describe78.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe79.it80",
    "access": null,
    "description": "should make requests to the default baseUrl",
    "lineNumber": 44
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/client-test.js~describe78.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe79.it81",
    "access": null,
    "description": "should not error on 200 responses",
    "lineNumber": 54
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/client-test.js~describe78.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe79.it82",
    "access": null,
    "description": "should not error on 201 responses",
    "lineNumber": 64
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/client-test.js~describe78.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe79.it83",
    "access": null,
    "description": "should not error on 202 responses",
    "lineNumber": 75
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "test/client-test.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/client-test.js~describe78.describe84",
    "access": null,
    "description": "using custom options",
    "lineNumber": 87
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/client-test.js~describe78.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe84.it85",
    "access": null,
    "description": "should make requests to the custom baseUrl",
    "lineNumber": 107
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "test/client-test.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/client-test.js~describe78.describe86",
    "access": null,
    "description": "using path without user",
    "lineNumber": 126
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/client-test.js~describe78.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe86.it87",
    "access": null,
    "description": "should make requests without user data in the path",
    "lineNumber": 142
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/client-test.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/client-test.js~describe78.describe88",
    "access": null,
    "description": "in error cases",
    "lineNumber": 156
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/client-test.js~describe78.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe88.it89",
    "access": null,
    "description": "should throw exceptions on unexpected HTTP responses",
    "lineNumber": 180
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/client-test.js~describe78.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe88.it90",
    "access": null,
    "description": "should throw exceptions on unexpected HTTP responses with no response body",
    "lineNumber": 194
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/client-test.js~describe78.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/client-test.js~describe78.describe88.it91",
    "access": null,
    "description": "should throw exceptions on unexpected HTTP responses with an empty response body",
    "lineNumber": 208
  },
  {
    "__docId__": 232,
    "kind": "testFile",
    "name": "test/conference-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Conference API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var newTestConference = {\n      from: \"+1234567890\"\n    };\n\n    var changes = {\n      state: \"completed\"\n    };\n\n    var testConference = {\n      id: \"conferenceId\",\n      state: \"completed\",\n      from: \"+1234567890\"\n    };\n\n    var conferencesList = [testConference];\n\n    var newTestMember = {\n      callId: \"callId\"\n    };\n\n    var testMember = {\n      id: \"memberId\",\n      state: \"active\",\n      call: \"http://.../callId\"\n    };\n\n    var memberList = [testMember];\n\n    var tag = \"tag\";\n    var sampleSentence = \"Hello world\";\n    var speakSentencePayload = {\n      sentence: sampleSentence\n    };\n\n    var speakSentencePayloadWithTag = {\n      sentence: sampleSentence,\n      tag: tag\n    };\n\n    var audioUrl = \"http://somewhere/something.mp3\";\n    var playAudioPayload = {\n      fileUrl: audioUrl\n    };\n\n    var playAudioPayloadWithTag = {\n      fileUrl: audioUrl,\n      tag: tag\n    };\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .post(\"/v1/users/\" + userId + \"/conferences\", newTestConference)\n        .reply(\n          201,\n          {},\n          {\n            Location: \"/v1/users/\" + userId + \"/conferences/fakeConferenceId\"\n          }\n        )\n        .get(\"/v1/users/\" + userId + \"/conferences/\" + testConference.id)\n        .reply(200, testConference)\n        .post(\n          \"/v1/users/\" + userId + \"/conferences/\" + testConference.id,\n          changes\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/audio\",\n          speakSentencePayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/audio\",\n          playAudioPayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/audio\",\n          speakSentencePayloadWithTag\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/audio\",\n          playAudioPayloadWithTag\n        )\n        .reply(200)\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/members\"\n        )\n        .reply(200, memberList)\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/members/\" +\n            testMember.id\n        )\n        .reply(200, testMember)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/members\",\n          newTestMember\n        )\n        .reply(\n          201,\n          {},\n          {\n            Location:\n              \"/v1/users/\" +\n              userId +\n              \"/conferences/fakeConferenceId/members/\" +\n              testMember.id\n          }\n        )\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/members/\" +\n            testMember.id,\n          changes\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/members/\" +\n            testMember.id +\n            \"/audio\",\n          speakSentencePayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/members/\" +\n            testMember.id +\n            \"/audio\",\n          playAudioPayload\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/members/\" +\n            testMember.id +\n            \"/audio\",\n          speakSentencePayloadWithTag\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/conferences/\" +\n            testConference.id +\n            \"/members/\" +\n            testMember.id +\n            \"/audio\",\n          playAudioPayloadWithTag\n        )\n        .reply(200);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should create a conference, promise style\", function() {\n      return client.Conference\n        .create(newTestConference)\n        .then(function(conference) {\n          conference.should.eql(newTestConference);\n        });\n    });\n\n    it(\"should get a conference, promise style\", function() {\n      return client.Conference\n        .get(testConference.id)\n        .then(function(conference) {\n          conference.should.eql(testConference);\n        });\n    });\n\n    it(\"should update a conference, promise style\", function() {\n      return client.Conference.update(testConference.id, changes);\n    });\n\n    it(\"should remove a conference, promise style\", function() {\n      return client.Conference.remove(testConference.id);\n    });\n\n    it(\"should speak a sentence to the conference, promise style\", function() {\n      return client.Conference.speakSentence(testConference.id, sampleSentence);\n    });\n\n    it(\"should play an audio file on sentence to the conference, promise style\", function() {\n      return client.Conference.playAudioFile(testConference.id, audioUrl);\n    });\n\n    it(\"should play an audio with custom params to the conference, promise style\", function() {\n      return client.Conference.playAudioAdvanced(testConference.id, {\n        fileUrl: audioUrl\n      });\n    });\n\n    it(\"should get a list of members, promise style\", function() {\n      return client.Conference\n        .getMembers(testConference.id)\n        .then(function(members) {\n          members.should.eql(memberList);\n        });\n    });\n\n    it(\"should get a member, promise style\", function() {\n      return client.Conference\n        .getMember(testConference.id, testMember.id)\n        .then(function(member) {\n          member.should.eql(member);\n        });\n    });\n\n    it(\"should add a member, promise style\", function() {\n      return client.Conference\n        .createMember(testConference.id, newTestMember)\n        .then(function(member) {\n          member.should.eql(newTestMember);\n        });\n    });\n\n    it(\"should update a member, promise style\", function() {\n      return client.Conference.updateMember(\n        testConference.id,\n        testMember.id,\n        changes\n      );\n    });\n\n    it(\"should remove a member, promise style\", function() {\n      return client.Conference.removeMember(testConference.id, testMember.id);\n    });\n\n    it(\"should speak a sentence to the member, promise style\", function() {\n      return client.Conference.speakSentenceToMember(\n        testConference.id,\n        testMember.id,\n        sampleSentence\n      );\n    });\n\n    it(\"should play an audio file on sentence to the member, promise style\", function() {\n      return client.Conference.playAudioFileToMember(\n        testConference.id,\n        testMember.id,\n        audioUrl\n      );\n    });\n\n    it(\"should play an audio with custom params to the member, promise style\", function() {\n      return client.Conference.playAudioAdvancedToMember(\n        testConference.id,\n        testMember.id,\n        { fileUrl: audioUrl }\n      );\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/conference-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "test/conference-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/conference-test.js~describe92",
    "access": null,
    "description": "Conference API",
    "lineNumber": 6
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "test/conference-test.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it94",
    "access": null,
    "description": "should create a conference, promise style",
    "lineNumber": 221
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it95",
    "access": null,
    "description": "should get a conference, promise style",
    "lineNumber": 229
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it96",
    "access": null,
    "description": "should update a conference, promise style",
    "lineNumber": 237
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it97",
    "access": null,
    "description": "should remove a conference, promise style",
    "lineNumber": 241
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it98",
    "access": null,
    "description": "should speak a sentence to the conference, promise style",
    "lineNumber": 245
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it99",
    "access": null,
    "description": "should play an audio file on sentence to the conference, promise style",
    "lineNumber": 249
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it100",
    "access": null,
    "description": "should play an audio with custom params to the conference, promise style",
    "lineNumber": 253
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it101",
    "access": null,
    "description": "should get a list of members, promise style",
    "lineNumber": 259
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it102",
    "access": null,
    "description": "should get a member, promise style",
    "lineNumber": 267
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it103",
    "access": null,
    "description": "should add a member, promise style",
    "lineNumber": 275
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it104",
    "access": null,
    "description": "should update a member, promise style",
    "lineNumber": 283
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it105",
    "access": null,
    "description": "should remove a member, promise style",
    "lineNumber": 291
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it106",
    "access": null,
    "description": "should speak a sentence to the member, promise style",
    "lineNumber": 295
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it107",
    "access": null,
    "description": "should play an audio file on sentence to the member, promise style",
    "lineNumber": 303
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/conference-test.js~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/conference-test.js~describe92.describe93.it108",
    "access": null,
    "description": "should play an audio with custom params to the member, promise style",
    "lineNumber": 311
  },
  {
    "__docId__": 250,
    "kind": "testFile",
    "name": "test/domain-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Domain API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var newTestDomain = {\n      name: \"domain1\",\n      description: \"New domain\"\n    };\n\n    var testDomain = {\n      id: \"fakeDomainId\",\n      name: \"domain11\",\n      description: \"New domain\",\n      endpoints: \"https://.../domains/fakeDomainId/endpoints\"\n    };\n\n    var domainsList = [\n      {\n        id: \"fakeDomainId1\",\n        name: \"domain11\",\n        description: \"New domain1\",\n        endpoints: \"https://.../domains/fakeDomainId1/endpoints\"\n      },\n      {\n        id: \"fakeDomainId2\",\n        name: \"domain12\",\n        description: \"New domain2\",\n        endpoints: \"https://.../domains/fakeDomainId2/endpoints\"\n      }\n    ];\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .post(\"/v1/users/\" + userId + \"/domains\", newTestDomain)\n        .reply(\n          201,\n          {},\n          {\n            Location: \"/v1/users/\" + userId + \"/domains/fakeDomainId\"\n          }\n        )\n        .get(\"/v1/users/\" + userId + \"/domains\")\n        .reply(200, domainsList)\n        .delete(\"/v1/users/\" + userId + \"/domains/\" + testDomain.id)\n        .reply(200);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should create a domain\", function() {\n      return client.Domain.create(newTestDomain).then(function(domain) {\n        domain.should.eql(newTestDomain);\n      });\n    });\n\n    it(\"should return domain list\", function() {\n      return client.Domain.list({}).then(function(domainsResponse) {\n        domainsResponse.domains.should.eql(domainsList);\n      });\n    });\n\n    it(\"those domains should not have more pages\", function() {\n      return client.Domain.list({}).then(function(domainsResponse) {\n        domainsResponse.hasNextPage.should.be.false;\n        return domainsResponse.getNextPage().catch(function(err) {\n          err.should.equal(\"Next page does not exist.\");\n        });\n      });\n    });\n\n    it(\"should remove the domain\", function() {\n      return client.Domain.delete(testDomain.id);\n    });\n\n    describe(\"pagination tests\", function() {\n      before(function() {\n        nock(\"https://api.catapult.inetwork.com\")\n          .persist()\n          .get(\"/v1/users/\" + userId + \"/domains?size=25\")\n          .reply(200, domainsList, {\n            link:\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/domains?page=0&size=25>; rel=\"first\",' +\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/domains>; rel=\"next\"'\n          });\n      });\n\n      after(function() {\n        nock.cleanAll();\n        nock.enableNetConnect();\n      });\n\n      it(\"should return a list of applications with a page to the next link\", function() {\n        return client.Domain\n          .list({ size: 25 })\n          .then(function(domainsResponse) {\n            domainsResponse.domains.should.eql(domainsList);\n            return domainsResponse.getNextPage();\n          })\n          .then(function(moreDomains) {\n            moreDomains.domains.should.eql(domainsList);\n          });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/domain-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "test/domain-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/domain-test.js~describe109",
    "access": null,
    "description": "Domain API",
    "lineNumber": 6
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "test/domain-test.js~describe109",
    "testDepth": 1,
    "static": true,
    "longname": "test/domain-test.js~describe109.describe110",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/domain-test.js~describe109.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/domain-test.js~describe109.describe110.it111",
    "access": null,
    "description": "should create a domain",
    "lineNumber": 70
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/domain-test.js~describe109.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/domain-test.js~describe109.describe110.it112",
    "access": null,
    "description": "should return domain list",
    "lineNumber": 76
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/domain-test.js~describe109.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/domain-test.js~describe109.describe110.it113",
    "access": null,
    "description": "those domains should not have more pages",
    "lineNumber": 82
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/domain-test.js~describe109.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/domain-test.js~describe109.describe110.it114",
    "access": null,
    "description": "should remove the domain",
    "lineNumber": 91
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "test/domain-test.js~describe109.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/domain-test.js~describe109.describe110.describe115",
    "access": null,
    "description": "pagination tests",
    "lineNumber": 95
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/domain-test.js~describe109.describe110.describe115",
    "testDepth": 3,
    "static": true,
    "longname": "test/domain-test.js~describe109.describe110.describe115.it116",
    "access": null,
    "description": "should return a list of applications with a page to the next link",
    "lineNumber": 116
  },
  {
    "__docId__": 259,
    "kind": "testFile",
    "name": "test/endpoint-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Endpoint API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var domainId = \"domainId\";\n\n    var newTestEndpoint = {\n      name: \"endpoint1\",\n      description: \"New endpoint\",\n      domainId: domainId,\n      credentials: { password: \"123456\" }\n    };\n\n    var testEndpoint = {\n      id: \"endpointId1\",\n      name: \"endpoint1\",\n      description: \"New endpoint\",\n      sipUri: \"endpoint1@doname.bwapp.bwsipp.io\",\n      credentials: {\n        realm: \"doname.bwapp.bwsipp.io\",\n        username: \"jsmith-mobile\"\n      }\n    };\n\n    var endpointList = [\n      {\n        id: \"endpointId1\",\n        name: \"endpoint1\",\n        description: \"New endpoint\",\n        sipUri: \"endpoint1@doname.bwapp.bwsipp.io\",\n        credentials: {\n          realm: \"doname.bwapp.bwsipp.io\",\n          username: \"jsmith-mobile\"\n        }\n      },\n      {\n        id: \"endpointId2\",\n        name: \"endpoint2\",\n        description: \"New endpoint\",\n        sipUri: \"endpoint2@doname.bwapp.bwsipp.io\",\n        credentials: {\n          realm: \"doname.bwapp.bwsipp.io\",\n          username: \"jsmith-mobile2\"\n        }\n      }\n    ];\n\n    var changes = { enabled: false };\n\n    var tokenValue = { token: \"token\" };\n\n    var authTokenParams = { expires: 3600 };\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .post(\n          \"/v1/users/\" + userId + \"/domains/\" + domainId + \"/endpoints\",\n          newTestEndpoint\n        )\n        .reply(\n          201,\n          {},\n          {\n            Location:\n              \"/v1/users/\" +\n              userId +\n              \"/domains/\" +\n              domainId +\n              \"/endpoints/fakeEndpointId\"\n          }\n        )\n        .get(\"/v1/users/\" + userId + \"/domains/\" + domainId + \"/endpoints\")\n        .reply(200, endpointList)\n        .delete(\n          \"/v1/users/\" +\n            userId +\n            \"/domains/\" +\n            domainId +\n            \"/endpoints/fakeEndpointId\"\n        )\n        .reply(200)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/domains/\" +\n            domainId +\n            \"/endpoints/fakeEndpointId\",\n          changes\n        )\n        .reply(200)\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/domains/\" +\n            domainId +\n            \"/endpoints/fakeEndpointId\"\n        )\n        .reply(200, testEndpoint)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/domains/\" +\n            domainId +\n            \"/endpoints/fakeEndpointId/tokens\",\n          authTokenParams\n        )\n        .reply(201, tokenValue);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should create an endpoint\", function() {\n      return client.Endpoint\n        .create(domainId, newTestEndpoint)\n        .then(function(endpoint) {\n          endpoint.should.eql(newTestEndpoint);\n        });\n    });\n\n    it(\"should remove the endpoint\", function() {\n      return client.Endpoint.delete(domainId, \"fakeEndpointId\");\n    });\n\n    it(\"should update the endpoint\", function() {\n      return client.Endpoint.update(domainId, \"fakeEndpointId\", changes);\n    });\n\n    it(\"should create auth token for the endpoint\", function() {\n      return client.Endpoint\n        .createAuthToken(domainId, \"fakeEndpointId\", authTokenParams)\n        .then(function(token) {\n          token.should.eql(tokenValue);\n        });\n    });\n\n    it(\"should return a single endpoint\", function() {\n      return client.Endpoint\n        .get(domainId, \"fakeEndpointId\")\n        .then(function(endpoint) {\n          endpoint.should.eql(testEndpoint);\n        });\n    });\n\n    it(\"should get a list of endpoints, Promise\", function() {\n      return client.Endpoint.list(domainId).then(function(response) {\n        response.endpoints.should.eql(endpointList);\n      });\n    });\n\n    it(\"should get a list of endpoints, callback\", function(done) {\n      client.Endpoint.list(domainId, function(err, response) {\n        if (err) {\n          return done(err);\n        }\n        response.endpoints.should.eql(endpointList);\n        done();\n      });\n    });\n\n    it(\"those endpoints should not have more pages\", function() {\n      return client.Endpoint.list(domainId).then(function(response) {\n        response.hasNextPage.should.be.false;\n        return response.getNextPage().catch(function(err) {\n          err.should.equal(\"Next page does not exist.\");\n        });\n      });\n    });\n\n    describe(\"pagination tests\", function() {\n      before(function() {\n        nock(\"https://api.catapult.inetwork.com\")\n          .persist()\n          .get(\n            \"/v1/users/\" +\n              userId +\n              \"/domains/\" +\n              domainId +\n              \"/endpoints?size=25\"\n          )\n          .reply(200, endpointList, {\n            link:\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              \"/domains/\" +\n              domainId +\n              '/endpoints?page=0&size=25>; rel=\"first\",' +\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/endpoints>; rel=\"next\"'\n          });\n      });\n\n      after(function() {\n        nock.cleanAll();\n        nock.enableNetConnect();\n      });\n\n      it(\"should return a list of endpoints with a page to the next link\", function() {\n        return client.Endpoint\n          .list(domainId, { size: 25 })\n          .then(function(response) {\n            response.endpoints.should.eql(endpointList);\n            return response.getNextPage();\n          })\n          .then(function(more) {\n            more.endpoints.should.eql(endpointList);\n          });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/endpoint-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "test/endpoint-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/endpoint-test.js~describe117",
    "access": null,
    "description": "Endpoint API",
    "lineNumber": 6
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "test/endpoint-test.js~describe117",
    "testDepth": 1,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.it119",
    "access": null,
    "description": "should create an endpoint",
    "lineNumber": 132
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.it120",
    "access": null,
    "description": "should remove the endpoint",
    "lineNumber": 140
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.it121",
    "access": null,
    "description": "should update the endpoint",
    "lineNumber": 144
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.it122",
    "access": null,
    "description": "should create auth token for the endpoint",
    "lineNumber": 148
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.it123",
    "access": null,
    "description": "should return a single endpoint",
    "lineNumber": 156
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.it124",
    "access": null,
    "description": "should get a list of endpoints, Promise",
    "lineNumber": 164
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.it125",
    "access": null,
    "description": "should get a list of endpoints, callback",
    "lineNumber": 170
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.it126",
    "access": null,
    "description": "those endpoints should not have more pages",
    "lineNumber": 180
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/endpoint-test.js~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.describe127",
    "access": null,
    "description": "pagination tests",
    "lineNumber": 189
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/endpoint-test.js~describe117.describe118.describe127",
    "testDepth": 3,
    "static": true,
    "longname": "test/endpoint-test.js~describe117.describe118.describe127.it128",
    "access": null,
    "description": "should return a list of endpoints with a page to the next link",
    "lineNumber": 218
  },
  {
    "__docId__": 272,
    "kind": "testFile",
    "name": "test/error-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Error API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var testError = {\n      time: \"2012-11-15T01:29:24.512Z\",\n      category: \"unavailable\",\n      id: \"userErrorId\",\n      message: \"No application is configured for number +19195556666\",\n      code: \"no-application-for-number\"\n    };\n\n    var errorsList = [testError];\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/users/\" + userId + \"/errors/\" + testError.id)\n        .reply(200, testError)\n        .get(\"/v1/users/\" + userId + \"/errors\")\n        .reply(200, errorsList);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should get a error, promise style\", function() {\n      return client.Error.get(testError.id).then(function(error) {\n        error.should.eql(testError);\n      });\n    });\n\n    it(\"should get a list of errors, promise style\", function() {\n      return client.Error.list({}).then(function(errorsResponse) {\n        errorsResponse.errors[0].should.eql(errorsList[0]);\n      });\n    });\n\n    it(\"should get a list of errors, callback style\", function(done) {\n      client.Error.list({}, function(err, errorsResponse) {\n        if (err) {\n          throw err;\n        }\n        errorsResponse.errors[0].should.eql(errorsList[0]);\n        done();\n      });\n    });\n\n    it(\"those errors should not have more pages\", function() {\n      return client.Error.list({}).then(function(errorsResponse) {\n        errorsResponse.hasNextPage.should.be.false;\n        return errorsResponse.getNextPage().catch(function(err) {\n          err.should.equal(\"Next page does not exist.\");\n        });\n      });\n    });\n\n    describe(\"pagination tests\", function() {\n      before(function() {\n        nock(\"https://api.catapult.inetwork.com\")\n          .persist()\n          .get(\"/v1/users/\" + userId + \"/errors?size=25\")\n          .reply(200, errorsList, {\n            link:\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/errors?page=0&size=25>; rel=\"first\",' +\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/errors>; rel=\"next\"'\n          });\n      });\n\n      after(function() {\n        nock.cleanAll();\n        nock.enableNetConnect();\n      });\n\n      it(\"should return a list of errors with a page to the next link\", function() {\n        return client.Error\n          .list({ size: 25 })\n          .then(function(errorsResponse) {\n            errorsResponse.errors.should.eql(errorsList);\n            return errorsResponse.getNextPage();\n          })\n          .then(function(moreErrors) {\n            moreErrors.errors.should.eql(errorsList);\n          });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/error-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "describe129",
    "testId": 129,
    "memberof": "test/error-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/error-test.js~describe129",
    "access": null,
    "description": "Error API",
    "lineNumber": 6
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "describe130",
    "testId": 130,
    "memberof": "test/error-test.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/error-test.js~describe129.describe130",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/error-test.js~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/error-test.js~describe129.describe130.it131",
    "access": null,
    "description": "should get a error, promise style",
    "lineNumber": 45
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/error-test.js~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/error-test.js~describe129.describe130.it132",
    "access": null,
    "description": "should get a list of errors, promise style",
    "lineNumber": 51
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/error-test.js~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/error-test.js~describe129.describe130.it133",
    "access": null,
    "description": "should get a list of errors, callback style",
    "lineNumber": 57
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/error-test.js~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/error-test.js~describe129.describe130.it134",
    "access": null,
    "description": "those errors should not have more pages",
    "lineNumber": 67
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "describe135",
    "testId": 135,
    "memberof": "test/error-test.js~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/error-test.js~describe129.describe130.describe135",
    "access": null,
    "description": "pagination tests",
    "lineNumber": 76
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/error-test.js~describe129.describe130.describe135",
    "testDepth": 3,
    "static": true,
    "longname": "test/error-test.js~describe129.describe130.describe135.it136",
    "access": null,
    "description": "should return a list of errors with a page to the next link",
    "lineNumber": 97
  },
  {
    "__docId__": 281,
    "kind": "testFile",
    "name": "test/headerparsinglib-test.js",
    "content": "var getNextLink = require(\"../lib/headerParsingLib\").getNextLink;\n\ndescribe(\"Utility Library\", function() {\n  describe(\"getNextLink works as intended if the response has a next link\", function() {\n    var response;\n\n    before(function() {\n      response = {\n        headers: {\n          link:\n            '<https://api.catapult.inetwork.com/v1/users/someUser/applications?page=0&size=25>; rel=\"first\",' +\n            '<https://api.catapult.inetwork.com/v1/users/someUser/applications>; rel=\"next\"'\n        }\n      };\n    });\n\n    it(\"returns a link\", function() {\n      getNextLink(response.headers).should.be.ok;\n    });\n  });\n\n  describe(\"getNextLink works as intended if the response does not have a next link\", function() {\n    var response;\n\n    before(function() {\n      response = {\n        headers: {\n          link:\n            '<https://api.catapult.inetwork.com/v1/users/someUser/applications?page=0&size=25>; rel=\"first\"'\n        }\n      };\n    });\n\n    it(\"returns null\", function() {\n      (getNextLink(response.headers) === null).should.be.true;\n    });\n  });\n\n  describe(\"getNextLink works as intended if the response does not have any links\", function() {\n    var response;\n\n    before(function() {\n      response = {\n        headers: {}\n      };\n    });\n\n    it(\"returns null\", function() {\n      (getNextLink(response.headers) === null).should.be.true;\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/headerparsinglib-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "describe137",
    "testId": 137,
    "memberof": "test/headerparsinglib-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/headerparsinglib-test.js~describe137",
    "access": null,
    "description": "Utility Library",
    "lineNumber": 3
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "describe138",
    "testId": 138,
    "memberof": "test/headerparsinglib-test.js~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "test/headerparsinglib-test.js~describe137.describe138",
    "access": null,
    "description": "getNextLink works as intended if the response has a next link",
    "lineNumber": 4
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/headerparsinglib-test.js~describe137.describe138",
    "testDepth": 2,
    "static": true,
    "longname": "test/headerparsinglib-test.js~describe137.describe138.it139",
    "access": null,
    "description": "returns a link",
    "lineNumber": 17
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "describe140",
    "testId": 140,
    "memberof": "test/headerparsinglib-test.js~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "test/headerparsinglib-test.js~describe137.describe140",
    "access": null,
    "description": "getNextLink works as intended if the response does not have a next link",
    "lineNumber": 22
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/headerparsinglib-test.js~describe137.describe140",
    "testDepth": 2,
    "static": true,
    "longname": "test/headerparsinglib-test.js~describe137.describe140.it141",
    "access": null,
    "description": "returns null",
    "lineNumber": 34
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "describe142",
    "testId": 142,
    "memberof": "test/headerparsinglib-test.js~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "test/headerparsinglib-test.js~describe137.describe142",
    "access": null,
    "description": "getNextLink works as intended if the response does not have any links",
    "lineNumber": 39
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/headerparsinglib-test.js~describe137.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "test/headerparsinglib-test.js~describe137.describe142.it143",
    "access": null,
    "description": "returns null",
    "lineNumber": 48
  },
  {
    "__docId__": 289,
    "kind": "testFile",
    "name": "test/media-test.js",
    "content": "var nock = require(\"nock\");\nvar stream = require(\"stream\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar os = require(\"os\");\nvar sinon = require(\"sinon\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Media API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var mediaName1 = \"file1\";\n    var mediaName2 = \"file2\";\n    var mediaContent = \"1234567890\";\n\n    var getMediaContentAsStream = function() {\n      var s = new stream.Readable();\n      s.push(mediaContent);\n      s.push(null);\n      return s;\n    };\n\n    var mediaFileList = [\n      {\n        contentLength: 561276,\n        mediaName: \"{mediaName1}\",\n        content: \"api.catapult.inetwork.com/.../media/{mediaName1}\"\n      }\n    ];\n\n    var mediaContentFile = path.join(\n      os.tmpdir(),\n      \"node-bandwidth-media-file.txt\"\n    );\n\n    before(function() {\n      fs.writeFileSync(mediaContentFile, mediaContent);\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .matchHeader(\"Content-Type\", \"application/octet-stream\")\n        .put(\"/v1/users/\" + userId + \"/media/\" + mediaName1)\n        .reply(200);\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .matchHeader(\"Content-Type\", \"text/plain\")\n        .put(\"/v1/users/\" + userId + \"/media/\" + mediaName2, mediaContent)\n        .reply(200);\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/users/\" + userId + \"/media/\" + mediaName1)\n        .reply(200, mediaContent, { \"Content-Type\": \"text/plain\" })\n        .get(\"/v1/users/\" + userId + \"/media\")\n        .reply(200, mediaFileList)\n        .delete(\"/v1/users/\" + userId + \"/media/\" + mediaName1)\n        .reply(200);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n      fs.unlinkSync(mediaContentFile);\n    });\n\n    it(\"should upload a media file (Buffer), Promise\", function() {\n      return client.Media.upload(mediaName1, new Buffer(mediaContent));\n    });\n\n    it(\"should upload a media file (Buffer) with content type, Promise\", function() {\n      return client.Media.upload(\n        mediaName2,\n        new Buffer(mediaContent),\n        \"text/plain\"\n      );\n    });\n\n    it(\"should upload a media file (Buffer), callback\", function(done) {\n      return client.Media.upload(mediaName1, new Buffer(mediaContent), done);\n    });\n\n    it(\"should upload a media file (Buffer) with content type, callback\", function(\n      done\n    ) {\n      return client.Media.upload(\n        mediaName2,\n        new Buffer(mediaContent),\n        \"text/plain\",\n        done\n      );\n    });\n\n    it(\"should upload a media file (stream), Promise\", function() {\n      return client.Media.upload(mediaName1, getMediaContentAsStream());\n    });\n\n    it(\"should upload a media file (stream) with content type, Promise\", function() {\n      return client.Media.upload(\n        mediaName2,\n        getMediaContentAsStream(),\n        \"text/plain\"\n      );\n    });\n\n    it(\"should upload a media file (file), Promise\", function() {\n      return client.Media.upload(mediaName1, mediaContentFile);\n    });\n\n    it(\"should upload a media file (file) with content type, Promise\", function() {\n      return client.Media.upload(mediaName2, mediaContentFile, \"text/plain\");\n    });\n\n    it(\"should throw error if uploaded data is invalid\", function(done) {\n      return client.Media.upload(mediaName1, {}, function(err) {\n        err.should.be.ok;\n        done();\n      });\n    });\n\n    it(\"should throw error if fs.stat failed\", function(done) {\n      var stub = sinon.stub(fs, \"stat\").callsArgWith(1, new Error());\n      return client.Media.upload(mediaName1, mediaContent, function(err) {\n        err.should.be.ok;\n        stub.restore();\n        done();\n      });\n    });\n\n    it(\"should download a media file\", function() {\n      return client.Media.download(mediaName1).then(function(result) {\n        result.contentType.should.eql(\"text/plain\");\n        result.content.toString().should.eql(mediaContent);\n      });\n    });\n\n    it(\"should list media files\", function() {\n      return client.Media.list().then(function(files) {\n        files[0].should.eql(mediaFileList[0]);\n      });\n    });\n\n    it(\"should remove a media file\", function() {\n      return client.Media.delete(mediaName1);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/media-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "describe144",
    "testId": 144,
    "memberof": "test/media-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/media-test.js~describe144",
    "access": null,
    "description": "Media API",
    "lineNumber": 11
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "describe145",
    "testId": 145,
    "memberof": "test/media-test.js~describe144",
    "testDepth": 1,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145",
    "access": null,
    "description": "global methods",
    "lineNumber": 12
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it146",
    "access": null,
    "description": "should upload a media file (Buffer), Promise",
    "lineNumber": 78
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it147",
    "access": null,
    "description": "should upload a media file (Buffer) with content type, Promise",
    "lineNumber": 82
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it148",
    "access": null,
    "description": "should upload a media file (Buffer), callback",
    "lineNumber": 90
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it149",
    "access": null,
    "description": "should upload a media file (Buffer) with content type, callback",
    "lineNumber": 94
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it150",
    "access": null,
    "description": "should upload a media file (stream), Promise",
    "lineNumber": 105
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it151",
    "access": null,
    "description": "should upload a media file (stream) with content type, Promise",
    "lineNumber": 109
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it152",
    "access": null,
    "description": "should upload a media file (file), Promise",
    "lineNumber": 117
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it153",
    "access": null,
    "description": "should upload a media file (file) with content type, Promise",
    "lineNumber": 121
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it154",
    "access": null,
    "description": "should throw error if uploaded data is invalid",
    "lineNumber": 125
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it155",
    "access": null,
    "description": "should throw error if fs.stat failed",
    "lineNumber": 132
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it156",
    "access": null,
    "description": "should download a media file",
    "lineNumber": 141
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it157",
    "access": null,
    "description": "should list media files",
    "lineNumber": 148
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/media-test.js~describe144.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/media-test.js~describe144.describe145.it158",
    "access": null,
    "description": "should remove a media file",
    "lineNumber": 154
  },
  {
    "__docId__": 305,
    "kind": "testFile",
    "name": "test/message-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Message API\", function() {\n  var client;\n\n  var userId = \"fakeUserId\";\n  var apiToken = \"fakeApiToken\";\n  var apiSecret = \"fakeapiSecret\";\n\n  var newTestMessage = {\n    from: \"+12345678901\",\n    to: \"+12345678902\",\n    text: \"Hello world.\"\n  };\n\n  var otherTestMessage = {\n    from: \"+12345678902\",\n    text: \"Hello world.\"\n  };\n\n  var testMessage = {\n    id: \"fakeMessageId\",\n    messageId: \"fakeMessageId\",\n    from: \"+12345678901\",\n    to: \"+12345678902\",\n    text: \"Good morning, this is a test message\",\n    time: \"2012-10-05T20:37:38.048Z\",\n    direction: \"out\",\n    state: \"sent\",\n    media: []\n  };\n\n  var someOtherTestMessage = {\n    id: \"fakeMessageId2\",\n    messageId: \"fakeMessageId2\",\n    from: \"+12345678902\",\n    to: \"+12345678901\",\n    text: \"I received your test message\",\n    time: \"2012-10-05T20:38:11.023Z\",\n    direction: \"in\",\n    state: \"received\",\n    media: []\n  };\n\n  var messagesList = [testMessage, someOtherTestMessage];\n\n  var fromDateTime = \"2012-10-04\";\n  var toDateTime = \"2012-10-06\";\n\n  describe(\"global methods using single page response\", function() {\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .post(\"/v1/users/\" + userId + \"/messages\", newTestMessage)\n        .reply(\n          201,\n          {},\n          {\n            Location: \"/v1/users/\" + userId + \"/messages/fakeMessageId\"\n          }\n        )\n        .post(\"/v1/users/\" + userId + \"/messages\", [\n          newTestMessage,\n          otherTestMessage\n        ])\n        .reply(202, [\n          {\n            result: \"accepted\",\n            location:\n              \"https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              \"/messages/fakeMessageId\"\n          },\n          {\n            result: \"error\",\n            error: {\n              category: \"bad-request\",\n              code: \"blank-property\",\n              message:\n                \"The 'message' resource property 'to' must contain at least\" +\n                \" one non-whitespace character\",\n              details: []\n            }\n          }\n        ])\n        .get(\"/v1/users/\" + userId + \"/messages/\" + testMessage.id)\n        .reply(200, testMessage)\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/messages?fromDateTime=\" +\n            fromDateTime +\n            \"&\" +\n            \"toDateTime=\" +\n            toDateTime\n        )\n        .reply(200, messagesList);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should send a message, promise style\", function() {\n      return client.Message.send(newTestMessage).then(function(message) {\n        message.should.eql(newTestMessage);\n      });\n    });\n\n    it(\"should send a message, callback style\", function(done) {\n      client.Message.send(newTestMessage, function(err, message) {\n        if (err) {\n          throw err;\n        }\n        message.should.eql(newTestMessage);\n        done();\n      });\n    });\n\n    it(\"should send multiple messages\", function() {\n      return client.Message\n        .sendMultiple([newTestMessage, otherTestMessage])\n        .then(function(messages) {\n          messages[0].message.should.eql(newTestMessage);\n          messages[1].error.should.eql({\n            category: \"bad-request\",\n            code: \"blank-property\",\n            message:\n              \"The 'message' resource property 'to' must contain at \" +\n              \"least one non-whitespace character\",\n            details: []\n          });\n        });\n    });\n\n    it(\"should get a message, promise style\", function() {\n      return client.Message.get(testMessage.id).then(function(message) {\n        message.should.eql(testMessage);\n      });\n    });\n\n    it(\"should get a list of messages, promise style\", function() {\n      return client.Message\n        .list({\n          fromDateTime: fromDateTime,\n          toDateTime: toDateTime\n        })\n        .then(function(messageResponse) {\n          var messages = messageResponse.messages;\n          messages.should.eql(messagesList);\n        });\n    });\n\n    it(\"should get a list of messages, callback style\", function(done) {\n      client.Message.list(\n        {\n          fromDateTime: fromDateTime,\n          toDateTime: toDateTime\n        },\n        function(err, messageResponse) {\n          if (err) {\n            throw err;\n          }\n          var messages = messageResponse.messages;\n          messages.should.eql(messagesList);\n          done();\n        }\n      );\n    });\n  });\n\n  describe(\"list function with a multiple page response\", function() {\n    before(function() {\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/users/\" + userId + \"/messages\")\n        .reply(200, messagesList, {\n          link:\n            \"<https://api.catapult.inetwork.com\" +\n            \"/v1/users/\" +\n            userId +\n            \"/messages?\" +\n            'sortKeyLT=1>; rel=\"next\"'\n        })\n        .get(\"/v1/users/\" + userId + \"/messages?sortKeyLT=1\")\n        .reply(200, []);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should get the next page of messages (if it exists)\", function() {\n      //Simulating a response which has 1 page of messages\n      return client.Message\n        .list()\n        .then(function(messageResponse) {\n          var messages = messageResponse.messages;\n\n          messages[0].should.eql(messagesList[0]);\n          messages[1].should.eql(messagesList[1]);\n\n          return messageResponse.getNextPage();\n        })\n        .then(function(otherMessageResponse) {\n          messages = otherMessageResponse.messages;\n\n          (messages[0] === undefined).should.be.true;\n\n          return otherMessageResponse.getNextPage();\n        })\n        .catch(function(err) {\n          err.should.eql(\"Next page does not exist.\");\n        });\n    });\n  });\n\n  describe(\"list function with no messages available\", function() {\n    before(function() {\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/users/\" + userId + \"/messages\")\n        .reply(200, []);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should not get the next page of messages\", function() {\n      //Simulating a response which has 0 pages of messages\n      return client.Message\n        .list()\n        .then(function(messageResponse) {\n          var messages = messageResponse.messages;\n          (messages[0] === undefined).should.be.true;\n\n          return messageResponse.getNextPage();\n        })\n        .catch(function(err) {\n          err.should.eql(\"Next page does not exist.\");\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/message-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/message-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/message-test.js~describe159",
    "access": null,
    "description": "Message API",
    "lineNumber": 5
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "test/message-test.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/message-test.js~describe159.describe160",
    "access": null,
    "description": "global methods using single page response",
    "lineNumber": 52
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/message-test.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/message-test.js~describe159.describe160.it161",
    "access": null,
    "description": "should send a message, promise style",
    "lineNumber": 114
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/message-test.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/message-test.js~describe159.describe160.it162",
    "access": null,
    "description": "should send a message, callback style",
    "lineNumber": 120
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/message-test.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/message-test.js~describe159.describe160.it163",
    "access": null,
    "description": "should send multiple messages",
    "lineNumber": 130
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/message-test.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/message-test.js~describe159.describe160.it164",
    "access": null,
    "description": "should get a message, promise style",
    "lineNumber": 146
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/message-test.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/message-test.js~describe159.describe160.it165",
    "access": null,
    "description": "should get a list of messages, promise style",
    "lineNumber": 152
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "test/message-test.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/message-test.js~describe159.describe160.it166",
    "access": null,
    "description": "should get a list of messages, callback style",
    "lineNumber": 164
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "describe167",
    "testId": 167,
    "memberof": "test/message-test.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/message-test.js~describe159.describe167",
    "access": null,
    "description": "list function with a multiple page response",
    "lineNumber": 182
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/message-test.js~describe159.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/message-test.js~describe159.describe167.it168",
    "access": null,
    "description": "should get the next page of messages (if it exists)",
    "lineNumber": 206
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/message-test.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/message-test.js~describe159.describe169",
    "access": null,
    "description": "list function with no messages available",
    "lineNumber": 231
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/message-test.js~describe159.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/message-test.js~describe159.describe169.it170",
    "access": null,
    "description": "should not get the next page of messages",
    "lineNumber": 246
  },
  {
    "__docId__": 318,
    "kind": "testFile",
    "name": "test/numberInfo-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"NumberInfo API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var number = \"234567890\";\n\n    var testNumberInfo = {\n      created: \"2013-09-23T16:31:15Z\",\n      name: \"Name\",\n      number: \"{number}\",\n      updated: \"2013-09-23T16:42:18Z\"\n    };\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/phoneNumbers/numberInfo/\" + number)\n        .reply(200, testNumberInfo);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should get a number info, promise style\", function() {\n      return client.NumberInfo.get(number).then(function(numberInfo) {\n        numberInfo.should.eql(testNumberInfo);\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/numberInfo-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "describe171",
    "testId": 171,
    "memberof": "test/numberInfo-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/numberInfo-test.js~describe171",
    "access": null,
    "description": "NumberInfo API",
    "lineNumber": 6
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "describe172",
    "testId": 172,
    "memberof": "test/numberInfo-test.js~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "test/numberInfo-test.js~describe171.describe172",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/numberInfo-test.js~describe171.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/numberInfo-test.js~describe171.describe172.it173",
    "access": null,
    "description": "should get a number info, promise style",
    "lineNumber": 42
  },
  {
    "__docId__": 322,
    "kind": "testFile",
    "name": "test/phoneNumber-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"PhoneNumber API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var newTestPhoneNumber = {\n      number: \"+1234567890\",\n      name: \"my number\"\n    };\n\n    var changes = {\n      name: \"main\"\n    };\n\n    var testPhoneNumber = {\n      id: \"phoneNumberId\",\n      number: \"+1234567890\",\n      nationalNumber: \"(234) 567-890\"\n    };\n\n    var phoneNumbersList = [testPhoneNumber];\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .post(\"/v1/users/\" + userId + \"/phoneNumbers\", newTestPhoneNumber)\n        .reply(\n          201,\n          {},\n          {\n            Location: \"/v1/users/\" + userId + \"/phoneNumbers/fakePhoneNumberId\"\n          }\n        )\n        .get(\"/v1/users/\" + userId + \"/phoneNumbers/\" + testPhoneNumber.id)\n        .reply(200, testPhoneNumber)\n        .get(\"/v1/users/\" + userId + \"/phoneNumbers\")\n        .reply(200, phoneNumbersList)\n        .post(\n          \"/v1/users/\" + userId + \"/phoneNumbers/\" + testPhoneNumber.id,\n          changes\n        )\n        .reply(200)\n        .delete(\"/v1/users/\" + userId + \"/phoneNumbers/\" + testPhoneNumber.id)\n        .reply(200);\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should create a phoneNumber, promise style\", function() {\n      return client.PhoneNumber\n        .create(newTestPhoneNumber)\n        .then(function(phoneNumber) {\n          phoneNumber.should.eql(newTestPhoneNumber);\n        });\n    });\n\n    it(\"should create a phoneNumber, callback style\", function(done) {\n      client.PhoneNumber.create(newTestPhoneNumber, function(err, phoneNumber) {\n        if (err) {\n          throw err;\n        }\n        phoneNumber.should.eql(newTestPhoneNumber);\n        done();\n      });\n    });\n\n    it(\"should get a phoneNumber, promise style\", function() {\n      return client.PhoneNumber\n        .get(testPhoneNumber.id)\n        .then(function(phoneNumber) {\n          phoneNumber.should.eql(testPhoneNumber);\n        });\n    });\n\n    it(\"should get a list of phoneNumbers, promise style\", function() {\n      return client.PhoneNumber.list({}).then(function(phoneNumbersResponse) {\n        phoneNumbersResponse.phoneNumbers[0].should.eql(phoneNumbersList[0]);\n      });\n    });\n\n    it(\"should get a list of phoneNumbers, callback style\", function(done) {\n      client.PhoneNumber.list({}, function(err, phoneNumbersResponse) {\n        if (err) {\n          throw err;\n        }\n        phoneNumbersResponse.phoneNumbers[0].should.eql(phoneNumbersList[0]);\n        done();\n      });\n    });\n\n    it(\"those phoneNumbers should not have more pages\", function() {\n      return client.PhoneNumber.list({}).then(function(phoneNumbersResponse) {\n        phoneNumbersResponse.hasNextPage.should.be.false;\n        return phoneNumbersResponse.getNextPage().catch(function(err) {\n          err.should.equal(\"Next page does not exist.\");\n        });\n      });\n    });\n\n    it(\"should remove the phoneNumber, promise style\", function() {\n      return client.PhoneNumber.delete(testPhoneNumber.id);\n    });\n\n    it(\"should update the phoneNumber, promise style\", function() {\n      return client.PhoneNumber.update(testPhoneNumber.id, changes);\n    });\n\n    describe(\"pagination tests\", function() {\n      before(function() {\n        nock(\"https://api.catapult.inetwork.com\")\n          .persist()\n          .get(\"/v1/users/\" + userId + \"/phoneNumbers?size=25\")\n          .reply(200, phoneNumbersList, {\n            link:\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/phoneNumbers?page=0&size=25>; rel=\"first\",' +\n              \"<https://api.catapult.inetwork.com/v1/users/\" +\n              userId +\n              '/phoneNumbers>; rel=\"next\"'\n          });\n      });\n\n      after(function() {\n        nock.cleanAll();\n        nock.enableNetConnect();\n      });\n\n      it(\"should return a list of phoneNumbers with a page to the next link\", function() {\n        return client.PhoneNumber\n          .list({ size: 25 })\n          .then(function(phoneNumbersResponse) {\n            phoneNumbersResponse.phoneNumbers.should.eql(phoneNumbersList);\n            return phoneNumbersResponse.getNextPage();\n          })\n          .then(function(morePhoneNumbers) {\n            morePhoneNumbers.phoneNumbers.should.eql(phoneNumbersList);\n          });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/phoneNumber-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "describe174",
    "testId": 174,
    "memberof": "test/phoneNumber-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174",
    "access": null,
    "description": "PhoneNumber API",
    "lineNumber": 6
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "test/phoneNumber-test.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.it176",
    "access": null,
    "description": "should create a phoneNumber, promise style",
    "lineNumber": 67
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.it177",
    "access": null,
    "description": "should create a phoneNumber, callback style",
    "lineNumber": 75
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.it178",
    "access": null,
    "description": "should get a phoneNumber, promise style",
    "lineNumber": 85
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.it179",
    "access": null,
    "description": "should get a list of phoneNumbers, promise style",
    "lineNumber": 93
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.it180",
    "access": null,
    "description": "should get a list of phoneNumbers, callback style",
    "lineNumber": 99
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.it181",
    "access": null,
    "description": "those phoneNumbers should not have more pages",
    "lineNumber": 109
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.it182",
    "access": null,
    "description": "should remove the phoneNumber, promise style",
    "lineNumber": 118
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.it183",
    "access": null,
    "description": "should update the phoneNumber, promise style",
    "lineNumber": 122
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "describe184",
    "testId": 184,
    "memberof": "test/phoneNumber-test.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.describe184",
    "access": null,
    "description": "pagination tests",
    "lineNumber": 126
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/phoneNumber-test.js~describe174.describe175.describe184",
    "testDepth": 3,
    "static": true,
    "longname": "test/phoneNumber-test.js~describe174.describe175.describe184.it185",
    "access": null,
    "description": "should return a list of phoneNumbers with a page to the next link",
    "lineNumber": 147
  },
  {
    "__docId__": 335,
    "kind": "testFile",
    "name": "test/recording-test.js",
    "content": "var nock = require(\"nock\");\nvar CatapultClient = require(\"../index\");\n\nvar baseUrl = \"https://api.catapult.inetwork.com\";\n\ndescribe(\"Recording API\", function() {\n  describe(\"global methods\", function() {\n    var client;\n\n    var userId = \"fakeUserId\";\n    var apiToken = \"fakeApiToken\";\n    var apiSecret = \"fakeapiSecret\";\n\n    var newTestMessage = {\n      from: \"+12345678901\",\n      to: \"+12345678902\",\n      text: \"Hello world.\"\n    };\n\n    var testRecording = {\n      endTime: \"2013-02-08T13:17:12.181Z\",\n      id: \"fakeRecordingId\",\n      media: \"https://.../v1/users/.../media/c-bonay3r4mtwbplurq4nkt7q-1.wav\",\n      call: \"https://.../v1/users/.../calls/{callId}\",\n      startTime: \"2013-02-08T13:15:47.587Z\",\n      state: \"complete\"\n    };\n\n    var recordingList = [\n      {\n        endTime: \"2013-02-08T13:17:12.181Z\",\n        id: \"fakeRecordingId1\",\n        media: \"https://.../v1/users/.../media/c-bonay3r4mtwbplurq4nkt7q-1.wav\",\n        call: \"https://.../v1/users/.../calls/{callId}\",\n        startTime: \"2013-02-08T13:15:47.587Z\",\n        state: \"complete\"\n      },\n      {\n        endTime: \"2013-02-08T13:17:12.181Z\",\n        id: \"fakeRecordingId2\",\n        media: \"https://.../v1/users/.../media/c-bonay3r4mtwbplurq4nkt7q-1.wav\",\n        call: \"https://.../v1/users/.../calls/{callId}\",\n        startTime: \"2013-02-08T13:15:47.587Z\",\n        state: \"complete\"\n      }\n    ];\n\n    var testTranscription = {\n      chargeableDuration: 11,\n      id: \"transcriptionId\",\n      state: \"completed\",\n      text: \"Hey there, I was calling to talk about plans for this saturday. \",\n      textSize: 63,\n      textUrl: \"https://api.catapult.inetwork.com/.../media/{transcriptionId}\",\n      time: \"2014-12-23T23:08:59Z\"\n    };\n\n    var transcriptionList = [testTranscription];\n\n    before(function() {\n      client = new CatapultClient({\n        userId: userId,\n        apiToken: apiToken,\n        apiSecret: apiSecret\n      });\n      nock.disableNetConnect();\n\n      nock(\"https://api.catapult.inetwork.com\")\n        .persist()\n        .get(\"/v1/users/\" + userId + \"/recordings/\" + testRecording.id)\n        .reply(200, testRecording)\n        .get(\"/v1/users/\" + userId + \"/recordings\")\n        .reply(200, recordingList)\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/recordings/\" +\n            testRecording.id +\n            \"/transcriptions\"\n        )\n        .reply(200, transcriptionList)\n        .get(\n          \"/v1/users/\" +\n            userId +\n            \"/recordings/\" +\n            testRecording.id +\n            \"/transcriptions/\" +\n            testTranscription.id\n        )\n        .reply(200, testTranscription)\n        .post(\n          \"/v1/users/\" +\n            userId +\n            \"/recordings/\" +\n            testRecording.id +\n            \"/transcriptions\"\n        )\n        .reply(\n          201,\n          {},\n          {\n            Location:\n              \"/v1/users/\" +\n              userId +\n              \"/recordings/\" +\n              testRecording.id +\n              \"/transcriptions/\" +\n              testTranscription.id\n          }\n        );\n    });\n\n    after(function() {\n      nock.cleanAll();\n      nock.enableNetConnect();\n    });\n\n    it(\"should get a recording\", function() {\n      return client.Recording.get(testRecording.id).then(function(recording) {\n        recording.should.eql(testRecording);\n      });\n    });\n\n    it(\"should get a list of recordings, promise style\", function() {\n      return client.Recording.list().then(function(recordings) {\n        recordings.should.eql(recordingList);\n      });\n    });\n\n    it(\"should get a list of transcriptions, promise style\", function() {\n      return client.Recording\n        .getTranscriptions(testRecording.id)\n        .then(function(transcriptions) {\n          transcriptions.should.eql(transcriptionList);\n        });\n    });\n\n    it(\"should get a transcriptions, promise style\", function() {\n      return client.Recording\n        .getTranscription(testRecording.id, testTranscription.id)\n        .then(function(transcription) {\n          transcription.should.eql(testTranscription);\n        });\n    });\n\n    it(\"should create a transcriptions, promise style\", function() {\n      return client.Recording\n        .createTranscription(testRecording.id)\n        .then(function(transcription) {\n          transcription.id.should.eql(testTranscription.id);\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/recording-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "describe186",
    "testId": 186,
    "memberof": "test/recording-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/recording-test.js~describe186",
    "access": null,
    "description": "Recording API",
    "lineNumber": 6
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "test/recording-test.js~describe186",
    "testDepth": 1,
    "static": true,
    "longname": "test/recording-test.js~describe186.describe187",
    "access": null,
    "description": "global methods",
    "lineNumber": 7
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/recording-test.js~describe186.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/recording-test.js~describe186.describe187.it188",
    "access": null,
    "description": "should get a recording",
    "lineNumber": 118
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "test/recording-test.js~describe186.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/recording-test.js~describe186.describe187.it189",
    "access": null,
    "description": "should get a list of recordings, promise style",
    "lineNumber": 124
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/recording-test.js~describe186.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/recording-test.js~describe186.describe187.it190",
    "access": null,
    "description": "should get a list of transcriptions, promise style",
    "lineNumber": 130
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/recording-test.js~describe186.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/recording-test.js~describe186.describe187.it191",
    "access": null,
    "description": "should get a transcriptions, promise style",
    "lineNumber": 138
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "test/recording-test.js~describe186.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/recording-test.js~describe186.describe187.it192",
    "access": null,
    "description": "should create a transcriptions, promise style",
    "lineNumber": 146
  },
  {
    "__docId__": 343,
    "kind": "testFile",
    "name": "test/xml-test.js",
    "content": "var BXMLResponse = require(\"../lib/xml.js\");\nvar fs = require(\"fs\");\nvar speakSentenceOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/speakSentence.xml\",\n  \"utf8\"\n);\nvar gatherOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/gather.xml\",\n  \"utf8\"\n);\nvar callOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/call.xml\",\n  \"utf8\"\n);\nvar conferenceOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/conference.xml\",\n  \"utf8\"\n);\nvar hangupOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/hangup.xml\",\n  \"utf8\"\n);\nvar audioOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/playAudio.xml\",\n  \"utf8\"\n);\nvar recordOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/record.xml\",\n  \"utf8\"\n);\nvar redirectOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/redirect.xml\",\n  \"utf8\"\n);\nvar sendMessageOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/sendMessage.xml\",\n  \"utf8\"\n);\nvar transferOnlyResponse = fs.readFileSync(\n  \"./test/bxml-responses/transfer.xml\",\n  \"utf8\"\n);\nvar nestingResponse = fs.readFileSync(\n  \"./test/bxml-responses/nesting.xml\",\n  \"utf8\"\n);\nvar chainingResponse = fs.readFileSync(\n  \"./test/bxml-responses/chaining.xml\",\n  \"utf8\"\n);\nvar multiTransferResponse = fs.readFileSync(\n  \"./test/bxml-responses/multiTransfer.xml\",\n  \"utf8\"\n);\n\ndescribe(\"Builder\", function() {\n  describe(\"Individual verb - speakSentence\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.speakSentence(\"Thank you for calling ACME Technical Support.\");\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(speakSentenceOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - gather\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.gather({\n        requestUrl: \"http://www.example.com/\"\n      });\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(gatherOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - call\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.call({\n        from: \"+19195551212\",\n        to: \"+19195551213\"\n      });\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(callOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - conference\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.conference({\n        from: \"+19195551212\"\n      });\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(conferenceOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - hangup\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.hangup({});\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(hangupOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - playAudio\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.playAudio(\"http://www.example.com/example.mp3\");\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(audioOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - record\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.record({\n        requestUrl: \"http://www.example.com\",\n        requestUrlTimeout: 12345\n      });\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(recordOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - redirect\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.redirect({\n        requestUrl: \"http://www.example.com\",\n        requestUrlTimeout: 12345\n      });\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(redirectOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - sendMessage\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.sendMessage(\"Where are you?\", {\n        from: \"+19195551212\",\n        to: \"+19195551213\"\n      });\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(sendMessageOnlyResponse);\n    });\n  });\n  describe(\"Individual verb - transfer\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.transfer({\n        transferTo: \"+19195551212\"\n      });\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(transferOnlyResponse);\n    });\n  });\n  describe(\"Nesting\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.gather(\n        {\n          requestUrl: \"http://www.example.com/\"\n        },\n        function() {\n          this.speakSentence(\"Press some numbers!\");\n        }\n      );\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(nestingResponse);\n    });\n  });\n  describe(\"Chaining\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp.speakSentence(\"Hi! My name is:\").speakSentence(\"What? My name is:\");\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(chainingResponse);\n    });\n  });\n  describe(\"Multiple Transfer with Speak Sentence\", function() {\n    var myApp;\n    before(function() {\n      myApp = new BXMLResponse();\n      myApp\n        .speakSentence(\"Your call is somewhat important to us.\")\n        .speakSentence(\"Please wait while it is being transferred.\")\n        .transfer({}, function() {\n          this.phoneNumber(\"transferOne\");\n          this.phoneNumber(\"transferTwo\");\n          this.phoneNumber(\"transferThree\");\n          this.speakSentence(\n            \"A call is being transferred to you from Customer Service.\"\n          );\n        });\n    });\n    it(\"Should generate correct BXML\", function() {\n      myApp.toString().should.equal(multiTransferResponse);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/dtolbert/code/sdks/node-bandwidth/test/xml-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "describe193",
    "testId": 193,
    "memberof": "test/xml-test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/xml-test.js~describe193",
    "access": null,
    "description": "Builder",
    "lineNumber": 56
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "describe194",
    "testId": 194,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe194",
    "access": null,
    "description": "Individual verb - speakSentence",
    "lineNumber": 57
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/xml-test.js~describe193.describe194",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe194.it195",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 63
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe196",
    "access": null,
    "description": "Individual verb - gather",
    "lineNumber": 67
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/xml-test.js~describe193.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe196.it197",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 75
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "describe198",
    "testId": 198,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe198",
    "access": null,
    "description": "Individual verb - call",
    "lineNumber": 79
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/xml-test.js~describe193.describe198",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe198.it199",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 88
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "describe200",
    "testId": 200,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe200",
    "access": null,
    "description": "Individual verb - conference",
    "lineNumber": 92
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/xml-test.js~describe193.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe200.it201",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 100
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "describe202",
    "testId": 202,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe202",
    "access": null,
    "description": "Individual verb - hangup",
    "lineNumber": 104
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/xml-test.js~describe193.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe202.it203",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 110
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "describe204",
    "testId": 204,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe204",
    "access": null,
    "description": "Individual verb - playAudio",
    "lineNumber": 114
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "test/xml-test.js~describe193.describe204",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe204.it205",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 120
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "describe206",
    "testId": 206,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe206",
    "access": null,
    "description": "Individual verb - record",
    "lineNumber": 124
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/xml-test.js~describe193.describe206",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe206.it207",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 133
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "describe208",
    "testId": 208,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe208",
    "access": null,
    "description": "Individual verb - redirect",
    "lineNumber": 137
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/xml-test.js~describe193.describe208",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe208.it209",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 146
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "describe210",
    "testId": 210,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe210",
    "access": null,
    "description": "Individual verb - sendMessage",
    "lineNumber": 150
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "test/xml-test.js~describe193.describe210",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe210.it211",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 159
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "describe212",
    "testId": 212,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe212",
    "access": null,
    "description": "Individual verb - transfer",
    "lineNumber": 163
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/xml-test.js~describe193.describe212",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe212.it213",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 171
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "describe214",
    "testId": 214,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe214",
    "access": null,
    "description": "Nesting",
    "lineNumber": 175
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "test/xml-test.js~describe193.describe214",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe214.it215",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 188
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "describe216",
    "testId": 216,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe216",
    "access": null,
    "description": "Chaining",
    "lineNumber": 192
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/xml-test.js~describe193.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe216.it217",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 198
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "describe218",
    "testId": 218,
    "memberof": "test/xml-test.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe218",
    "access": null,
    "description": "Multiple Transfer with Speak Sentence",
    "lineNumber": 202
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "test/xml-test.js~describe193.describe218",
    "testDepth": 2,
    "static": true,
    "longname": "test/xml-test.js~describe193.describe218.it219",
    "access": null,
    "description": "Should generate correct BXML",
    "lineNumber": 218
  }
]